# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `addressable` gem.
# Please instead update this file by running `bin/tapioca gem addressable`.

# source://addressable//lib/addressable/version.rb#22
module Addressable; end

# source://addressable//lib/addressable/idna/pure.rb#21
module Addressable::IDNA
  class << self
    # source://addressable//lib/addressable/idna/pure.rb#117
    def _deprecated_unicode_normalize_kc(value); end

    # source://addressable//lib/addressable/idna/pure.rb#67
    def to_ascii(input); end

    # source://addressable//lib/addressable/idna/pure.rb#93
    def to_unicode(input); end

    def unicode_normalize_kc(*args, &block); end

    private

    # source://addressable//lib/addressable/idna/pure.rb#140
    def lookup_unicode_lowercase(codepoint); end

    # source://addressable//lib/addressable/idna/pure.rb#488
    def punycode_adapt(delta, numpoints, firsttime); end

    # source://addressable//lib/addressable/idna/pure.rb#456
    def punycode_basic?(codepoint); end

    # source://addressable//lib/addressable/idna/pure.rb#334
    def punycode_decode(punycode); end

    # source://addressable//lib/addressable/idna/pure.rb#474
    def punycode_decode_digit(codepoint); end

    # source://addressable//lib/addressable/idna/pure.rb#461
    def punycode_delimiter?(codepoint); end

    # source://addressable//lib/addressable/idna/pure.rb#213
    def punycode_encode(unicode); end

    # source://addressable//lib/addressable/idna/pure.rb#466
    def punycode_encode_digit(d); end

    # source://addressable//lib/addressable/idna/pure.rb#132
    def unicode_downcase(input); end
  end
end

# source://addressable//lib/addressable/idna/pure.rb#183
Addressable::IDNA::ACE_MAX_LENGTH = T.let(T.unsafe(nil), Integer)

# source://addressable//lib/addressable/idna/pure.rb#40
Addressable::IDNA::ACE_PREFIX = T.let(T.unsafe(nil), String)

# source://addressable//lib/addressable/idna/pure.rb#172
Addressable::IDNA::COMPOSITION_TABLE = T.let(T.unsafe(nil), Hash)

# source://addressable//lib/addressable/idna/pure.rb#185
Addressable::IDNA::PUNYCODE_BASE = T.let(T.unsafe(nil), Integer)

# source://addressable//lib/addressable/idna/pure.rb#189
Addressable::IDNA::PUNYCODE_DAMP = T.let(T.unsafe(nil), Integer)

# source://addressable//lib/addressable/idna/pure.rb#192
Addressable::IDNA::PUNYCODE_DELIMITER = T.let(T.unsafe(nil), Integer)

# source://addressable//lib/addressable/idna/pure.rb#190
Addressable::IDNA::PUNYCODE_INITIAL_BIAS = T.let(T.unsafe(nil), Integer)

# source://addressable//lib/addressable/idna/pure.rb#191
Addressable::IDNA::PUNYCODE_INITIAL_N = T.let(T.unsafe(nil), Integer)

# source://addressable//lib/addressable/idna/pure.rb#194
Addressable::IDNA::PUNYCODE_MAXINT = T.let(T.unsafe(nil), Integer)

# source://addressable//lib/addressable/idna/pure.rb#196
Addressable::IDNA::PUNYCODE_PRINT_ASCII = T.let(T.unsafe(nil), String)

# source://addressable//lib/addressable/idna/pure.rb#188
Addressable::IDNA::PUNYCODE_SKEW = T.let(T.unsafe(nil), Integer)

# source://addressable//lib/addressable/idna/pure.rb#187
Addressable::IDNA::PUNYCODE_TMAX = T.let(T.unsafe(nil), Integer)

# source://addressable//lib/addressable/idna/pure.rb#186
Addressable::IDNA::PUNYCODE_TMIN = T.let(T.unsafe(nil), Integer)

# source://addressable//lib/addressable/idna/pure.rb#207
class Addressable::IDNA::PunycodeBadInput < ::StandardError; end

# source://addressable//lib/addressable/idna/pure.rb#209
class Addressable::IDNA::PunycodeBigOutput < ::StandardError; end

# source://addressable//lib/addressable/idna/pure.rb#211
class Addressable::IDNA::PunycodeOverflow < ::StandardError; end

# source://addressable//lib/addressable/idna/pure.rb#163
Addressable::IDNA::UNICODE_DATA = T.let(T.unsafe(nil), Hash)

# source://addressable//lib/addressable/idna/pure.rb#150
Addressable::IDNA::UNICODE_DATA_CANONICAL = T.let(T.unsafe(nil), Integer)

# source://addressable//lib/addressable/idna/pure.rb#148
Addressable::IDNA::UNICODE_DATA_COMBINING_CLASS = T.let(T.unsafe(nil), Integer)

# source://addressable//lib/addressable/idna/pure.rb#151
Addressable::IDNA::UNICODE_DATA_COMPATIBILITY = T.let(T.unsafe(nil), Integer)

# source://addressable//lib/addressable/idna/pure.rb#149
Addressable::IDNA::UNICODE_DATA_EXCLUSION = T.let(T.unsafe(nil), Integer)

# source://addressable//lib/addressable/idna/pure.rb#153
Addressable::IDNA::UNICODE_DATA_LOWERCASE = T.let(T.unsafe(nil), Integer)

# source://addressable//lib/addressable/idna/pure.rb#154
Addressable::IDNA::UNICODE_DATA_TITLECASE = T.let(T.unsafe(nil), Integer)

# source://addressable//lib/addressable/idna/pure.rb#152
Addressable::IDNA::UNICODE_DATA_UPPERCASE = T.let(T.unsafe(nil), Integer)

# source://addressable//lib/addressable/idna/pure.rb#182
Addressable::IDNA::UNICODE_MAX_LENGTH = T.let(T.unsafe(nil), Integer)

# source://addressable//lib/addressable/idna/pure.rb#36
Addressable::IDNA::UNICODE_TABLE = T.let(T.unsafe(nil), String)

# source://addressable//lib/addressable/idna/pure.rb#42
Addressable::IDNA::UTF8_REGEX = T.let(T.unsafe(nil), Regexp)

# source://addressable//lib/addressable/idna/pure.rb#53
Addressable::IDNA::UTF8_REGEX_MULTIBYTE = T.let(T.unsafe(nil), Regexp)

# source://addressable//lib/addressable/uri.rb#31
class Addressable::URI
  # source://addressable//lib/addressable/uri.rb#819
  def initialize(options = T.unsafe(nil)); end

  # source://addressable//lib/addressable/uri.rb#1878
  def +(uri); end

  # source://addressable//lib/addressable/uri.rb#2228
  def ==(uri); end

  # source://addressable//lib/addressable/uri.rb#2206
  def ===(uri); end

  # source://addressable//lib/addressable/uri.rb#1868
  def absolute?; end

  # source://addressable//lib/addressable/uri.rb#1223
  def authority; end

  # source://addressable//lib/addressable/uri.rb#1263
  def authority=(new_authority); end

  # source://addressable//lib/addressable/uri.rb#1577
  def basename; end

  # source://addressable//lib/addressable/uri.rb#1443
  def default_port; end

  # source://addressable//lib/addressable/uri.rb#2385
  def defer_validation; end

  # source://addressable//lib/addressable/uri.rb#2190
  def display_uri; end

  # source://addressable//lib/addressable/uri.rb#1214
  def domain; end

  # source://addressable//lib/addressable/uri.rb#2260
  def dup; end

  # source://addressable//lib/addressable/uri.rb#2322
  def empty?; end

  # source://addressable//lib/addressable/uri.rb#2395
  def encode_with(coder); end

  # source://addressable//lib/addressable/uri.rb#2242
  def eql?(uri); end

  # source://addressable//lib/addressable/uri.rb#1587
  def extname; end

  # source://addressable//lib/addressable/uri.rb#1799
  def fragment; end

  # source://addressable//lib/addressable/uri.rb#1824
  def fragment=(new_fragment); end

  # source://addressable//lib/addressable/uri.rb#859
  def freeze; end

  # source://addressable//lib/addressable/uri.rb#2252
  def hash; end

  # source://addressable//lib/addressable/uri.rb#1109
  def host; end

  # source://addressable//lib/addressable/uri.rb#1145
  def host=(new_host); end

  # source://addressable//lib/addressable/uri.rb#1167
  def hostname; end

  # source://addressable//lib/addressable/uri.rb#1179
  def hostname=(new_hostname); end

  # source://addressable//lib/addressable/uri.rb#1429
  def inferred_port; end

  # source://addressable//lib/addressable/uri.rb#2406
  def init_with(coder); end

  # source://addressable//lib/addressable/uri.rb#2373
  def inspect; end

  # source://addressable//lib/addressable/uri.rb#1844
  def ip_based?; end

  # source://addressable//lib/addressable/uri.rb#1878
  def join(uri); end

  # source://addressable//lib/addressable/uri.rb#1981
  def join!(uri); end

  # source://addressable//lib/addressable/uri.rb#1996
  def merge(hash); end

  # source://addressable//lib/addressable/uri.rb#2061
  def merge!(uri); end

  # source://addressable//lib/addressable/uri.rb#2153
  def normalize; end

  # source://addressable//lib/addressable/uri.rb#2179
  def normalize!; end

  # source://addressable//lib/addressable/uri.rb#1241
  def normalized_authority; end

  # source://addressable//lib/addressable/uri.rb#1805
  def normalized_fragment; end

  # source://addressable//lib/addressable/uri.rb#1115
  def normalized_host; end

  # source://addressable//lib/addressable/uri.rb#991
  def normalized_password; end

  # source://addressable//lib/addressable/uri.rb#1524
  def normalized_path; end

  # source://addressable//lib/addressable/uri.rb#1381
  def normalized_port; end

  # source://addressable//lib/addressable/uri.rb#1602
  def normalized_query(*flags); end

  # source://addressable//lib/addressable/uri.rb#885
  def normalized_scheme; end

  # source://addressable//lib/addressable/uri.rb#1474
  def normalized_site; end

  # source://addressable//lib/addressable/uri.rb#936
  def normalized_user; end

  # source://addressable//lib/addressable/uri.rb#1057
  def normalized_userinfo; end

  # source://addressable//lib/addressable/uri.rb#2286
  def omit(*components); end

  # source://addressable//lib/addressable/uri.rb#2313
  def omit!(*components); end

  # source://addressable//lib/addressable/uri.rb#1303
  def origin; end

  # source://addressable//lib/addressable/uri.rb#1322
  def origin=(new_origin); end

  # source://addressable//lib/addressable/uri.rb#985
  def password; end

  # source://addressable//lib/addressable/uri.rb#1014
  def password=(new_password); end

  # source://addressable//lib/addressable/uri.rb#1517
  def path; end

  # source://addressable//lib/addressable/uri.rb#1556
  def path=(new_path); end

  # source://addressable//lib/addressable/uri.rb#1375
  def port; end

  # source://addressable//lib/addressable/uri.rb#1397
  def port=(new_port); end

  # source://addressable//lib/addressable/uri.rb#1596
  def query; end

  # source://addressable//lib/addressable/uri.rb#1630
  def query=(new_query); end

  # source://addressable//lib/addressable/uri.rb#1661
  def query_values(return_type = T.unsafe(nil)); end

  # source://addressable//lib/addressable/uri.rb#1712
  def query_values=(new_query_values); end

  # source://addressable//lib/addressable/uri.rb#1858
  def relative?; end

  # source://addressable//lib/addressable/uri.rb#1763
  def request_uri; end

  # source://addressable//lib/addressable/uri.rb#1775
  def request_uri=(new_request_uri); end

  # source://addressable//lib/addressable/uri.rb#2074
  def route_from(uri); end

  # source://addressable//lib/addressable/uri.rb#2139
  def route_to(uri); end

  # source://addressable//lib/addressable/uri.rb#879
  def scheme; end

  # source://addressable//lib/addressable/uri.rb#906
  def scheme=(new_scheme); end

  # source://addressable//lib/addressable/uri.rb#1456
  def site; end

  # source://addressable//lib/addressable/uri.rb#1495
  def site=(new_site); end

  # source://addressable//lib/addressable/uri.rb#1196
  def tld; end

  # source://addressable//lib/addressable/uri.rb#1204
  def tld=(new_tld); end

  # source://addressable//lib/addressable/uri.rb#2356
  def to_hash; end

  # source://addressable//lib/addressable/uri.rb#2330
  def to_s; end

  # source://addressable//lib/addressable/uri.rb#2330
  def to_str; end

  # source://addressable//lib/addressable/uri.rb#930
  def user; end

  # source://addressable//lib/addressable/uri.rb#959
  def user=(new_user); end

  # source://addressable//lib/addressable/uri.rb#1041
  def userinfo; end

  # source://addressable//lib/addressable/uri.rb#1080
  def userinfo=(new_userinfo); end

  protected

  # source://addressable//lib/addressable/uri.rb#2550
  def force_utf8_encoding_if_needed(str); end

  # source://addressable//lib/addressable/uri.rb#2541
  def remove_composite_values; end

  # source://addressable//lib/addressable/uri.rb#2508
  def replace_self(uri); end

  # source://addressable//lib/addressable/uri.rb#2531
  def split_path(path); end

  # source://addressable//lib/addressable/uri.rb#2465
  def validate; end

  private

  # source://addressable//lib/addressable/uri.rb#2562
  def reset_ivs; end

  class << self
    # source://addressable//lib/addressable/uri.rb#279
    def convert_path(path); end

    # source://addressable//lib/addressable/uri.rb#605
    def encode(uri, return_type = T.unsafe(nil)); end

    # source://addressable//lib/addressable/uri.rb#390
    def encode_component(component, character_class = T.unsafe(nil), upcase_encoded = T.unsafe(nil)); end

    # source://addressable//lib/addressable/uri.rb#605
    def escape(uri, return_type = T.unsafe(nil)); end

    # source://addressable//lib/addressable/uri.rb#390
    def escape_component(component, character_class = T.unsafe(nil), upcase_encoded = T.unsafe(nil)); end

    # source://addressable//lib/addressable/uri.rb#729
    def form_encode(form_values, sort = T.unsafe(nil)); end

    # source://addressable//lib/addressable/uri.rb#782
    def form_unencode(encoded_value); end

    # source://addressable//lib/addressable/uri.rb#178
    def heuristic_parse(uri, hints = T.unsafe(nil)); end

    # source://addressable//lib/addressable/uri.rb#1358
    def ip_based_schemes; end

    # source://addressable//lib/addressable/uri.rb#330
    def join(*uris); end

    # source://addressable//lib/addressable/uri.rb#541
    def normalize_component(component, character_class = T.unsafe(nil), leave_encoded = T.unsafe(nil)); end

    # source://addressable//lib/addressable/uri.rb#2429
    def normalize_path(path); end

    # source://addressable//lib/addressable/uri.rb#660
    def normalized_encode(uri, return_type = T.unsafe(nil)); end

    # source://addressable//lib/addressable/uri.rb#101
    def parse(uri); end

    # source://addressable//lib/addressable/uri.rb#1365
    def port_mapping; end

    # source://addressable//lib/addressable/uri.rb#461
    def unencode(uri, return_type = T.unsafe(nil), leave_encoded = T.unsafe(nil)); end

    # source://addressable//lib/addressable/uri.rb#461
    def unencode_component(uri, return_type = T.unsafe(nil), leave_encoded = T.unsafe(nil)); end

    # source://addressable//lib/addressable/uri.rb#461
    def unescape(uri, return_type = T.unsafe(nil), leave_encoded = T.unsafe(nil)); end

    # source://addressable//lib/addressable/uri.rb#461
    def unescape_component(uri, return_type = T.unsafe(nil), leave_encoded = T.unsafe(nil)); end
  end
end

# source://addressable//lib/addressable/uri.rb#46
module Addressable::URI::CharacterClasses; end

# source://addressable//lib/addressable/uri.rb#47
Addressable::URI::CharacterClasses::ALPHA = T.let(T.unsafe(nil), String)

# source://addressable//lib/addressable/uri.rb#56
Addressable::URI::CharacterClasses::AUTHORITY = T.let(T.unsafe(nil), String)

# source://addressable//lib/addressable/uri.rb#48
Addressable::URI::CharacterClasses::DIGIT = T.let(T.unsafe(nil), String)

# source://addressable//lib/addressable/uri.rb#59
Addressable::URI::CharacterClasses::FRAGMENT = T.let(T.unsafe(nil), String)

# source://addressable//lib/addressable/uri.rb#49
Addressable::URI::CharacterClasses::GEN_DELIMS = T.let(T.unsafe(nil), String)

# source://addressable//lib/addressable/uri.rb#55
Addressable::URI::CharacterClasses::HOST = T.let(T.unsafe(nil), String)

# source://addressable//lib/addressable/uri.rb#57
Addressable::URI::CharacterClasses::PATH = T.let(T.unsafe(nil), String)

# source://addressable//lib/addressable/uri.rb#53
Addressable::URI::CharacterClasses::PCHAR = T.let(T.unsafe(nil), String)

# source://addressable//lib/addressable/uri.rb#58
Addressable::URI::CharacterClasses::QUERY = T.let(T.unsafe(nil), String)

# source://addressable//lib/addressable/uri.rb#51
Addressable::URI::CharacterClasses::RESERVED = T.let(T.unsafe(nil), String)

# source://addressable//lib/addressable/uri.rb#54
Addressable::URI::CharacterClasses::SCHEME = T.let(T.unsafe(nil), String)

# source://addressable//lib/addressable/uri.rb#50
Addressable::URI::CharacterClasses::SUB_DELIMS = T.let(T.unsafe(nil), String)

# source://addressable//lib/addressable/uri.rb#52
Addressable::URI::CharacterClasses::UNRESERVED = T.let(T.unsafe(nil), String)

# source://addressable//lib/addressable/uri.rb#72
Addressable::URI::EMPTY_STR = T.let(T.unsafe(nil), String)

# source://addressable//lib/addressable/uri.rb#34
class Addressable::URI::InvalidURIError < ::StandardError; end

# source://addressable//lib/addressable/uri.rb#2587
module Addressable::URI::NONE; end

# source://addressable//lib/addressable/uri.rb#1519
Addressable::URI::NORMPATH = T.let(T.unsafe(nil), Regexp)

# source://addressable//lib/addressable/uri.rb#62
module Addressable::URI::NormalizeCharacterClasses; end

# source://addressable//lib/addressable/uri.rb#67
Addressable::URI::NormalizeCharacterClasses::FRAGMENT = T.let(T.unsafe(nil), Regexp)

# source://addressable//lib/addressable/uri.rb#63
Addressable::URI::NormalizeCharacterClasses::HOST = T.let(T.unsafe(nil), Regexp)

# source://addressable//lib/addressable/uri.rb#65
Addressable::URI::NormalizeCharacterClasses::PCHAR = T.let(T.unsafe(nil), Regexp)

# source://addressable//lib/addressable/uri.rb#68
Addressable::URI::NormalizeCharacterClasses::QUERY = T.let(T.unsafe(nil), Regexp)

# source://addressable//lib/addressable/uri.rb#66
Addressable::URI::NormalizeCharacterClasses::SCHEME = T.let(T.unsafe(nil), Regexp)

# source://addressable//lib/addressable/uri.rb#64
Addressable::URI::NormalizeCharacterClasses::UNRESERVED = T.let(T.unsafe(nil), Regexp)

# source://addressable//lib/addressable/uri.rb#2416
Addressable::URI::PARENT = T.let(T.unsafe(nil), String)

# source://addressable//lib/addressable/uri.rb#76
Addressable::URI::PORT_MAPPING = T.let(T.unsafe(nil), Hash)

# source://addressable//lib/addressable/uri.rb#2418
Addressable::URI::RULE_2A = T.let(T.unsafe(nil), Regexp)

# source://addressable//lib/addressable/uri.rb#2419
Addressable::URI::RULE_2B_2C = T.let(T.unsafe(nil), Regexp)

# source://addressable//lib/addressable/uri.rb#2420
Addressable::URI::RULE_2D = T.let(T.unsafe(nil), Regexp)

# source://addressable//lib/addressable/uri.rb#2421
Addressable::URI::RULE_PREFIXED_PARENT = T.let(T.unsafe(nil), Regexp)

# source://addressable//lib/addressable/uri.rb#2415
Addressable::URI::SELF_REF = T.let(T.unsafe(nil), String)

# source://addressable//lib/addressable/uri.rb#347
Addressable::URI::SEQUENCE_ENCODING_TABLE = T.let(T.unsafe(nil), Array)

# source://addressable//lib/addressable/uri.rb#351
Addressable::URI::SEQUENCE_UPCASED_PERCENT_ENCODING_TABLE = T.let(T.unsafe(nil), Array)

# source://addressable//lib/addressable/uri.rb#71
Addressable::URI::SLASH = T.let(T.unsafe(nil), String)

# source://addressable//lib/addressable/uri.rb#74
Addressable::URI::URIREGEX = T.let(T.unsafe(nil), Regexp)

# source://addressable//lib/addressable/version.rb#23
module Addressable::VERSION; end

# source://addressable//lib/addressable/version.rb#24
Addressable::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://addressable//lib/addressable/version.rb#25
Addressable::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://addressable//lib/addressable/version.rb#28
Addressable::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://addressable//lib/addressable/version.rb#26
Addressable::VERSION::TINY = T.let(T.unsafe(nil), Integer)
