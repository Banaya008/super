# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `minitest-bisect` gem.
# Please instead update this file by running `bin/tapioca gem minitest-bisect`.

class Array
  include ::Enumerable
  include ::JSON::Ext::Generator::GeneratorMethods::Array

  # Find the minimal combination of a collection of items that satisfy +test+.
  def find_minimal_combination(&test); end

  def find_minimal_combination_and_count; end
end

Array::NOT_SET = T.let(T.unsafe(nil), Object)

class ComboFinder
  def cache_result(result, data, cache); end
  def d(s = T.unsafe(nil)); end

  # Find the minimal combination of a collection of items that satisfy +test+.
  #
  # If you think of the collection as a binary tree, this algorithm
  # does a breadth first search of the combinations that satisfy
  # +test+.
  # --
  #  level   collection
  #
  #  0          A
  #  1      B       C
  #  2    D   E   F   G
  #  3   1 2 3 4 5 6 7 8
  #
  # This assumes that A has already been tested and you're now trying
  # to reduce the match. Starting at level 1, test B & C separately.
  # If either test positive, reduce the search space accordingly. If
  # not, step down to level 2 and search w/ finer granularity (ie, DF,
  # DG, EF--DE and FG were already tested as B & C). Repeat until a
  # minimal combination is found.
  def find_minimal_combination(ary); end
end

module Minitest
  class << self
    def __run(reporter, options); end
    def after_run(&block); end
    def autorun; end
    def backtrace_filter; end
    def backtrace_filter=(_arg0); end
    def clock_time; end
    def extensions; end
    def extensions=(_arg0); end
    def filter_backtrace(bt); end
    def info_signal; end
    def info_signal=(_arg0); end
    def init_plugins(options); end
    def load_plugins; end
    def parallel_executor; end
    def parallel_executor=(_arg0); end
    def process_args(args = T.unsafe(nil)); end
    def reporter; end
    def reporter=(_arg0); end
    def run(args = T.unsafe(nil)); end
    def run_one_method(klass, method_name); end
  end
end

class Minitest::Bisect
  # @return [Bisect] a new instance of Bisect
  def initialize; end

  def bisect_files(files); end
  def bisect_methods(cmd); end
  def build_files_cmd(culprits, rb, mt); end
  def build_methods_cmd(cmd, culprits = T.unsafe(nil), bad = T.unsafe(nil)); end
  def build_re(bad); end

  # Returns the value of attribute culprits.
  def culprits; end

  # Sets the attribute culprits
  #
  # @param value the value to set the attribute culprits to.
  def culprits=(_arg0); end

  # Returns the value of attribute failures.
  def failures; end

  # Sets the attribute failures
  #
  # @param value the value to set the attribute failures to.
  def failures=(_arg0); end

  def map_failures; end
  def minitest_result(file, klass, method, fails, assertions, time); end

  # Server Methods:
  def minitest_start; end

  # Returns the value of attribute mode.
  def mode; end

  # Sets the attribute mode
  #
  # @param value the value to set the attribute mode to.
  def mode=(_arg0); end

  def re_escape(str); end
  def reset; end
  def run(args); end

  # Returns the value of attribute seen_bad.
  def seen_bad; end

  # Sets the attribute seen_bad
  #
  # @param value the value to set the attribute seen_bad to.
  def seen_bad=(_arg0); end

  # Returns the value of attribute tainted.
  def tainted; end

  # Sets the attribute tainted
  #
  # @param value the value to set the attribute tainted to.
  def tainted=(_arg0); end

  # Returns the value of attribute tainted.
  def tainted?; end

  def time_it(prompt, cmd); end

  class << self
    def run(files); end
  end
end

class Minitest::Bisect::PathExpander < ::PathExpander
  # @return [PathExpander] a new instance of PathExpander
  def initialize(args = T.unsafe(nil)); end

  # Overrides PathExpander#process_flags to filter out ruby flags
  # from minitest flags. Only supports -I<paths>, -d, and -w for
  # ruby.
  def process_flags(flags); end

  # Returns the value of attribute rb_flags.
  def rb_flags; end

  # Sets the attribute rb_flags
  #
  # @param value the value to set the attribute rb_flags to.
  def rb_flags=(_arg0); end
end

Minitest::Bisect::PathExpander::TEST_GLOB = T.let(T.unsafe(nil), String)

# Borrowed from rake
Minitest::Bisect::RUBY = T.let(T.unsafe(nil), String)

Minitest::Bisect::SHH = T.let(T.unsafe(nil), String)
Minitest::Bisect::VERSION = T.let(T.unsafe(nil), String)
Minitest::ENCS = T.let(T.unsafe(nil), TrueClass)
Minitest::VERSION = T.let(T.unsafe(nil), String)
