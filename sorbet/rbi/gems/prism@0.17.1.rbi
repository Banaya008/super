# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `prism` gem.
# Please instead update this file by running `bin/tapioca gem prism`.

# =begin
# This file is generated by the templates/template.rb script and should not be
# modified manually. See templates/rbi/prism.rbi.erb
# if you are looking to modify the template
# =end

# source://prism//lib/prism.rb#8
module Prism
  class << self
    def dump(*_arg0); end
    def dump_file(*_arg0); end
    def lex(*_arg0); end

    # source://prism//lib/prism.rb#45
    def lex_compat(source, **options); end

    def lex_file(*_arg0); end

    # source://prism//lib/prism.rb#55
    def lex_ripper(source); end

    # source://prism//lib/prism.rb#63
    def load(source, serialized); end

    def parse(*_arg0); end
    def parse_comments(*_arg0); end
    def parse_file(*_arg0); end
    def parse_file_comments(*_arg0); end
    def parse_lex(*_arg0); end
    def parse_lex_file(*_arg0); end
  end
end

# source://prism//lib/prism/node.rb#48
class Prism::AliasGlobalVariableNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#58
  sig do
    params(
      new_name: Prism::Node,
      old_name: Prism::Node,
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(new_name, old_name, keyword_loc, location); end

  # source://prism//lib/prism/node.rb#66
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#71
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#81
  def comment_targets; end

  # source://prism//lib/prism/node.rb#76
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#86
  sig { params(params: T.untyped).returns(Prism::AliasGlobalVariableNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#71
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#99
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#109
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#104
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#55
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#49
  sig { returns(Prism::Node) }
  def new_name; end

  # source://prism//lib/prism/node.rb#52
  sig { returns(Prism::Node) }
  def old_name; end

  # source://prism//lib/prism/node.rb#133
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#143
    def type; end
  end
end

# source://prism//lib/prism/node.rb#153
class Prism::AliasMethodNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#163
  sig do
    params(
      new_name: Prism::Node,
      old_name: Prism::Node,
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(new_name, old_name, keyword_loc, location); end

  # source://prism//lib/prism/node.rb#171
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#176
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#186
  def comment_targets; end

  # source://prism//lib/prism/node.rb#181
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#191
  sig { params(params: T.untyped).returns(Prism::AliasMethodNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#176
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#204
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#214
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#209
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#160
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#154
  sig { returns(Prism::Node) }
  def new_name; end

  # source://prism//lib/prism/node.rb#157
  sig { returns(Prism::Node) }
  def old_name; end

  # source://prism//lib/prism/node.rb#238
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#248
    def type; end
  end
end

# source://prism//lib/prism/node.rb#258
class Prism::AlternationPatternNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#268
  sig { params(left: Prism::Node, right: Prism::Node, operator_loc: Prism::Location, location: Prism::Location).void }
  def initialize(left, right, operator_loc, location); end

  # source://prism//lib/prism/node.rb#276
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#281
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#291
  def comment_targets; end

  # source://prism//lib/prism/node.rb#286
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#296
  sig { params(params: T.untyped).returns(Prism::AlternationPatternNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#281
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#309
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#319
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#259
  sig { returns(Prism::Node) }
  def left; end

  # source://prism//lib/prism/node.rb#314
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#265
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#262
  sig { returns(Prism::Node) }
  def right; end

  # source://prism//lib/prism/node.rb#343
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#353
    def type; end
  end
end

# source://prism//lib/prism/node.rb#363
class Prism::AndNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#373
  sig { params(left: Prism::Node, right: Prism::Node, operator_loc: Prism::Location, location: Prism::Location).void }
  def initialize(left, right, operator_loc, location); end

  # source://prism//lib/prism/node.rb#381
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#386
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#396
  def comment_targets; end

  # source://prism//lib/prism/node.rb#391
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#401
  sig { params(params: T.untyped).returns(Prism::AndNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#386
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#414
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#424
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#364
  sig { returns(Prism::Node) }
  def left; end

  # source://prism//lib/prism/node.rb#419
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#370
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#367
  sig { returns(Prism::Node) }
  def right; end

  # source://prism//lib/prism/node.rb#448
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#458
    def type; end
  end
end

# source://prism//lib/prism/node.rb#468
class Prism::ArgumentsNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#475
  sig { params(arguments: T::Array[Prism::Node], flags: Integer, location: Prism::Location).void }
  def initialize(arguments, flags, location); end

  # source://prism//lib/prism/node.rb#482
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#469
  sig { returns(T::Array[Prism::Node]) }
  def arguments; end

  # source://prism//lib/prism/node.rb#487
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#497
  def comment_targets; end

  # source://prism//lib/prism/node.rb#492
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#502
  sig { params(params: T.untyped).returns(Prism::ArgumentsNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#487
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#514
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#524
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#519
  sig { returns(T::Boolean) }
  def keyword_splat?; end

  # source://prism//lib/prism/node.rb#546
  def type; end

  private

  # source://prism//lib/prism/node.rb#472
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#556
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16536
# Flags for arguments nodes.
module Prism::ArgumentsNodeFlags; end

# source://prism//lib/prism/node.rb#16538
Prism::ArgumentsNodeFlags::KEYWORD_SPLAT = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#567
class Prism::ArrayNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#577
  sig do
    params(
      elements: T::Array[Prism::Node],
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(elements, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#585
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#590
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#628
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#574
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#600
  def comment_targets; end

  # source://prism//lib/prism/node.rb#595
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#605
  sig { params(params: T.untyped).returns(Prism::ArrayNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#590
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#618
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#568
  sig { returns(T::Array[Prism::Node]) }
  def elements; end

  # source://prism//lib/prism/node.rb#633
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#623
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#571
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#655
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#665
    def type; end
  end
end

# source://prism//lib/prism/node.rb#687
class Prism::ArrayPatternNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#706
  sig do
    params(
      constant: T.nilable(Prism::Node),
      requireds: T::Array[Prism::Node],
      rest: T.nilable(Prism::Node),
      posts: T::Array[Prism::Node],
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(constant, requireds, rest, posts, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#717
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#722
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#768
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#703
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#737
  def comment_targets; end

  # source://prism//lib/prism/node.rb#727
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#688
  sig { returns(T.nilable(Prism::Node)) }
  def constant; end

  # source://prism//lib/prism/node.rb#742
  sig { params(params: T.untyped).returns(Prism::ArrayPatternNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#722
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#758
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#773
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#763
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#700
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#697
  sig { returns(T::Array[Prism::Node]) }
  def posts; end

  # source://prism//lib/prism/node.rb#691
  sig { returns(T::Array[Prism::Node]) }
  def requireds; end

  # source://prism//lib/prism/node.rb#694
  sig { returns(T.nilable(Prism::Node)) }
  def rest; end

  # source://prism//lib/prism/node.rb#808
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#818
    def type; end
  end
end

# source://prism//lib/prism/node.rb#828
class Prism::AssocNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#838
  sig do
    params(
      key: Prism::Node,
      value: T.nilable(Prism::Node),
      operator_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(key, value, operator_loc, location); end

  # source://prism//lib/prism/node.rb#846
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#851
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#864
  def comment_targets; end

  # source://prism//lib/prism/node.rb#856
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#869
  sig { params(params: T.untyped).returns(Prism::AssocNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#851
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#882
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#892
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#829
  sig { returns(Prism::Node) }
  def key; end

  # source://prism//lib/prism/node.rb#887
  sig { returns(T.nilable(String)) }
  def operator; end

  # source://prism//lib/prism/node.rb#835
  sig { returns(T.nilable(Prism::Location)) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#920
  def type; end

  # source://prism//lib/prism/node.rb#832
  sig { returns(T.nilable(Prism::Node)) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#930
    def type; end
  end
end

# source://prism//lib/prism/node.rb#940
class Prism::AssocSplatNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#947
  sig { params(value: T.nilable(Prism::Node), operator_loc: Prism::Location, location: Prism::Location).void }
  def initialize(value, operator_loc, location); end

  # source://prism//lib/prism/node.rb#954
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#959
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#971
  def comment_targets; end

  # source://prism//lib/prism/node.rb#964
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#976
  sig { params(params: T.untyped).returns(Prism::AssocSplatNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#959
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#988
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#998
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#993
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#944
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#1024
  def type; end

  # source://prism//lib/prism/node.rb#941
  sig { returns(T.nilable(Prism::Node)) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#1034
    def type; end
  end
end

Prism::BACKEND = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/node.rb#1044
class Prism::BackReferenceReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1048
  sig { params(name: Symbol, location: Prism::Location).void }
  def initialize(name, location); end

  # source://prism//lib/prism/node.rb#1054
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1059
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1069
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1064
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1074
  sig { params(params: T.untyped).returns(Prism::BackReferenceReadNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#1059
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1085
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1090
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1045
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#1110
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1120
    def type; end
  end
end

# source://prism//lib/prism/visitor.rb#13
class Prism::BasicVisitor
  # source://prism//lib/prism/visitor.rb#16
  sig { params(node: T.nilable(Prism::Node)).void }
  def visit(node); end

  # source://prism//lib/prism/visitor.rb#21
  sig { params(nodes: T::Array[T.nilable(Prism::Node)]).void }
  def visit_all(nodes); end

  # source://prism//lib/prism/visitor.rb#26
  sig { params(node: Prism::Node).void }
  def visit_child_nodes(node); end
end

# source://prism//lib/prism/node.rb#1132
class Prism::BeginNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1151
  sig do
    params(
      begin_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      rescue_clause: T.nilable(Prism::RescueNode),
      else_clause: T.nilable(Prism::ElseNode),
      ensure_clause: T.nilable(Prism::EnsureNode),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(begin_keyword_loc, statements, rescue_clause, else_clause, ensure_clause, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#1162
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1212
  sig { returns(T.nilable(String)) }
  def begin_keyword; end

  # source://prism//lib/prism/node.rb#1133
  sig { returns(T.nilable(Prism::Location)) }
  def begin_keyword_loc; end

  # source://prism//lib/prism/node.rb#1171
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1186
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1176
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1191
  sig { params(params: T.untyped).returns(Prism::BeginNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#1171
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1207
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1142
  sig { returns(T.nilable(Prism::ElseNode)) }
  def else_clause; end

  # source://prism//lib/prism/node.rb#1217
  sig { returns(T.nilable(String)) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#1148
  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#1145
  sig { returns(T.nilable(Prism::EnsureNode)) }
  def ensure_clause; end

  # source://prism//lib/prism/node.rb#1222
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1139
  sig { returns(T.nilable(Prism::RescueNode)) }
  def rescue_clause; end

  # source://prism//lib/prism/node.rb#1166
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#1136
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#1267
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1277
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1287
class Prism::BlockArgumentNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1294
  sig { params(expression: T.nilable(Prism::Node), operator_loc: Prism::Location, location: Prism::Location).void }
  def initialize(expression, operator_loc, location); end

  # source://prism//lib/prism/node.rb#1301
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1306
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1318
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1311
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1323
  sig { params(params: T.untyped).returns(Prism::BlockArgumentNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#1306
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1335
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1288
  sig { returns(T.nilable(Prism::Node)) }
  def expression; end

  # source://prism//lib/prism/node.rb#1345
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1340
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#1291
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#1371
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1381
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1391
class Prism::BlockLocalVariableNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1395
  sig { params(name: Symbol, location: Prism::Location).void }
  def initialize(name, location); end

  # source://prism//lib/prism/node.rb#1401
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1406
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1416
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1411
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1421
  sig { params(params: T.untyped).returns(Prism::BlockLocalVariableNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#1406
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1432
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1437
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1392
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#1457
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1467
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1477
class Prism::BlockNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1493
  sig do
    params(
      locals: T::Array[Symbol],
      parameters: T.nilable(Prism::BlockParametersNode),
      body: T.nilable(Prism::Node),
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(locals, parameters, body, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#1503
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1484
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#1508
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1551
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#1490
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#1521
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1513
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1526
  sig { params(params: T.untyped).returns(Prism::BlockNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#1508
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1541
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1556
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1478
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#1546
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#1487
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#1481
  sig { returns(T.nilable(Prism::BlockParametersNode)) }
  def parameters; end

  # source://prism//lib/prism/node.rb#1590
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1600
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1611
class Prism::BlockParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1621
  sig do
    params(
      name: T.nilable(Symbol),
      name_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, location); end

  # source://prism//lib/prism/node.rb#1629
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1634
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1644
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1639
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1649
  sig { params(params: T.untyped).returns(Prism::BlockParameterNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#1634
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1662
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1672
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1612
  sig { returns(T.nilable(Symbol)) }
  def name; end

  # source://prism//lib/prism/node.rb#1615
  sig { returns(T.nilable(Prism::Location)) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#1667
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#1618
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#1698
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1708
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1722
class Prism::BlockParametersNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1735
  sig do
    params(
      parameters: T.nilable(Prism::ParametersNode),
      locals: T::Array[Prism::Node],
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(parameters, locals, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#1744
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1749
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1791
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#1732
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#1762
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1754
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1767
  sig { params(params: T.untyped).returns(Prism::BlockParametersNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#1749
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1781
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1796
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1726
  sig { returns(T::Array[Prism::Node]) }
  def locals; end

  # source://prism//lib/prism/node.rb#1786
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#1729
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#1723
  sig { returns(T.nilable(Prism::ParametersNode)) }
  def parameters; end

  # source://prism//lib/prism/node.rb#1824
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1834
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1844
class Prism::BreakNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1851
  sig do
    params(
      arguments: T.nilable(Prism::ArgumentsNode),
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(arguments, keyword_loc, location); end

  # source://prism//lib/prism/node.rb#1858
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1845
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#1863
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1875
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1868
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1880
  sig { params(params: T.untyped).returns(Prism::BreakNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#1863
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1892
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1902
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1897
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#1848
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#1928
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1938
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1948
class Prism::CallAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1973
  sig do
    params(
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      message_loc: T.nilable(Prism::Location),
      flags: Integer,
      read_name: Symbol,
      write_name: Symbol,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(receiver, call_operator_loc, message_loc, flags, read_name, write_name, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#1986
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2032
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#1952
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#1991
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2004
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1996
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2009
  sig { params(params: T.untyped).returns(Prism::CallAndWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#1991
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2027
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#2057
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2037
  sig { returns(T.nilable(String)) }
  def message; end

  # source://prism//lib/prism/node.rb#1955
  sig { returns(T.nilable(Prism::Location)) }
  def message_loc; end

  # source://prism//lib/prism/node.rb#2052
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#1967
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#1961
  sig { returns(Symbol) }
  def read_name; end

  # source://prism//lib/prism/node.rb#1949
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#2042
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#2091
  def type; end

  # source://prism//lib/prism/node.rb#1970
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#2047
  sig { returns(T::Boolean) }
  def variable_call?; end

  # source://prism//lib/prism/node.rb#1964
  sig { returns(Symbol) }
  def write_name; end

  private

  # source://prism//lib/prism/node.rb#1958
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#2101
    def type; end
  end
end

# source://prism//lib/prism/node.rb#2126
class Prism::CallNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2154
  sig do
    params(
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      message_loc: T.nilable(Prism::Location),
      opening_loc: T.nilable(Prism::Location),
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: T.nilable(Prism::Location),
      block: T.nilable(Prism::Node),
      flags: Integer,
      name: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(receiver, call_operator_loc, message_loc, opening_loc, arguments, closing_loc, block, flags, name, location); end

  # source://prism//lib/prism/node.rb#2168
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2139
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#2145
  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  # source://prism//lib/prism/node.rb#2216
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#2130
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#2173
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2231
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#2142
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#2187
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2178
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2192
  sig { params(params: T.untyped).returns(Prism::CallNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#2173
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2211
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#2246
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2221
  sig { returns(T.nilable(String)) }
  def message; end

  # source://prism//lib/prism/node.rb#2133
  sig { returns(T.nilable(Prism::Location)) }
  def message_loc; end

  # source://prism//lib/prism/node.rb#2151
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#2226
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#2136
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#2127
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#2236
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#2290
  def type; end

  # source://prism//lib/prism/node.rb#2241
  sig { returns(T::Boolean) }
  def variable_call?; end

  private

  # source://prism//lib/prism/node.rb#2148
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#2300
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16542
# Flags for call nodes.
module Prism::CallNodeFlags; end

# source://prism//lib/prism/node.rb#16544
Prism::CallNodeFlags::SAFE_NAVIGATION = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#16547
Prism::CallNodeFlags::VARIABLE_CALL = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#2310
class Prism::CallOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2338
  sig do
    params(
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      message_loc: T.nilable(Prism::Location),
      flags: Integer,
      read_name: Symbol,
      write_name: Symbol,
      operator: Symbol,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(receiver, call_operator_loc, message_loc, flags, read_name, write_name, operator, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#2352
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2399
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#2314
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#2357
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2370
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2362
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2375
  sig { params(params: T.untyped).returns(Prism::CallOperatorWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#2357
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2394
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#2419
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2404
  sig { returns(T.nilable(String)) }
  def message; end

  # source://prism//lib/prism/node.rb#2317
  sig { returns(T.nilable(Prism::Location)) }
  def message_loc; end

  # source://prism//lib/prism/node.rb#2329
  sig { returns(Symbol) }
  def operator; end

  # source://prism//lib/prism/node.rb#2332
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#2323
  sig { returns(Symbol) }
  def read_name; end

  # source://prism//lib/prism/node.rb#2311
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#2409
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#2454
  def type; end

  # source://prism//lib/prism/node.rb#2335
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#2414
  sig { returns(T::Boolean) }
  def variable_call?; end

  # source://prism//lib/prism/node.rb#2326
  sig { returns(Symbol) }
  def write_name; end

  private

  # source://prism//lib/prism/node.rb#2320
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#2464
    def type; end
  end
end

# source://prism//lib/prism/node.rb#2474
class Prism::CallOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2499
  sig do
    params(
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      message_loc: T.nilable(Prism::Location),
      flags: Integer,
      read_name: Symbol,
      write_name: Symbol,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(receiver, call_operator_loc, message_loc, flags, read_name, write_name, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#2512
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2558
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#2478
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#2517
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2530
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2522
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2535
  sig { params(params: T.untyped).returns(Prism::CallOrWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#2517
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2553
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#2583
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2563
  sig { returns(T.nilable(String)) }
  def message; end

  # source://prism//lib/prism/node.rb#2481
  sig { returns(T.nilable(Prism::Location)) }
  def message_loc; end

  # source://prism//lib/prism/node.rb#2578
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#2493
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#2487
  sig { returns(Symbol) }
  def read_name; end

  # source://prism//lib/prism/node.rb#2475
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#2568
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#2617
  def type; end

  # source://prism//lib/prism/node.rb#2496
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#2573
  sig { returns(T::Boolean) }
  def variable_call?; end

  # source://prism//lib/prism/node.rb#2490
  sig { returns(Symbol) }
  def write_name; end

  private

  # source://prism//lib/prism/node.rb#2484
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#2627
    def type; end
  end
end

# source://prism//lib/prism/node.rb#2637
class Prism::CapturePatternNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2647
  sig do
    params(
      value: Prism::Node,
      target: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(value, target, operator_loc, location); end

  # source://prism//lib/prism/node.rb#2655
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2660
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2670
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2665
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2675
  sig { params(params: T.untyped).returns(Prism::CapturePatternNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#2660
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2688
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#2698
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2693
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#2644
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#2641
  sig { returns(Prism::Node) }
  def target; end

  # source://prism//lib/prism/node.rb#2722
  def type; end

  # source://prism//lib/prism/node.rb#2638
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#2732
    def type; end
  end
end

# source://prism//lib/prism/node.rb#2744
class Prism::CaseNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2760
  sig do
    params(
      predicate: T.nilable(Prism::Node),
      conditions: T::Array[Prism::Node],
      consequent: T.nilable(Prism::ElseNode),
      case_keyword_loc: Prism::Location,
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(predicate, conditions, consequent, case_keyword_loc, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#2770
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2814
  sig { returns(String) }
  def case_keyword; end

  # source://prism//lib/prism/node.rb#2754
  sig { returns(Prism::Location) }
  def case_keyword_loc; end

  # source://prism//lib/prism/node.rb#2775
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2789
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2780
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2748
  sig { returns(T::Array[Prism::Node]) }
  def conditions; end

  # source://prism//lib/prism/node.rb#2751
  sig { returns(T.nilable(Prism::ElseNode)) }
  def consequent; end

  # source://prism//lib/prism/node.rb#2794
  sig { params(params: T.untyped).returns(Prism::CaseNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#2775
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2809
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#2819
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#2757
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#2824
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2745
  sig { returns(T.nilable(Prism::Node)) }
  def predicate; end

  # source://prism//lib/prism/node.rb#2858
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#2868
    def type; end
  end
end

# source://prism//lib/prism/node.rb#2878
class Prism::ClassNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2903
  sig do
    params(
      locals: T::Array[Symbol],
      class_keyword_loc: Prism::Location,
      constant_path: Prism::Node,
      inheritance_operator_loc: T.nilable(Prism::Location),
      superclass: T.nilable(Prism::Node),
      body: T.nilable(Prism::Node),
      end_keyword_loc: Prism::Location,
      name: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(locals, class_keyword_loc, constant_path, inheritance_operator_loc, superclass, body, end_keyword_loc, name, location); end

  # source://prism//lib/prism/node.rb#2916
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2894
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#2921
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2963
  sig { returns(String) }
  def class_keyword; end

  # source://prism//lib/prism/node.rb#2882
  sig { returns(Prism::Location) }
  def class_keyword_loc; end

  # source://prism//lib/prism/node.rb#2935
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2926
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2885
  sig { returns(Prism::Node) }
  def constant_path; end

  # source://prism//lib/prism/node.rb#2940
  sig { params(params: T.untyped).returns(Prism::ClassNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#2921
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2958
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#2973
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#2897
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#2968
  sig { returns(T.nilable(String)) }
  def inheritance_operator; end

  # source://prism//lib/prism/node.rb#2888
  sig { returns(T.nilable(Prism::Location)) }
  def inheritance_operator_loc; end

  # source://prism//lib/prism/node.rb#2978
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2879
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#2900
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#2891
  sig { returns(T.nilable(Prism::Node)) }
  def superclass; end

  # source://prism//lib/prism/node.rb#3016
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#3026
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3036
class Prism::ClassVariableAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3049
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#3058
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3063
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3073
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3068
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3078
  sig { params(params: T.untyped).returns(Prism::ClassVariableAndWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#3063
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3092
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3102
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3037
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#3040
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#3097
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#3043
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#3126
  def type; end

  # source://prism//lib/prism/node.rb#3046
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#3136
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3146
class Prism::ClassVariableOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3162
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      operator: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, value, operator, location); end

  # source://prism//lib/prism/node.rb#3172
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3177
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3187
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3182
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3192
  sig { params(params: T.untyped).returns(Prism::ClassVariableOperatorWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#3177
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3207
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3212
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3147
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#3150
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#3159
  sig { returns(Symbol) }
  def operator; end

  # source://prism//lib/prism/node.rb#3153
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#3237
  def type; end

  # source://prism//lib/prism/node.rb#3156
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#3247
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3257
class Prism::ClassVariableOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3270
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#3279
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3284
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3294
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3289
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3299
  sig { params(params: T.untyped).returns(Prism::ClassVariableOrWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#3284
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3313
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3323
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3258
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#3261
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#3318
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#3264
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#3347
  def type; end

  # source://prism//lib/prism/node.rb#3267
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#3357
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3367
class Prism::ClassVariableReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3371
  sig { params(name: Symbol, location: Prism::Location).void }
  def initialize(name, location); end

  # source://prism//lib/prism/node.rb#3377
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3382
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3392
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3387
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3397
  sig { params(params: T.untyped).returns(Prism::ClassVariableReadNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#3382
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3408
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3413
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3368
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#3433
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#3443
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3453
class Prism::ClassVariableTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3457
  sig { params(name: Symbol, location: Prism::Location).void }
  def initialize(name, location); end

  # source://prism//lib/prism/node.rb#3463
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3468
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3478
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3473
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3483
  sig { params(params: T.untyped).returns(Prism::ClassVariableTargetNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#3468
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3494
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3499
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3454
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#3519
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#3529
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3539
class Prism::ClassVariableWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3552
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, value, operator_loc, location); end

  # source://prism//lib/prism/node.rb#3561
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3566
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3576
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3571
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3581
  sig { params(params: T.untyped).returns(Prism::ClassVariableWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#3566
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3595
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3605
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3540
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#3543
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#3600
  sig { returns(T.nilable(String)) }
  def operator; end

  # source://prism//lib/prism/node.rb#3549
  sig { returns(T.nilable(Prism::Location)) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#3629
  def type; end

  # source://prism//lib/prism/node.rb#3546
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#3639
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#194
class Prism::Comment
  # source://prism//lib/prism/parse_result.rb#199
  def initialize(location); end

  # source://prism//lib/prism/parse_result.rb#204
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#196
  sig { returns(Prism::Location) }
  def location; end

  # source://prism//lib/prism/parse_result.rb#209
  sig { returns(T::Boolean) }
  def trailing?; end
end

# source://prism//lib/prism/compiler.rb#26
class Prism::Compiler
  # source://prism//lib/prism/compiler.rb#28
  def visit(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/compiler.rb#33
  def visit_all(nodes); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_and_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_arguments_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_array_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_assoc_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_begin_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_block_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_break_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_call_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_case_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_child_nodes(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_class_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_def_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_defined_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_else_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_ensure_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_false_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_float_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_for_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_hash_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_if_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_implicit_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_in_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_integer_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_lambda_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_match_required_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_match_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_missing_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_module_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_next_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_nil_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_or_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_parameters_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_program_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_range_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_rational_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_redo_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_rescue_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_retry_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_return_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_self_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_source_file_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_source_line_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_splat_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_statements_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_string_concat_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_string_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_super_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_symbol_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_true_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_undef_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_unless_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_until_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_when_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_while_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_x_string_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_yield_node(node); end
end

# source://prism//lib/prism/node.rb#3649
class Prism::ConstantAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3662
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#3671
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3676
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3686
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3681
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3691
  sig { params(params: T.untyped).returns(Prism::ConstantAndWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#3676
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3705
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3715
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3650
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#3653
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#3710
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#3656
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#3739
  def type; end

  # source://prism//lib/prism/node.rb#3659
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#3749
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3759
class Prism::ConstantOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3775
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      operator: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, value, operator, location); end

  # source://prism//lib/prism/node.rb#3785
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3790
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3800
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3795
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3805
  sig { params(params: T.untyped).returns(Prism::ConstantOperatorWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#3790
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3820
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3825
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3760
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#3763
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#3772
  sig { returns(Symbol) }
  def operator; end

  # source://prism//lib/prism/node.rb#3766
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#3850
  def type; end

  # source://prism//lib/prism/node.rb#3769
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#3860
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3870
class Prism::ConstantOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3883
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#3892
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3897
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3907
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3902
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3912
  sig { params(params: T.untyped).returns(Prism::ConstantOrWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#3897
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3926
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3936
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3871
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#3874
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#3931
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#3877
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#3960
  def type; end

  # source://prism//lib/prism/node.rb#3880
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#3970
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3980
class Prism::ConstantPathAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3990
  sig do
    params(
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(target, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#3998
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4003
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4013
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4008
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4018
  sig { params(params: T.untyped).returns(Prism::ConstantPathAndWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#4003
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4031
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#4041
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4036
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#3984
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#3981
  sig { returns(Prism::ConstantPathNode) }
  def target; end

  # source://prism//lib/prism/node.rb#4065
  def type; end

  # source://prism//lib/prism/node.rb#3987
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4075
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4085
class Prism::ConstantPathNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4095
  sig do
    params(
      parent: T.nilable(Prism::Node),
      child: Prism::Node,
      delimiter_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(parent, child, delimiter_loc, location); end

  # source://prism//lib/prism/node.rb#4103
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4089
  sig { returns(Prism::Node) }
  def child; end

  # source://prism//lib/prism/node.rb#4108
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4121
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4113
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4126
  sig { params(params: T.untyped).returns(Prism::ConstantPathNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#4108
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4139
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#4144
  sig { returns(String) }
  def delimiter; end

  # source://prism//lib/prism/node.rb#4092
  sig { returns(Prism::Location) }
  def delimiter_loc; end

  # source://prism//lib/prism/node_ext.rb#90
  def full_name; end

  # source://prism//lib/prism/node_ext.rb#77
  def full_name_parts; end

  # source://prism//lib/prism/node.rb#4149
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4086
  sig { returns(T.nilable(Prism::Node)) }
  def parent; end

  # source://prism//lib/prism/node.rb#4177
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#4187
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4197
class Prism::ConstantPathOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4210
  sig do
    params(
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node,
      operator: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(target, operator_loc, value, operator, location); end

  # source://prism//lib/prism/node.rb#4219
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4224
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4234
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4229
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4239
  sig { params(params: T.untyped).returns(Prism::ConstantPathOperatorWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#4224
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4253
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#4258
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4207
  sig { returns(Symbol) }
  def operator; end

  # source://prism//lib/prism/node.rb#4201
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4198
  sig { returns(Prism::ConstantPathNode) }
  def target; end

  # source://prism//lib/prism/node.rb#4283
  def type; end

  # source://prism//lib/prism/node.rb#4204
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4293
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4303
class Prism::ConstantPathOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4313
  sig do
    params(
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(target, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#4321
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4326
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4336
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4331
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4341
  sig { params(params: T.untyped).returns(Prism::ConstantPathOrWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#4326
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4354
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#4364
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4359
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#4307
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4304
  sig { returns(Prism::ConstantPathNode) }
  def target; end

  # source://prism//lib/prism/node.rb#4388
  def type; end

  # source://prism//lib/prism/node.rb#4310
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4398
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4408
class Prism::ConstantPathTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4418
  sig do
    params(
      parent: T.nilable(Prism::Node),
      child: Prism::Node,
      delimiter_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(parent, child, delimiter_loc, location); end

  # source://prism//lib/prism/node.rb#4426
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4412
  sig { returns(Prism::Node) }
  def child; end

  # source://prism//lib/prism/node.rb#4431
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4444
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4436
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4449
  sig { params(params: T.untyped).returns(Prism::ConstantPathTargetNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#4431
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4462
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#4467
  sig { returns(String) }
  def delimiter; end

  # source://prism//lib/prism/node.rb#4415
  sig { returns(Prism::Location) }
  def delimiter_loc; end

  # source://prism//lib/prism/node_ext.rb#102
  def full_name; end

  # source://prism//lib/prism/node_ext.rb#97
  def full_name_parts; end

  # source://prism//lib/prism/node.rb#4472
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4409
  sig { returns(T.nilable(Prism::Node)) }
  def parent; end

  # source://prism//lib/prism/node.rb#4500
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#4510
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4526
class Prism::ConstantPathWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4536
  sig do
    params(
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(target, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#4544
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4549
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4559
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4554
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4564
  sig { params(params: T.untyped).returns(Prism::ConstantPathWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#4549
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4577
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#4587
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4582
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#4530
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4527
  sig { returns(Prism::ConstantPathNode) }
  def target; end

  # source://prism//lib/prism/node.rb#4611
  def type; end

  # source://prism//lib/prism/node.rb#4533
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4621
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4631
class Prism::ConstantReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4635
  sig { params(name: Symbol, location: Prism::Location).void }
  def initialize(name, location); end

  # source://prism//lib/prism/node.rb#4641
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4646
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4656
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4651
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4661
  sig { params(params: T.untyped).returns(Prism::ConstantReadNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#4646
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4672
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node_ext.rb#70
  def full_name; end

  # source://prism//lib/prism/node_ext.rb#65
  def full_name_parts; end

  # source://prism//lib/prism/node.rb#4677
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4632
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4697
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#4707
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4717
class Prism::ConstantTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4721
  sig { params(name: Symbol, location: Prism::Location).void }
  def initialize(name, location); end

  # source://prism//lib/prism/node.rb#4727
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4732
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4742
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4737
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4747
  sig { params(params: T.untyped).returns(Prism::ConstantTargetNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#4732
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4758
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#4763
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4718
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4783
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#4793
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4803
class Prism::ConstantWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4816
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, value, operator_loc, location); end

  # source://prism//lib/prism/node.rb#4825
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4830
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4840
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4835
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4845
  sig { params(params: T.untyped).returns(Prism::ConstantWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#4830
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4859
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#4869
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4804
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4807
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#4864
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#4813
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4893
  def type; end

  # source://prism//lib/prism/node.rb#4810
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4903
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#241
class Prism::DATAComment < ::Prism::Comment
  # source://prism//lib/prism/parse_result.rb#242
  def inspect; end
end

# source://prism//lib/prism/dsl.rb#37
module Prism::DSL
  private

  # source://prism//lib/prism/dsl.rb#46
  def AliasGlobalVariableNode(new_name, old_name, keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#51
  def AliasMethodNode(new_name, old_name, keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#56
  def AlternationPatternNode(left, right, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#61
  def AndNode(left, right, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#66
  def ArgumentsNode(arguments, flags, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#71
  def ArrayNode(elements, opening_loc, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#76
  def ArrayPatternNode(constant, requireds, rest, posts, opening_loc, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#81
  def AssocNode(key, value, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#86
  def AssocSplatNode(value, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#91
  def BackReferenceReadNode(name, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#96
  def BeginNode(begin_keyword_loc, statements, rescue_clause, else_clause, ensure_clause, end_keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#101
  def BlockArgumentNode(expression, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#106
  def BlockLocalVariableNode(name, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#111
  def BlockNode(locals, parameters, body, opening_loc, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#116
  def BlockParameterNode(name, name_loc, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#121
  def BlockParametersNode(parameters, locals, opening_loc, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#126
  def BreakNode(arguments, keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#131
  def CallAndWriteNode(receiver, call_operator_loc, message_loc, flags, read_name, write_name, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#136
  def CallNode(receiver, call_operator_loc, message_loc, opening_loc, arguments, closing_loc, block, flags, name, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#141
  def CallOperatorWriteNode(receiver, call_operator_loc, message_loc, flags, read_name, write_name, operator, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#146
  def CallOrWriteNode(receiver, call_operator_loc, message_loc, flags, read_name, write_name, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#151
  def CapturePatternNode(value, target, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#156
  def CaseNode(predicate, conditions, consequent, case_keyword_loc, end_keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#161
  def ClassNode(locals, class_keyword_loc, constant_path, inheritance_operator_loc, superclass, body, end_keyword_loc, name, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#166
  def ClassVariableAndWriteNode(name, name_loc, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#171
  def ClassVariableOperatorWriteNode(name, name_loc, operator_loc, value, operator, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#176
  def ClassVariableOrWriteNode(name, name_loc, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#181
  def ClassVariableReadNode(name, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#186
  def ClassVariableTargetNode(name, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#191
  def ClassVariableWriteNode(name, name_loc, value, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#196
  def ConstantAndWriteNode(name, name_loc, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#201
  def ConstantOperatorWriteNode(name, name_loc, operator_loc, value, operator, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#206
  def ConstantOrWriteNode(name, name_loc, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#211
  def ConstantPathAndWriteNode(target, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#216
  def ConstantPathNode(parent, child, delimiter_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#221
  def ConstantPathOperatorWriteNode(target, operator_loc, value, operator, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#226
  def ConstantPathOrWriteNode(target, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#231
  def ConstantPathTargetNode(parent, child, delimiter_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#236
  def ConstantPathWriteNode(target, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#241
  def ConstantReadNode(name, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#246
  def ConstantTargetNode(name, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#251
  def ConstantWriteNode(name, name_loc, value, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#256
  def DefNode(name, name_loc, receiver, parameters, body, locals, def_keyword_loc, operator_loc, lparen_loc, rparen_loc, equal_loc, end_keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#261
  def DefinedNode(lparen_loc, value, rparen_loc, keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#266
  def ElseNode(else_keyword_loc, statements, end_keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#271
  def EmbeddedStatementsNode(opening_loc, statements, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#276
  def EmbeddedVariableNode(operator_loc, variable, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#281
  def EnsureNode(ensure_keyword_loc, statements, end_keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#286
  def FalseNode(location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#291
  def FindPatternNode(constant, left, requireds, right, opening_loc, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#296
  def FlipFlopNode(left, right, operator_loc, flags, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#301
  def FloatNode(location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#306
  def ForNode(index, collection, statements, for_keyword_loc, in_keyword_loc, do_keyword_loc, end_keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#311
  def ForwardingArgumentsNode(location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#316
  def ForwardingParameterNode(location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#321
  def ForwardingSuperNode(block, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#326
  def GlobalVariableAndWriteNode(name, name_loc, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#331
  def GlobalVariableOperatorWriteNode(name, name_loc, operator_loc, value, operator, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#336
  def GlobalVariableOrWriteNode(name, name_loc, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#341
  def GlobalVariableReadNode(name, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#346
  def GlobalVariableTargetNode(name, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#351
  def GlobalVariableWriteNode(name, name_loc, value, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#356
  def HashNode(opening_loc, elements, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#361
  def HashPatternNode(constant, elements, rest, opening_loc, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#366
  def IfNode(if_keyword_loc, predicate, statements, consequent, end_keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#371
  def ImaginaryNode(numeric, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#376
  def ImplicitNode(value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#381
  def InNode(pattern, statements, in_loc, then_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#386
  def IndexAndWriteNode(receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, flags, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#391
  def IndexOperatorWriteNode(receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, flags, operator, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#396
  def IndexOrWriteNode(receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, flags, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#401
  def InstanceVariableAndWriteNode(name, name_loc, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#406
  def InstanceVariableOperatorWriteNode(name, name_loc, operator_loc, value, operator, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#411
  def InstanceVariableOrWriteNode(name, name_loc, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#416
  def InstanceVariableReadNode(name, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#421
  def InstanceVariableTargetNode(name, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#426
  def InstanceVariableWriteNode(name, name_loc, value, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#431
  def IntegerNode(flags, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#436
  def InterpolatedMatchLastLineNode(opening_loc, parts, closing_loc, flags, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#441
  def InterpolatedRegularExpressionNode(opening_loc, parts, closing_loc, flags, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#446
  def InterpolatedStringNode(opening_loc, parts, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#451
  def InterpolatedSymbolNode(opening_loc, parts, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#456
  def InterpolatedXStringNode(opening_loc, parts, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#461
  def KeywordHashNode(elements, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#466
  def KeywordRestParameterNode(name, name_loc, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#471
  def LambdaNode(locals, operator_loc, opening_loc, closing_loc, parameters, body, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#476
  def LocalVariableAndWriteNode(name_loc, operator_loc, value, name, depth, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#481
  def LocalVariableOperatorWriteNode(name_loc, operator_loc, value, name, operator, depth, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#486
  def LocalVariableOrWriteNode(name_loc, operator_loc, value, name, depth, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#491
  def LocalVariableReadNode(name, depth, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#496
  def LocalVariableTargetNode(name, depth, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#501
  def LocalVariableWriteNode(name, depth, name_loc, value, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#41
  def Location(source = T.unsafe(nil), start_offset = T.unsafe(nil), length = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#506
  def MatchLastLineNode(opening_loc, content_loc, closing_loc, unescaped, flags, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#511
  def MatchPredicateNode(value, pattern, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#516
  def MatchRequiredNode(value, pattern, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#521
  def MatchWriteNode(call, locals, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#526
  def MissingNode(location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#531
  def ModuleNode(locals, module_keyword_loc, constant_path, body, end_keyword_loc, name, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#536
  def MultiTargetNode(lefts, rest, rights, lparen_loc, rparen_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#541
  def MultiWriteNode(lefts, rest, rights, lparen_loc, rparen_loc, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#546
  def NextNode(arguments, keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#551
  def NilNode(location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#556
  def NoKeywordsParameterNode(operator_loc, keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#561
  def NumberedReferenceReadNode(number, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#566
  def OptionalKeywordParameterNode(name, name_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#571
  def OptionalParameterNode(name, name_loc, operator_loc, value, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#576
  def OrNode(left, right, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#581
  def ParametersNode(requireds, optionals, rest, posts, keywords, keyword_rest, block, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#586
  def ParenthesesNode(body, opening_loc, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#591
  def PinnedExpressionNode(expression, operator_loc, lparen_loc, rparen_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#596
  def PinnedVariableNode(variable, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#601
  def PostExecutionNode(statements, keyword_loc, opening_loc, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#606
  def PreExecutionNode(statements, keyword_loc, opening_loc, closing_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#611
  def ProgramNode(locals, statements, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#616
  def RangeNode(left, right, operator_loc, flags, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#621
  def RationalNode(numeric, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#626
  def RedoNode(location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#631
  def RegularExpressionNode(opening_loc, content_loc, closing_loc, unescaped, flags, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#636
  def RequiredKeywordParameterNode(name, name_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#641
  def RequiredParameterNode(name, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#646
  def RescueModifierNode(expression, keyword_loc, rescue_expression, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#651
  def RescueNode(keyword_loc, exceptions, operator_loc, reference, statements, consequent, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#656
  def RestParameterNode(name, name_loc, operator_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#661
  def RetryNode(location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#666
  def ReturnNode(keyword_loc, arguments, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#671
  def SelfNode(location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#676
  def SingletonClassNode(locals, class_keyword_loc, operator_loc, expression, body, end_keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#681
  def SourceEncodingNode(location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#686
  def SourceFileNode(filepath, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#691
  def SourceLineNode(location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#696
  def SplatNode(operator_loc, expression, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#701
  def StatementsNode(body, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#706
  def StringConcatNode(left, right, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#711
  def StringNode(flags, opening_loc, content_loc, closing_loc, unescaped, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#716
  def SuperNode(keyword_loc, lparen_loc, arguments, rparen_loc, block, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#721
  def SymbolNode(opening_loc, value_loc, closing_loc, unescaped, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#726
  def TrueNode(location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#731
  def UndefNode(names, keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#736
  def UnlessNode(keyword_loc, predicate, statements, consequent, end_keyword_loc, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#741
  def UntilNode(keyword_loc, closing_loc, predicate, statements, flags, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#746
  def WhenNode(keyword_loc, conditions, statements, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#751
  def WhileNode(keyword_loc, closing_loc, predicate, statements, flags, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#756
  def XStringNode(opening_loc, content_loc, closing_loc, unescaped, location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#761
  def YieldNode(keyword_loc, lparen_loc, arguments, rparen_loc, location = T.unsafe(nil)); end
end

# source://prism//lib/prism/debug.rb#6
module Prism::Debug
  class << self
    # source://prism//lib/prism/debug.rb#54
    def cruby_locals(source); end

    def inspect_node(_arg0); end
    def memsize(_arg0); end
    def named_captures(_arg0); end

    # source://prism//lib/prism/debug.rb#187
    def newlines(source); end

    # source://prism//lib/prism/debug.rb#98
    def prism_locals(source); end

    def profile_file(_arg0); end
  end
end

# source://prism//lib/prism/debug.rb#90
Prism::Debug::AnonymousLocal = T.let(T.unsafe(nil), Object)

# source://prism//lib/prism/debug.rb#9
class Prism::Debug::ISeq
  # source://prism//lib/prism/debug.rb#12
  def initialize(parts); end

  # source://prism//lib/prism/debug.rb#28
  def each_child; end

  # source://prism//lib/prism/debug.rb#24
  def instructions; end

  # source://prism//lib/prism/debug.rb#20
  def local_table; end

  # source://prism//lib/prism/debug.rb#10
  def parts; end

  # source://prism//lib/prism/debug.rb#16
  def type; end
end

# source://prism//lib/prism/node.rb#4914
class Prism::DefNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4951
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      receiver: T.nilable(Prism::Node),
      parameters: T.nilable(Prism::ParametersNode),
      body: T.nilable(Prism::Node),
      locals: T::Array[Symbol],
      def_keyword_loc: Prism::Location,
      operator_loc: T.nilable(Prism::Location),
      lparen_loc: T.nilable(Prism::Location),
      rparen_loc: T.nilable(Prism::Location),
      equal_loc: T.nilable(Prism::Location),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, receiver, parameters, body, locals, def_keyword_loc, operator_loc, lparen_loc, rparen_loc, equal_loc, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#4968
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4927
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#4973
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4987
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4978
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4992
  sig { params(params: T.untyped).returns(Prism::DefNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#4973
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5014
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#5019
  sig { returns(String) }
  def def_keyword; end

  # source://prism//lib/prism/node.rb#4933
  sig { returns(Prism::Location) }
  def def_keyword_loc; end

  # source://prism//lib/prism/node.rb#5044
  sig { returns(T.nilable(String)) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#4948
  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#5039
  sig { returns(T.nilable(String)) }
  def equal; end

  # source://prism//lib/prism/node.rb#4945
  sig { returns(T.nilable(Prism::Location)) }
  def equal_loc; end

  # source://prism//lib/prism/node.rb#5049
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4930
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#5029
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#4939
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#4915
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4918
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#5024
  sig { returns(T.nilable(String)) }
  def operator; end

  # source://prism//lib/prism/node.rb#4936
  sig { returns(T.nilable(Prism::Location)) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4924
  sig { returns(T.nilable(Prism::ParametersNode)) }
  def parameters; end

  # source://prism//lib/prism/node.rb#4921
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#5034
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#4942
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#5095
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#5105
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5115
class Prism::DefinedNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5128
  sig do
    params(
      lparen_loc: T.nilable(Prism::Location),
      value: Prism::Node,
      rparen_loc: T.nilable(Prism::Location),
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(lparen_loc, value, rparen_loc, keyword_loc, location); end

  # source://prism//lib/prism/node.rb#5137
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5142
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5152
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5147
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5157
  sig { params(params: T.untyped).returns(Prism::DefinedNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#5142
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5171
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#5191
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5186
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#5125
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#5176
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#5116
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#5181
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#5122
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#5215
  def type; end

  # source://prism//lib/prism/node.rb#5119
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#5225
    def type; end
  end
end

# source://prism//lib/prism/desugar_compiler.rb#11
class Prism::DesugarCompiler < ::Prism::MutationCompiler
  # source://prism//lib/prism/desugar_compiler.rb#12
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#30
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#21
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#39
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#57
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#48
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#66
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#84
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#75
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#93
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#111
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#102
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#120
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#138
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#129
  def visit_local_variable_or_write_node(node); end

  private

  # source://prism//lib/prism/desugar_compiler.rb#145
  def desugar_and_write_node(node, read_class, write_class, *arguments); end

  # source://prism//lib/prism/desugar_compiler.rb#155
  def desugar_operator_write_node(node, read_class, write_class, *arguments); end

  # source://prism//lib/prism/desugar_compiler.rb#187
  def desugar_or_write_defined_node(node, read_class, write_class, *arguments); end

  # source://prism//lib/prism/desugar_compiler.rb#177
  def desugar_or_write_node(node, read_class, write_class, *arguments); end
end

# source://prism//lib/prism/dispatcher.rb#41
class Prism::Dispatcher < ::Prism::Visitor
  # source://prism//lib/prism/dispatcher.rb#45
  def initialize; end

  # source://prism//lib/prism/visitor.rb#16
  def dispatch(node); end

  # source://prism//lib/prism/dispatcher.rb#64
  def dispatch_once(node); end

  # source://prism//lib/prism/dispatcher.rb#42
  def listeners; end

  # source://prism//lib/prism/dispatcher.rb#52
  def register(listener, *events); end

  # source://prism//lib/prism/dispatcher.rb#70
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#78
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/dispatcher.rb#86
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#94
  def visit_and_node(node); end

  # source://prism//lib/prism/dispatcher.rb#102
  def visit_arguments_node(node); end

  # source://prism//lib/prism/dispatcher.rb#110
  def visit_array_node(node); end

  # source://prism//lib/prism/dispatcher.rb#118
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#126
  def visit_assoc_node(node); end

  # source://prism//lib/prism/dispatcher.rb#134
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/dispatcher.rb#142
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#150
  def visit_begin_node(node); end

  # source://prism//lib/prism/dispatcher.rb#158
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/dispatcher.rb#166
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#174
  def visit_block_node(node); end

  # source://prism//lib/prism/dispatcher.rb#182
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#190
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#198
  def visit_break_node(node); end

  # source://prism//lib/prism/dispatcher.rb#206
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#214
  def visit_call_node(node); end

  # source://prism//lib/prism/dispatcher.rb#222
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#230
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#238
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#246
  def visit_case_node(node); end

  # source://prism//lib/prism/dispatcher.rb#254
  def visit_class_node(node); end

  # source://prism//lib/prism/dispatcher.rb#262
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#270
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#278
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#286
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#294
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#302
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#310
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#318
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#326
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#334
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#342
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/dispatcher.rb#350
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#358
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#366
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#374
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#382
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#390
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#398
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#406
  def visit_def_node(node); end

  # source://prism//lib/prism/dispatcher.rb#414
  def visit_defined_node(node); end

  # source://prism//lib/prism/dispatcher.rb#422
  def visit_else_node(node); end

  # source://prism//lib/prism/dispatcher.rb#430
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/dispatcher.rb#438
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#446
  def visit_ensure_node(node); end

  # source://prism//lib/prism/dispatcher.rb#454
  def visit_false_node(node); end

  # source://prism//lib/prism/dispatcher.rb#462
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#470
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/dispatcher.rb#478
  def visit_float_node(node); end

  # source://prism//lib/prism/dispatcher.rb#486
  def visit_for_node(node); end

  # source://prism//lib/prism/dispatcher.rb#494
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/dispatcher.rb#502
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#510
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/dispatcher.rb#518
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#526
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#534
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#542
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#550
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#558
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#566
  def visit_hash_node(node); end

  # source://prism//lib/prism/dispatcher.rb#574
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#582
  def visit_if_node(node); end

  # source://prism//lib/prism/dispatcher.rb#590
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/dispatcher.rb#598
  def visit_implicit_node(node); end

  # source://prism//lib/prism/dispatcher.rb#606
  def visit_in_node(node); end

  # source://prism//lib/prism/dispatcher.rb#614
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#622
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#630
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#638
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#646
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#654
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#662
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#670
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#678
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#686
  def visit_integer_node(node); end

  # source://prism//lib/prism/dispatcher.rb#694
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#702
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#710
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#718
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/dispatcher.rb#726
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#734
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/dispatcher.rb#742
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#750
  def visit_lambda_node(node); end

  # source://prism//lib/prism/dispatcher.rb#758
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#766
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#774
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#782
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#790
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#798
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#806
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#814
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/dispatcher.rb#822
  def visit_match_required_node(node); end

  # source://prism//lib/prism/dispatcher.rb#830
  def visit_match_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#838
  def visit_missing_node(node); end

  # source://prism//lib/prism/dispatcher.rb#846
  def visit_module_node(node); end

  # source://prism//lib/prism/dispatcher.rb#854
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#862
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#870
  def visit_next_node(node); end

  # source://prism//lib/prism/dispatcher.rb#878
  def visit_nil_node(node); end

  # source://prism//lib/prism/dispatcher.rb#886
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#894
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#902
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#910
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#918
  def visit_or_node(node); end

  # source://prism//lib/prism/dispatcher.rb#926
  def visit_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#934
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/dispatcher.rb#942
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#950
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#958
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/dispatcher.rb#966
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/dispatcher.rb#974
  def visit_program_node(node); end

  # source://prism//lib/prism/dispatcher.rb#982
  def visit_range_node(node); end

  # source://prism//lib/prism/dispatcher.rb#990
  def visit_rational_node(node); end

  # source://prism//lib/prism/dispatcher.rb#998
  def visit_redo_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1006
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1014
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1022
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1030
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1038
  def visit_rescue_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1046
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1054
  def visit_retry_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1062
  def visit_return_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1070
  def visit_self_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1078
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1086
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1094
  def visit_source_file_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1102
  def visit_source_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1110
  def visit_splat_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1118
  def visit_statements_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1126
  def visit_string_concat_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1134
  def visit_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1142
  def visit_super_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1150
  def visit_symbol_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1158
  def visit_true_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1166
  def visit_undef_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1174
  def visit_unless_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1182
  def visit_until_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1190
  def visit_when_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1198
  def visit_while_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1206
  def visit_x_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1214
  def visit_yield_node(node); end
end

# source://prism//lib/prism/dispatcher.rb#1220
class Prism::Dispatcher::DispatchOnce < ::Prism::Visitor
  # source://prism//lib/prism/dispatcher.rb#1223
  def initialize(listeners); end

  # source://prism//lib/prism/dispatcher.rb#1221
  def listeners; end

  # source://prism//lib/prism/dispatcher.rb#1228
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1234
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1240
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1246
  def visit_and_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1252
  def visit_arguments_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1258
  def visit_array_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1264
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1270
  def visit_assoc_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1276
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1282
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1288
  def visit_begin_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1294
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1300
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1306
  def visit_block_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1312
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1318
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1324
  def visit_break_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1330
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1336
  def visit_call_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1342
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1348
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1354
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1360
  def visit_case_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1366
  def visit_class_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1372
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1378
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1384
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1390
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1396
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1402
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1408
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1414
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1420
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1426
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1432
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1438
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1444
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1450
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1456
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1462
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1468
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1474
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1480
  def visit_def_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1486
  def visit_defined_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1492
  def visit_else_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1498
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1504
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1510
  def visit_ensure_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1516
  def visit_false_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1522
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1528
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1534
  def visit_float_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1540
  def visit_for_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1546
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1552
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1558
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1564
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1570
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1576
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1582
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1588
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1594
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1600
  def visit_hash_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1606
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1612
  def visit_if_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1618
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1624
  def visit_implicit_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1630
  def visit_in_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1636
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1642
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1648
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1654
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1660
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1666
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1672
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1678
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1684
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1690
  def visit_integer_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1696
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1702
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1708
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1714
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1720
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1726
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1732
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1738
  def visit_lambda_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1744
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1750
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1756
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1762
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1768
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1774
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1780
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1786
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1792
  def visit_match_required_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1798
  def visit_match_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1804
  def visit_missing_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1810
  def visit_module_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1816
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1822
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1828
  def visit_next_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1834
  def visit_nil_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1840
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1846
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1852
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1858
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1864
  def visit_or_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1870
  def visit_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1876
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1882
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1888
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1894
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1900
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1906
  def visit_program_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1912
  def visit_range_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1918
  def visit_rational_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1924
  def visit_redo_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1930
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1936
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1942
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1948
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1954
  def visit_rescue_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1960
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1966
  def visit_retry_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1972
  def visit_return_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1978
  def visit_self_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1984
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1990
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1996
  def visit_source_file_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2002
  def visit_source_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2008
  def visit_splat_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2014
  def visit_statements_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2020
  def visit_string_concat_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2026
  def visit_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2032
  def visit_super_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2038
  def visit_symbol_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2044
  def visit_true_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2050
  def visit_undef_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2056
  def visit_unless_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2062
  def visit_until_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2068
  def visit_when_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2074
  def visit_while_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2080
  def visit_x_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2086
  def visit_yield_node(node); end
end

# source://prism//lib/prism/node.rb#5235
class Prism::ElseNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5245
  sig do
    params(
      else_keyword_loc: Prism::Location,
      statements: T.nilable(Prism::StatementsNode),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(else_keyword_loc, statements, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#5253
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5258
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5270
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5263
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5275
  sig { params(params: T.untyped).returns(Prism::ElseNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#5258
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5288
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#5293
  sig { returns(String) }
  def else_keyword; end

  # source://prism//lib/prism/node.rb#5236
  sig { returns(Prism::Location) }
  def else_keyword_loc; end

  # source://prism//lib/prism/node.rb#5298
  sig { returns(T.nilable(String)) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#5242
  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#5303
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5239
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#5330
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#5340
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#232
class Prism::EmbDocComment < ::Prism::Comment
  # source://prism//lib/prism/parse_result.rb#233
  def inspect; end
end

# source://prism//lib/prism/node.rb#5350
class Prism::EmbeddedStatementsNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5360
  sig do
    params(
      opening_loc: Prism::Location,
      statements: T.nilable(Prism::StatementsNode),
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(opening_loc, statements, closing_loc, location); end

  # source://prism//lib/prism/node.rb#5368
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5373
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5413
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#5357
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#5385
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5378
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5390
  sig { params(params: T.untyped).returns(Prism::EmbeddedStatementsNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#5373
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5403
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#5418
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5408
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#5351
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#5354
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#5445
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#5455
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5465
class Prism::EmbeddedVariableNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5472
  sig { params(operator_loc: Prism::Location, variable: Prism::Node, location: Prism::Location).void }
  def initialize(operator_loc, variable, location); end

  # source://prism//lib/prism/node.rb#5479
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5484
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5494
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5489
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5499
  sig { params(params: T.untyped).returns(Prism::EmbeddedVariableNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#5484
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5511
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#5521
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5516
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#5466
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#5543
  def type; end

  # source://prism//lib/prism/node.rb#5469
  sig { returns(Prism::Node) }
  def variable; end

  class << self
    # source://prism//lib/prism/node.rb#5553
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5567
class Prism::EnsureNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5577
  sig do
    params(
      ensure_keyword_loc: Prism::Location,
      statements: T.nilable(Prism::StatementsNode),
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(ensure_keyword_loc, statements, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#5585
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5590
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5602
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5595
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5607
  sig { params(params: T.untyped).returns(Prism::EnsureNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#5590
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5620
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#5630
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#5574
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#5625
  sig { returns(String) }
  def ensure_keyword; end

  # source://prism//lib/prism/node.rb#5568
  sig { returns(Prism::Location) }
  def ensure_keyword_loc; end

  # source://prism//lib/prism/node.rb#5635
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5571
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#5662
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#5672
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5682
class Prism::FalseNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5683
  sig { params(location: Prism::Location).void }
  def initialize(location); end

  # source://prism//lib/prism/node.rb#5688
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5693
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5703
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5698
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5708
  sig { params(params: T.untyped).returns(Prism::FalseNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#5693
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5718
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#5723
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5742
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#5752
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5768
class Prism::FindPatternNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5787
  sig do
    params(
      constant: T.nilable(Prism::Node),
      left: Prism::Node,
      requireds: T::Array[Prism::Node],
      right: Prism::Node,
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(constant, left, requireds, right, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#5798
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5803
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5849
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#5784
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#5818
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5808
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5769
  sig { returns(T.nilable(Prism::Node)) }
  def constant; end

  # source://prism//lib/prism/node.rb#5823
  sig { params(params: T.untyped).returns(Prism::FindPatternNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#5803
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5839
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#5854
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5772
  sig { returns(Prism::Node) }
  def left; end

  # source://prism//lib/prism/node.rb#5844
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#5781
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#5775
  sig { returns(T::Array[Prism::Node]) }
  def requireds; end

  # source://prism//lib/prism/node.rb#5778
  sig { returns(Prism::Node) }
  def right; end

  # source://prism//lib/prism/node.rb#5886
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#5896
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5906
class Prism::FlipFlopNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5919
  sig do
    params(
      left: T.nilable(Prism::Node),
      right: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      flags: Integer,
      location: Prism::Location
    ).void
  end
  def initialize(left, right, operator_loc, flags, location); end

  # source://prism//lib/prism/node.rb#5928
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5933
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5946
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5938
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5951
  sig { params(params: T.untyped).returns(Prism::FlipFlopNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#5933
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5965
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#5975
  sig { returns(T::Boolean) }
  def exclude_end?; end

  # source://prism//lib/prism/node.rb#5980
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5907
  sig { returns(T.nilable(Prism::Node)) }
  def left; end

  # source://prism//lib/prism/node.rb#5970
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#5913
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#5910
  sig { returns(T.nilable(Prism::Node)) }
  def right; end

  # source://prism//lib/prism/node.rb#6014
  def type; end

  private

  # source://prism//lib/prism/node.rb#5916
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#6024
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6034
class Prism::FloatNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6035
  sig { params(location: Prism::Location).void }
  def initialize(location); end

  # source://prism//lib/prism/node.rb#6040
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6045
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6055
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6050
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6060
  sig { params(params: T.untyped).returns(Prism::FloatNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#6045
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6070
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6075
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6094
  def type; end

  # source://prism//lib/prism/node_ext.rb#21
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#6104
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6114
class Prism::ForNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6136
  sig do
    params(
      index: Prism::Node,
      collection: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      for_keyword_loc: Prism::Location,
      in_keyword_loc: Prism::Location,
      do_keyword_loc: T.nilable(Prism::Location),
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(index, collection, statements, for_keyword_loc, in_keyword_loc, do_keyword_loc, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#6148
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6153
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6118
  sig { returns(Prism::Node) }
  def collection; end

  # source://prism//lib/prism/node.rb#6167
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6158
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6172
  sig { params(params: T.untyped).returns(Prism::ForNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#6153
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6189
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6204
  sig { returns(T.nilable(String)) }
  def do_keyword; end

  # source://prism//lib/prism/node.rb#6130
  sig { returns(T.nilable(Prism::Location)) }
  def do_keyword_loc; end

  # source://prism//lib/prism/node.rb#6209
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#6133
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#6194
  sig { returns(String) }
  def for_keyword; end

  # source://prism//lib/prism/node.rb#6124
  sig { returns(Prism::Location) }
  def for_keyword_loc; end

  # source://prism//lib/prism/node.rb#6199
  sig { returns(String) }
  def in_keyword; end

  # source://prism//lib/prism/node.rb#6127
  sig { returns(Prism::Location) }
  def in_keyword_loc; end

  # source://prism//lib/prism/node.rb#6115
  sig { returns(Prism::Node) }
  def index; end

  # source://prism//lib/prism/node.rb#6214
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6121
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#6247
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#6257
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6269
class Prism::ForwardingArgumentsNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6270
  sig { params(location: Prism::Location).void }
  def initialize(location); end

  # source://prism//lib/prism/node.rb#6275
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6280
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6290
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6285
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6295
  sig { params(params: T.untyped).returns(Prism::ForwardingArgumentsNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#6280
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6305
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6310
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6329
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#6339
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6350
class Prism::ForwardingParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6351
  sig { params(location: Prism::Location).void }
  def initialize(location); end

  # source://prism//lib/prism/node.rb#6356
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6361
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6371
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6366
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6376
  sig { params(params: T.untyped).returns(Prism::ForwardingParameterNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#6361
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6386
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6391
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6410
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#6420
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6430
class Prism::ForwardingSuperNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6434
  sig { params(block: T.nilable(Prism::BlockNode), location: Prism::Location).void }
  def initialize(block, location); end

  # source://prism//lib/prism/node.rb#6440
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6431
  sig { returns(T.nilable(Prism::BlockNode)) }
  def block; end

  # source://prism//lib/prism/node.rb#6445
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6457
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6450
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6462
  sig { params(params: T.untyped).returns(Prism::ForwardingSuperNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#6445
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6473
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6478
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6503
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#6513
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6523
class Prism::GlobalVariableAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6536
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#6545
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6550
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6560
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6555
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6565
  sig { params(params: T.untyped).returns(Prism::GlobalVariableAndWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#6550
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6579
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6589
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6524
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#6527
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#6584
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#6530
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#6613
  def type; end

  # source://prism//lib/prism/node.rb#6533
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#6623
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6633
class Prism::GlobalVariableOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6649
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      operator: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, value, operator, location); end

  # source://prism//lib/prism/node.rb#6659
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6664
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6674
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6669
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6679
  sig { params(params: T.untyped).returns(Prism::GlobalVariableOperatorWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#6664
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6694
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6699
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6634
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#6637
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#6646
  sig { returns(Symbol) }
  def operator; end

  # source://prism//lib/prism/node.rb#6640
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#6724
  def type; end

  # source://prism//lib/prism/node.rb#6643
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#6734
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6744
class Prism::GlobalVariableOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6757
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#6766
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6771
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6781
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6776
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6786
  sig { params(params: T.untyped).returns(Prism::GlobalVariableOrWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#6771
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6800
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6810
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6745
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#6748
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#6805
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#6751
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#6834
  def type; end

  # source://prism//lib/prism/node.rb#6754
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#6844
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6854
class Prism::GlobalVariableReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6858
  sig { params(name: Symbol, location: Prism::Location).void }
  def initialize(name, location); end

  # source://prism//lib/prism/node.rb#6864
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6869
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6879
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6874
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6884
  sig { params(params: T.untyped).returns(Prism::GlobalVariableReadNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#6869
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6895
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6900
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6855
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#6920
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#6930
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6940
class Prism::GlobalVariableTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6944
  sig { params(name: Symbol, location: Prism::Location).void }
  def initialize(name, location); end

  # source://prism//lib/prism/node.rb#6950
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6955
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6965
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6960
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6970
  sig { params(params: T.untyped).returns(Prism::GlobalVariableTargetNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#6955
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6981
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6986
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6941
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#7006
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#7016
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7026
class Prism::GlobalVariableWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7039
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, value, operator_loc, location); end

  # source://prism//lib/prism/node.rb#7048
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7053
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7063
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7058
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7068
  sig { params(params: T.untyped).returns(Prism::GlobalVariableWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#7053
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7082
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#7092
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7027
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#7030
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#7087
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#7036
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#7116
  def type; end

  # source://prism//lib/prism/node.rb#7033
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#7126
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7136
class Prism::HashNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7146
  sig do
    params(
      opening_loc: Prism::Location,
      elements: T::Array[Prism::Node],
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(opening_loc, elements, closing_loc, location); end

  # source://prism//lib/prism/node.rb#7154
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7159
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7197
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#7143
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#7169
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7164
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7174
  sig { params(params: T.untyped).returns(Prism::HashNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#7159
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7187
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#7140
  sig { returns(T::Array[Prism::Node]) }
  def elements; end

  # source://prism//lib/prism/node.rb#7202
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7192
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#7137
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#7224
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#7234
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7247
class Prism::HashPatternNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7263
  sig do
    params(
      constant: T.nilable(Prism::Node),
      elements: T::Array[Prism::Node],
      rest: T.nilable(Prism::Node),
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(constant, elements, rest, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#7273
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7278
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7322
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#7260
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#7292
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7283
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7248
  sig { returns(T.nilable(Prism::Node)) }
  def constant; end

  # source://prism//lib/prism/node.rb#7297
  sig { params(params: T.untyped).returns(Prism::HashPatternNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#7278
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7312
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#7251
  sig { returns(T::Array[Prism::Node]) }
  def elements; end

  # source://prism//lib/prism/node.rb#7327
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7317
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#7257
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#7254
  sig { returns(T.nilable(Prism::Node)) }
  def rest; end

  # source://prism//lib/prism/node.rb#7361
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#7371
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7384
class Prism::IfNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7400
  sig do
    params(
      if_keyword_loc: T.nilable(Prism::Location),
      predicate: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      consequent: T.nilable(Prism::Node),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(if_keyword_loc, predicate, statements, consequent, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#7410
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7419
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7433
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7424
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7394
  sig { returns(T.nilable(Prism::Node)) }
  def consequent; end

  # source://prism//lib/prism/node.rb#7438
  sig { params(params: T.untyped).returns(Prism::IfNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#7419
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7453
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#7463
  sig { returns(T.nilable(String)) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#7397
  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#7458
  sig { returns(T.nilable(String)) }
  def if_keyword; end

  # source://prism//lib/prism/node.rb#7385
  sig { returns(T.nilable(Prism::Location)) }
  def if_keyword_loc; end

  # source://prism//lib/prism/node.rb#7468
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7388
  sig { returns(Prism::Node) }
  def predicate; end

  # source://prism//lib/prism/node.rb#7414
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#7391
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#7503
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#7513
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7523
class Prism::ImaginaryNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7527
  sig { params(numeric: Prism::Node, location: Prism::Location).void }
  def initialize(numeric, location); end

  # source://prism//lib/prism/node.rb#7533
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7538
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7548
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7543
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7553
  sig { params(params: T.untyped).returns(Prism::ImaginaryNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#7538
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7564
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#7569
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7524
  sig { returns(Prism::Node) }
  def numeric; end

  # source://prism//lib/prism/node.rb#7590
  def type; end

  # source://prism//lib/prism/node_ext.rb#28
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#7600
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7614
class Prism::ImplicitNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7618
  sig { params(value: Prism::Node, location: Prism::Location).void }
  def initialize(value, location); end

  # source://prism//lib/prism/node.rb#7624
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7629
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7639
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7634
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7644
  sig { params(params: T.untyped).returns(Prism::ImplicitNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#7629
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7655
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#7660
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7681
  def type; end

  # source://prism//lib/prism/node.rb#7615
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#7691
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7701
class Prism::InNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7714
  sig do
    params(
      pattern: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      in_loc: Prism::Location,
      then_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(pattern, statements, in_loc, then_loc, location); end

  # source://prism//lib/prism/node.rb#7723
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7728
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7741
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7733
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7746
  sig { params(params: T.untyped).returns(Prism::InNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#7728
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7760
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#7765
  sig { returns(String) }
  def in; end

  # source://prism//lib/prism/node.rb#7708
  sig { returns(Prism::Location) }
  def in_loc; end

  # source://prism//lib/prism/node.rb#7775
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7702
  sig { returns(Prism::Node) }
  def pattern; end

  # source://prism//lib/prism/node.rb#7705
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#7770
  sig { returns(T.nilable(String)) }
  def then; end

  # source://prism//lib/prism/node.rb#7711
  sig { returns(T.nilable(Prism::Location)) }
  def then_loc; end

  # source://prism//lib/prism/node.rb#7804
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#7814
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7824
class Prism::IndexAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7852
  sig do
    params(
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::Node),
      flags: Integer,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, flags, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#7866
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7834
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#7840
  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  # source://prism//lib/prism/node.rb#7915
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#7828
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#7871
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7925
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#7837
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#7886
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7876
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7891
  sig { params(params: T.untyped).returns(Prism::IndexAndWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#7871
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7910
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#7945
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7920
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#7831
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#7940
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#7846
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#7825
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#7930
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#7990
  def type; end

  # source://prism//lib/prism/node.rb#7849
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#7935
  sig { returns(T::Boolean) }
  def variable_call?; end

  private

  # source://prism//lib/prism/node.rb#7843
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#8000
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8010
class Prism::IndexOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8041
  sig do
    params(
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::Node),
      flags: Integer,
      operator: Symbol,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, flags, operator, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#8056
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8020
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#8026
  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  # source://prism//lib/prism/node.rb#8106
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#8014
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#8061
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8116
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#8023
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#8076
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8066
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8081
  sig { params(params: T.untyped).returns(Prism::IndexOperatorWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#8061
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8101
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8131
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8111
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#8017
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#8032
  sig { returns(Symbol) }
  def operator; end

  # source://prism//lib/prism/node.rb#8035
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#8011
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#8121
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#8177
  def type; end

  # source://prism//lib/prism/node.rb#8038
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#8126
  sig { returns(T::Boolean) }
  def variable_call?; end

  private

  # source://prism//lib/prism/node.rb#8029
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#8187
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8197
class Prism::IndexOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8225
  sig do
    params(
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::Node),
      flags: Integer,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, flags, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#8239
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8207
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#8213
  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  # source://prism//lib/prism/node.rb#8288
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#8201
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#8244
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8298
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#8210
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#8259
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8249
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8264
  sig { params(params: T.untyped).returns(Prism::IndexOrWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#8244
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8283
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8318
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8293
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#8204
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#8313
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#8219
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#8198
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#8303
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#8363
  def type; end

  # source://prism//lib/prism/node.rb#8222
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#8308
  sig { returns(T::Boolean) }
  def variable_call?; end

  private

  # source://prism//lib/prism/node.rb#8216
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#8373
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#218
class Prism::InlineComment < ::Prism::Comment
  # source://prism//lib/prism/parse_result.rb#224
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#219
  sig { override.returns(T::Boolean) }
  def trailing?; end
end

# source://prism//lib/prism/node.rb#8383
class Prism::InstanceVariableAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8396
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#8405
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8410
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8420
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8415
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8425
  sig { params(params: T.untyped).returns(Prism::InstanceVariableAndWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#8410
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8439
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8449
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8384
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#8387
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#8444
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#8390
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#8473
  def type; end

  # source://prism//lib/prism/node.rb#8393
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#8483
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8493
class Prism::InstanceVariableOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8509
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      operator: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, value, operator, location); end

  # source://prism//lib/prism/node.rb#8519
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8524
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8534
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8529
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8539
  sig { params(params: T.untyped).returns(Prism::InstanceVariableOperatorWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#8524
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8554
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8559
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8494
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#8497
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#8506
  sig { returns(Symbol) }
  def operator; end

  # source://prism//lib/prism/node.rb#8500
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#8584
  def type; end

  # source://prism//lib/prism/node.rb#8503
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#8594
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8604
class Prism::InstanceVariableOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8617
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#8626
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8631
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8641
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8636
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8646
  sig { params(params: T.untyped).returns(Prism::InstanceVariableOrWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#8631
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8660
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8670
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8605
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#8608
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#8665
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#8611
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#8694
  def type; end

  # source://prism//lib/prism/node.rb#8614
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#8704
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8714
class Prism::InstanceVariableReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8718
  sig { params(name: Symbol, location: Prism::Location).void }
  def initialize(name, location); end

  # source://prism//lib/prism/node.rb#8724
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8729
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8739
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8734
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8744
  sig { params(params: T.untyped).returns(Prism::InstanceVariableReadNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#8729
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8755
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8760
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8715
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#8780
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#8790
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8800
class Prism::InstanceVariableTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8804
  sig { params(name: Symbol, location: Prism::Location).void }
  def initialize(name, location); end

  # source://prism//lib/prism/node.rb#8810
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8815
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8825
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8820
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8830
  sig { params(params: T.untyped).returns(Prism::InstanceVariableTargetNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#8815
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8841
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8846
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8801
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#8866
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#8876
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8886
class Prism::InstanceVariableWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8899
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, value, operator_loc, location); end

  # source://prism//lib/prism/node.rb#8908
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8913
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8923
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8918
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8928
  sig { params(params: T.untyped).returns(Prism::InstanceVariableWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#8913
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8942
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8952
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8887
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#8890
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#8947
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#8896
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#8976
  def type; end

  # source://prism//lib/prism/node.rb#8893
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#8986
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16551
# Flags for integer nodes that correspond to the base of the integer.
module Prism::IntegerBaseFlags; end

# source://prism//lib/prism/node.rb#16553
Prism::IntegerBaseFlags::BINARY = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#16559
Prism::IntegerBaseFlags::DECIMAL = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#16562
Prism::IntegerBaseFlags::HEXADECIMAL = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#16556
Prism::IntegerBaseFlags::OCTAL = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#8996
class Prism::IntegerNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9000
  sig { params(flags: Integer, location: Prism::Location).void }
  def initialize(flags, location); end

  # source://prism//lib/prism/node.rb#9006
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9042
  sig { returns(T::Boolean) }
  def binary?; end

  # source://prism//lib/prism/node.rb#9011
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9021
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9016
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9026
  sig { params(params: T.untyped).returns(Prism::IntegerNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#9052
  sig { returns(T::Boolean) }
  def decimal?; end

  # source://prism//lib/prism/node.rb#9011
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9037
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#9057
  sig { returns(T::Boolean) }
  def hexadecimal?; end

  # source://prism//lib/prism/node.rb#9062
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9047
  sig { returns(T::Boolean) }
  def octal?; end

  # source://prism//lib/prism/node.rb#9083
  def type; end

  # source://prism//lib/prism/node_ext.rb#35
  def value; end

  private

  # source://prism//lib/prism/node.rb#8997
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#9093
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9105
class Prism::InterpolatedMatchLastLineNode < ::Prism::Node
  include ::Prism::RegularExpressionOptions

  # source://prism//lib/prism/node.rb#9118
  sig do
    params(
      opening_loc: Prism::Location,
      parts: T::Array[Prism::Node],
      closing_loc: Prism::Location,
      flags: Integer,
      location: Prism::Location
    ).void
  end
  def initialize(opening_loc, parts, closing_loc, flags, location); end

  # source://prism//lib/prism/node.rb#9127
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9206
  sig { returns(T::Boolean) }
  def ascii_8bit?; end

  # source://prism//lib/prism/node.rb#9137
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9176
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#9112
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#9147
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9142
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9152
  sig { params(params: T.untyped).returns(Prism::InterpolatedMatchLastLineNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#9137
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9166
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#9201
  sig { returns(T::Boolean) }
  def euc_jp?; end

  # source://prism//lib/prism/node.rb#9186
  sig { returns(T::Boolean) }
  def extended?; end

  # source://prism//lib/prism/node.rb#9181
  sig { returns(T::Boolean) }
  def ignore_case?; end

  # source://prism//lib/prism/node.rb#9221
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9191
  sig { returns(T::Boolean) }
  def multi_line?; end

  # source://prism//lib/prism/node.rb#9196
  sig { returns(T::Boolean) }
  def once?; end

  # source://prism//lib/prism/node.rb#9171
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#9106
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#9109
  sig { returns(T::Array[Prism::Node]) }
  def parts; end

  # source://prism//lib/prism/node.rb#9131
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#9245
  def type; end

  # source://prism//lib/prism/node.rb#9216
  sig { returns(T::Boolean) }
  def utf_8?; end

  # source://prism//lib/prism/node.rb#9211
  sig { returns(T::Boolean) }
  def windows_31j?; end

  private

  # source://prism//lib/prism/node.rb#9115
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#9255
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9265
class Prism::InterpolatedRegularExpressionNode < ::Prism::Node
  include ::Prism::RegularExpressionOptions

  # source://prism//lib/prism/node.rb#9278
  sig do
    params(
      opening_loc: Prism::Location,
      parts: T::Array[Prism::Node],
      closing_loc: Prism::Location,
      flags: Integer,
      location: Prism::Location
    ).void
  end
  def initialize(opening_loc, parts, closing_loc, flags, location); end

  # source://prism//lib/prism/node.rb#9287
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9366
  sig { returns(T::Boolean) }
  def ascii_8bit?; end

  # source://prism//lib/prism/node.rb#9297
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9336
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#9272
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#9307
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9302
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9312
  sig { params(params: T.untyped).returns(Prism::InterpolatedRegularExpressionNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#9297
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9326
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#9361
  sig { returns(T::Boolean) }
  def euc_jp?; end

  # source://prism//lib/prism/node.rb#9346
  sig { returns(T::Boolean) }
  def extended?; end

  # source://prism//lib/prism/node.rb#9341
  sig { returns(T::Boolean) }
  def ignore_case?; end

  # source://prism//lib/prism/node.rb#9381
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9351
  sig { returns(T::Boolean) }
  def multi_line?; end

  # source://prism//lib/prism/node.rb#9356
  sig { returns(T::Boolean) }
  def once?; end

  # source://prism//lib/prism/node.rb#9331
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#9266
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#9269
  sig { returns(T::Array[Prism::Node]) }
  def parts; end

  # source://prism//lib/prism/node.rb#9291
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#9405
  def type; end

  # source://prism//lib/prism/node.rb#9376
  sig { returns(T::Boolean) }
  def utf_8?; end

  # source://prism//lib/prism/node.rb#9371
  sig { returns(T::Boolean) }
  def windows_31j?; end

  private

  # source://prism//lib/prism/node.rb#9275
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#9415
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9425
class Prism::InterpolatedStringNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9435
  sig do
    params(
      opening_loc: T.nilable(Prism::Location),
      parts: T::Array[Prism::Node],
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(opening_loc, parts, closing_loc, location); end

  # source://prism//lib/prism/node.rb#9443
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9453
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9491
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#9432
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#9463
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9458
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9468
  sig { params(params: T.untyped).returns(Prism::InterpolatedStringNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#9453
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9481
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#9496
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9486
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#9426
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#9429
  sig { returns(T::Array[Prism::Node]) }
  def parts; end

  # source://prism//lib/prism/node.rb#9447
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#9518
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#9528
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9538
class Prism::InterpolatedSymbolNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9548
  sig do
    params(
      opening_loc: T.nilable(Prism::Location),
      parts: T::Array[Prism::Node],
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(opening_loc, parts, closing_loc, location); end

  # source://prism//lib/prism/node.rb#9556
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9566
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9604
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#9545
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#9576
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9571
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9581
  sig { params(params: T.untyped).returns(Prism::InterpolatedSymbolNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#9566
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9594
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#9609
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9599
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#9539
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#9542
  sig { returns(T::Array[Prism::Node]) }
  def parts; end

  # source://prism//lib/prism/node.rb#9560
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#9631
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#9641
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9651
class Prism::InterpolatedXStringNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9661
  sig do
    params(
      opening_loc: Prism::Location,
      parts: T::Array[Prism::Node],
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(opening_loc, parts, closing_loc, location); end

  # source://prism//lib/prism/node.rb#9669
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9679
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9717
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#9658
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#9689
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9684
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9694
  sig { params(params: T.untyped).returns(Prism::InterpolatedXStringNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#9679
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9707
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#9722
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9712
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#9652
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#9655
  sig { returns(T::Array[Prism::Node]) }
  def parts; end

  # source://prism//lib/prism/node.rb#9673
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#9744
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#9754
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9764
class Prism::KeywordHashNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9768
  sig { params(elements: T::Array[Prism::Node], location: Prism::Location).void }
  def initialize(elements, location); end

  # source://prism//lib/prism/node.rb#9774
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9779
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9789
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9784
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9794
  sig { params(params: T.untyped).returns(Prism::KeywordHashNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#9779
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9805
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#9765
  sig { returns(T::Array[Prism::Node]) }
  def elements; end

  # source://prism//lib/prism/node.rb#9810
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9830
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#9840
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9851
class Prism::KeywordRestParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9861
  sig do
    params(
      name: T.nilable(Symbol),
      name_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, location); end

  # source://prism//lib/prism/node.rb#9869
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9874
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9884
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9879
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9889
  sig { params(params: T.untyped).returns(Prism::KeywordRestParameterNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#9874
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9902
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#9912
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9852
  sig { returns(T.nilable(Symbol)) }
  def name; end

  # source://prism//lib/prism/node.rb#9855
  sig { returns(T.nilable(Prism::Location)) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#9907
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#9858
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#9938
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#9948
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9958
class Prism::LambdaNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9977
  sig do
    params(
      locals: T::Array[Symbol],
      operator_loc: Prism::Location,
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      parameters: T.nilable(Prism::BlockParametersNode),
      body: T.nilable(Prism::Node),
      location: Prism::Location
    ).void
  end
  def initialize(locals, operator_loc, opening_loc, closing_loc, parameters, body, location); end

  # source://prism//lib/prism/node.rb#9988
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9974
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#9993
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10042
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#9968
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#10006
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9998
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10011
  sig { params(params: T.untyped).returns(Prism::LambdaNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#9993
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10027
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#10047
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9959
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#10037
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#9965
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#10032
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#9962
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#9971
  sig { returns(T.nilable(Prism::BlockParametersNode)) }
  def parameters; end

  # source://prism//lib/prism/node.rb#10082
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#10092
    def type; end
  end
end

# source://prism//lib/prism/lex_compat.rb#11
class Prism::LexCompat
  # source://prism//lib/prism/lex_compat.rb#599
  def initialize(source, **options); end

  # source://prism//lib/prism/lex_compat.rb#597
  def options; end

  # source://prism//lib/prism/lex_compat.rb#604
  def result; end

  # source://prism//lib/prism/lex_compat.rb#597
  def source; end
end

# source://prism//lib/prism/lex_compat.rb#210
class Prism::LexCompat::EndContentToken < ::Prism::LexCompat::Token
  # source://prism//lib/prism/lex_compat.rb#211
  def ==(other); end
end

# source://prism//lib/prism/lex_compat.rb#271
module Prism::LexCompat::Heredoc
  class << self
    # source://prism//lib/prism/lex_compat.rb#583
    def build(opening); end
  end
end

# source://prism//lib/prism/lex_compat.rb#295
class Prism::LexCompat::Heredoc::DashHeredoc
  # source://prism//lib/prism/lex_compat.rb#298
  def initialize(split); end

  # source://prism//lib/prism/lex_compat.rb#303
  def <<(token); end

  # source://prism//lib/prism/lex_compat.rb#296
  def split; end

  # source://prism//lib/prism/lex_compat.rb#307
  def to_a; end

  # source://prism//lib/prism/lex_compat.rb#296
  def tokens; end
end

# source://prism//lib/prism/lex_compat.rb#354
class Prism::LexCompat::Heredoc::DedentingHeredoc
  # source://prism//lib/prism/lex_compat.rb#359
  def initialize; end

  # source://prism//lib/prism/lex_compat.rb#370
  def <<(token); end

  # source://prism//lib/prism/lex_compat.rb#357
  def dedent; end

  # source://prism//lib/prism/lex_compat.rb#357
  def dedent_next; end

  # source://prism//lib/prism/lex_compat.rb#357
  def embexpr_balance; end

  # source://prism//lib/prism/lex_compat.rb#407
  def to_a; end

  # source://prism//lib/prism/lex_compat.rb#357
  def tokens; end
end

# source://prism//lib/prism/lex_compat.rb#355
Prism::LexCompat::Heredoc::DedentingHeredoc::TAB_WIDTH = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/lex_compat.rb#276
class Prism::LexCompat::Heredoc::PlainHeredoc
  # source://prism//lib/prism/lex_compat.rb#279
  def initialize; end

  # source://prism//lib/prism/lex_compat.rb#283
  def <<(token); end

  # source://prism//lib/prism/lex_compat.rb#287
  def to_a; end

  # source://prism//lib/prism/lex_compat.rb#277
  def tokens; end
end

# source://prism//lib/prism/lex_compat.rb#228
class Prism::LexCompat::IdentToken < ::Prism::LexCompat::Token
  # source://prism//lib/prism/lex_compat.rb#229
  def ==(other); end
end

# source://prism//lib/prism/lex_compat.rb#218
class Prism::LexCompat::IgnoreStateToken < ::Prism::LexCompat::Token
  # source://prism//lib/prism/lex_compat.rb#219
  def ==(other); end
end

# source://prism//lib/prism/lex_compat.rb#239
class Prism::LexCompat::IgnoredNewlineToken < ::Prism::LexCompat::Token
  # source://prism//lib/prism/lex_compat.rb#240
  def ==(other); end
end

# source://prism//lib/prism/lex_compat.rb#259
class Prism::LexCompat::ParamToken < ::Prism::LexCompat::Token
  # source://prism//lib/prism/lex_compat.rb#260
  def ==(other); end
end

# source://prism//lib/prism/lex_compat.rb#15
Prism::LexCompat::RIPPER = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/lex_compat.rb#187
class Prism::LexCompat::Token < ::SimpleDelegator
  # source://prism//lib/prism/lex_compat.rb#193
  def event; end

  # source://prism//lib/prism/lex_compat.rb#188
  def location; end

  # source://prism//lib/prism/lex_compat.rb#203
  def state; end

  # source://prism//lib/prism/lex_compat.rb#198
  def value; end
end

# source://prism//lib/prism/lex_compat.rb#842
class Prism::LexRipper
  # source://prism//lib/prism/lex_compat.rb#845
  def initialize(source); end

  # source://prism//lib/prism/lex_compat.rb#849
  def result; end

  # source://prism//lib/prism/lex_compat.rb#843
  def source; end
end

# source://prism//lib/prism/node.rb#10102
class Prism::LocalVariableAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10118
  sig do
    params(
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      name: Symbol,
      depth: Integer,
      location: Prism::Location
    ).void
  end
  def initialize(name_loc, operator_loc, value, name, depth, location); end

  # source://prism//lib/prism/node.rb#10128
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10133
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10143
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10138
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10148
  sig { params(params: T.untyped).returns(Prism::LocalVariableAndWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#10133
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10163
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#10115
  sig { returns(Integer) }
  def depth; end

  # source://prism//lib/prism/node.rb#10173
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10112
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#10103
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#10168
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#10106
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#10198
  def type; end

  # source://prism//lib/prism/node.rb#10109
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#10208
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10218
class Prism::LocalVariableOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10237
  sig do
    params(
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      name: Symbol,
      operator: Symbol,
      depth: Integer,
      location: Prism::Location
    ).void
  end
  def initialize(name_loc, operator_loc, value, name, operator, depth, location); end

  # source://prism//lib/prism/node.rb#10248
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10253
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10263
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10258
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10268
  sig { params(params: T.untyped).returns(Prism::LocalVariableOperatorWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#10253
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10284
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#10234
  sig { returns(Integer) }
  def depth; end

  # source://prism//lib/prism/node.rb#10289
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10228
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#10219
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#10231
  sig { returns(Symbol) }
  def operator; end

  # source://prism//lib/prism/node.rb#10222
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#10315
  def type; end

  # source://prism//lib/prism/node.rb#10225
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#10325
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10335
class Prism::LocalVariableOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10351
  sig do
    params(
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      name: Symbol,
      depth: Integer,
      location: Prism::Location
    ).void
  end
  def initialize(name_loc, operator_loc, value, name, depth, location); end

  # source://prism//lib/prism/node.rb#10361
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10366
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10376
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10371
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10381
  sig { params(params: T.untyped).returns(Prism::LocalVariableOrWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#10366
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10396
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#10348
  sig { returns(Integer) }
  def depth; end

  # source://prism//lib/prism/node.rb#10406
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10345
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#10336
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#10401
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#10339
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#10431
  def type; end

  # source://prism//lib/prism/node.rb#10342
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#10441
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10453
class Prism::LocalVariableReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10460
  sig { params(name: Symbol, depth: Integer, location: Prism::Location).void }
  def initialize(name, depth, location); end

  # source://prism//lib/prism/node.rb#10467
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10472
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10482
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10477
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10487
  sig { params(params: T.untyped).returns(Prism::LocalVariableReadNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#10472
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10499
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#10457
  sig { returns(Integer) }
  def depth; end

  # source://prism//lib/prism/node.rb#10504
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10454
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#10525
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#10535
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10545
class Prism::LocalVariableTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10552
  sig { params(name: Symbol, depth: Integer, location: Prism::Location).void }
  def initialize(name, depth, location); end

  # source://prism//lib/prism/node.rb#10559
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10564
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10574
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10569
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10579
  sig { params(params: T.untyped).returns(Prism::LocalVariableTargetNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#10564
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10591
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#10549
  sig { returns(Integer) }
  def depth; end

  # source://prism//lib/prism/node.rb#10596
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10546
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#10617
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#10627
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10637
class Prism::LocalVariableWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10653
  sig do
    params(
      name: Symbol,
      depth: Integer,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(name, depth, name_loc, value, operator_loc, location); end

  # source://prism//lib/prism/node.rb#10663
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10668
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10678
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10673
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10683
  sig { params(params: T.untyped).returns(Prism::LocalVariableWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#10668
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10698
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#10641
  sig { returns(Integer) }
  def depth; end

  # source://prism//lib/prism/node.rb#10708
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10638
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#10644
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#10703
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#10650
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#10733
  def type; end

  # source://prism//lib/prism/node.rb#10647
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#10743
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#81
class Prism::Location
  # source://prism//lib/prism/parse_result.rb#98
  sig { params(source: Prism::Source, start_offset: Integer, length: Integer).void }
  def initialize(source, start_offset, length); end

  # source://prism//lib/prism/parse_result.rb#168
  def ==(other); end

  # source://prism//lib/prism/parse_result.rb#94
  sig { returns(T::Array[Prism::Comment]) }
  def comments; end

  # source://prism//lib/prism/parse_result.rb#106
  sig { params(options: T.untyped).returns(Prism::Location) }
  def copy(**options); end

  # source://prism//lib/prism/parse_result.rb#158
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#153
  sig { returns(Integer) }
  def end_column; end

  # source://prism//lib/prism/parse_result.rb#141
  sig { returns(Integer) }
  def end_line; end

  # source://prism//lib/prism/parse_result.rb#125
  sig { returns(Integer) }
  def end_offset; end

  # source://prism//lib/prism/parse_result.rb#115
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#177
  def join(other); end

  # source://prism//lib/prism/parse_result.rb#91
  def length; end

  # source://prism//lib/prism/parse_result.rb#163
  def pretty_print(q); end

  # source://prism//lib/prism/parse_result.rb#120
  sig { returns(String) }
  def slice; end

  # source://prism//lib/prism/parse_result.rb#147
  sig { returns(Integer) }
  def start_column; end

  # source://prism//lib/prism/parse_result.rb#130
  sig { returns(Integer) }
  def start_line; end

  # source://prism//lib/prism/parse_result.rb#135
  def start_line_slice; end

  # source://prism//lib/prism/parse_result.rb#88
  sig { returns(Integer) }
  def start_offset; end

  protected

  # source://prism//lib/prism/parse_result.rb#84
  def source; end

  class << self
    # source://prism//lib/prism/parse_result.rb#187
    def null; end
  end
end

# source://prism//lib/prism/node.rb#16566
# Flags for while and until loop nodes.
module Prism::LoopFlags; end

# source://prism//lib/prism/node.rb#16568
Prism::LoopFlags::BEGIN_MODIFIER = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/parse_result.rb#248
class Prism::MagicComment
  # source://prism//lib/prism/parse_result.rb#256
  def initialize(key_loc, value_loc); end

  # source://prism//lib/prism/parse_result.rb#272
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#277
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#262
  def key; end

  # source://prism//lib/prism/parse_result.rb#250
  def key_loc; end

  # source://prism//lib/prism/parse_result.rb#267
  def value; end

  # source://prism//lib/prism/parse_result.rb#253
  def value_loc; end
end

# source://prism//lib/prism/node.rb#10755
class Prism::MatchLastLineNode < ::Prism::Node
  include ::Prism::RegularExpressionOptions

  # source://prism//lib/prism/node.rb#10771
  sig do
    params(
      opening_loc: Prism::Location,
      content_loc: Prism::Location,
      closing_loc: Prism::Location,
      unescaped: String,
      flags: Integer,
      location: Prism::Location
    ).void
  end
  def initialize(opening_loc, content_loc, closing_loc, unescaped, flags, location); end

  # source://prism//lib/prism/node.rb#10781
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10861
  sig { returns(T::Boolean) }
  def ascii_8bit?; end

  # source://prism//lib/prism/node.rb#10786
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10831
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#10762
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#10796
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10791
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10826
  sig { returns(String) }
  def content; end

  # source://prism//lib/prism/node.rb#10759
  sig { returns(Prism::Location) }
  def content_loc; end

  # source://prism//lib/prism/node.rb#10801
  sig { params(params: T.untyped).returns(Prism::MatchLastLineNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#10786
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10816
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#10856
  sig { returns(T::Boolean) }
  def euc_jp?; end

  # source://prism//lib/prism/node.rb#10841
  sig { returns(T::Boolean) }
  def extended?; end

  # source://prism//lib/prism/node.rb#10836
  sig { returns(T::Boolean) }
  def ignore_case?; end

  # source://prism//lib/prism/node.rb#10876
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10846
  sig { returns(T::Boolean) }
  def multi_line?; end

  # source://prism//lib/prism/node.rb#10851
  sig { returns(T::Boolean) }
  def once?; end

  # source://prism//lib/prism/node.rb#10821
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#10756
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#10901
  def type; end

  # source://prism//lib/prism/node.rb#10765
  sig { returns(String) }
  def unescaped; end

  # source://prism//lib/prism/node.rb#10871
  sig { returns(T::Boolean) }
  def utf_8?; end

  # source://prism//lib/prism/node.rb#10866
  sig { returns(T::Boolean) }
  def windows_31j?; end

  private

  # source://prism//lib/prism/node.rb#10768
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#10911
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10921
class Prism::MatchPredicateNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10931
  sig do
    params(
      value: Prism::Node,
      pattern: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(value, pattern, operator_loc, location); end

  # source://prism//lib/prism/node.rb#10939
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10944
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10954
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10949
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10959
  sig { params(params: T.untyped).returns(Prism::MatchPredicateNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#10944
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10972
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#10982
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10977
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#10928
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#10925
  sig { returns(Prism::Node) }
  def pattern; end

  # source://prism//lib/prism/node.rb#11006
  def type; end

  # source://prism//lib/prism/node.rb#10922
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#11016
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11026
class Prism::MatchRequiredNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11036
  sig do
    params(
      value: Prism::Node,
      pattern: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(value, pattern, operator_loc, location); end

  # source://prism//lib/prism/node.rb#11044
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11049
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11059
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11054
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11064
  sig { params(params: T.untyped).returns(Prism::MatchRequiredNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#11049
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11077
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11087
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11082
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#11033
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#11030
  sig { returns(Prism::Node) }
  def pattern; end

  # source://prism//lib/prism/node.rb#11111
  def type; end

  # source://prism//lib/prism/node.rb#11027
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#11121
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11132
class Prism::MatchWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11139
  sig { params(call: Prism::CallNode, locals: T::Array[Symbol], location: Prism::Location).void }
  def initialize(call, locals, location); end

  # source://prism//lib/prism/node.rb#11146
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11133
  sig { returns(Prism::CallNode) }
  def call; end

  # source://prism//lib/prism/node.rb#11151
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11161
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11156
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11166
  sig { params(params: T.untyped).returns(Prism::MatchWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#11151
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11178
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11183
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11136
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#11205
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#11215
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11223
class Prism::MissingNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11224
  sig { params(location: Prism::Location).void }
  def initialize(location); end

  # source://prism//lib/prism/node.rb#11229
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11234
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11244
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11239
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11249
  sig { params(params: T.untyped).returns(Prism::MissingNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#11234
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11259
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11264
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11283
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#11293
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11303
class Prism::ModuleNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11322
  sig do
    params(
      locals: T::Array[Symbol],
      module_keyword_loc: Prism::Location,
      constant_path: Prism::Node,
      body: T.nilable(Prism::Node),
      end_keyword_loc: Prism::Location,
      name: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(locals, module_keyword_loc, constant_path, body, end_keyword_loc, name, location); end

  # source://prism//lib/prism/node.rb#11333
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11313
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#11338
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11351
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11343
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11310
  sig { returns(Prism::Node) }
  def constant_path; end

  # source://prism//lib/prism/node.rb#11356
  sig { params(params: T.untyped).returns(Prism::ModuleNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#11338
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11372
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11382
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#11316
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#11387
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11304
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#11377
  sig { returns(String) }
  def module_keyword; end

  # source://prism//lib/prism/node.rb#11307
  sig { returns(Prism::Location) }
  def module_keyword_loc; end

  # source://prism//lib/prism/node.rb#11319
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#11418
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#11428
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11438
class Prism::MultiTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11454
  sig do
    params(
      lefts: T::Array[Prism::Node],
      rest: T.nilable(Prism::Node),
      rights: T::Array[Prism::Node],
      lparen_loc: T.nilable(Prism::Location),
      rparen_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(lefts, rest, rights, lparen_loc, rparen_loc, location); end

  # source://prism//lib/prism/node.rb#11464
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11469
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11483
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11474
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11488
  sig { params(params: T.untyped).returns(Prism::MultiTargetNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#11469
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11503
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11518
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11439
  sig { returns(T::Array[Prism::Node]) }
  def lefts; end

  # source://prism//lib/prism/node.rb#11508
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#11448
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#11442
  sig { returns(T.nilable(Prism::Node)) }
  def rest; end

  # source://prism//lib/prism/node.rb#11445
  sig { returns(T::Array[Prism::Node]) }
  def rights; end

  # source://prism//lib/prism/node.rb#11513
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#11451
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#11547
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#11557
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11567
class Prism::MultiWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11589
  sig do
    params(
      lefts: T::Array[Prism::Node],
      rest: T.nilable(Prism::Node),
      rights: T::Array[Prism::Node],
      lparen_loc: T.nilable(Prism::Location),
      rparen_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(lefts, rest, rights, lparen_loc, rparen_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#11601
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11606
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11621
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11611
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11626
  sig { params(params: T.untyped).returns(Prism::MultiWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#11606
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11643
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11663
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11568
  sig { returns(T::Array[Prism::Node]) }
  def lefts; end

  # source://prism//lib/prism/node.rb#11648
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#11577
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#11658
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#11583
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#11571
  sig { returns(T.nilable(Prism::Node)) }
  def rest; end

  # source://prism//lib/prism/node.rb#11574
  sig { returns(T::Array[Prism::Node]) }
  def rights; end

  # source://prism//lib/prism/node.rb#11653
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#11580
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#11695
  def type; end

  # source://prism//lib/prism/node.rb#11586
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#11705
    def type; end
  end
end

# source://prism//lib/prism/mutation_compiler.rb#13
class Prism::MutationCompiler < ::Prism::Compiler
  # source://prism//lib/prism/mutation_compiler.rb#14
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#19
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#24
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#29
  def visit_and_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#34
  def visit_arguments_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#39
  def visit_array_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#44
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#49
  def visit_assoc_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#54
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#59
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#64
  def visit_begin_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#69
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#74
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#79
  def visit_block_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#84
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#89
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#94
  def visit_break_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#99
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#104
  def visit_call_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#109
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#114
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#119
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#124
  def visit_case_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#129
  def visit_class_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#134
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#139
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#144
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#149
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#154
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#159
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#164
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#169
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#174
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#179
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#184
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#189
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#194
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#199
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#204
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#209
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#214
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#219
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#224
  def visit_def_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#229
  def visit_defined_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#234
  def visit_else_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#239
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#244
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#249
  def visit_ensure_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#254
  def visit_false_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#259
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#264
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#269
  def visit_float_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#274
  def visit_for_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#279
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#284
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#289
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#294
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#299
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#304
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#309
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#314
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#319
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#324
  def visit_hash_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#329
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#334
  def visit_if_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#339
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#344
  def visit_implicit_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#349
  def visit_in_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#354
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#359
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#364
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#369
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#374
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#379
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#384
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#389
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#394
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#399
  def visit_integer_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#404
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#409
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#414
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#419
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#424
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#429
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#434
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#439
  def visit_lambda_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#444
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#449
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#454
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#459
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#464
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#469
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#474
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#479
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#484
  def visit_match_required_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#489
  def visit_match_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#494
  def visit_missing_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#499
  def visit_module_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#504
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#509
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#514
  def visit_next_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#519
  def visit_nil_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#524
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#529
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#534
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#539
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#544
  def visit_or_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#549
  def visit_parameters_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#554
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#559
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#564
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#569
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#574
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#579
  def visit_program_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#584
  def visit_range_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#589
  def visit_rational_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#594
  def visit_redo_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#599
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#604
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#609
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#614
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#619
  def visit_rescue_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#624
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#629
  def visit_retry_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#634
  def visit_return_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#639
  def visit_self_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#644
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#649
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#654
  def visit_source_file_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#659
  def visit_source_line_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#664
  def visit_splat_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#669
  def visit_statements_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#674
  def visit_string_concat_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#679
  def visit_string_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#684
  def visit_super_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#689
  def visit_symbol_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#694
  def visit_true_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#699
  def visit_undef_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#704
  def visit_unless_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#709
  def visit_until_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#714
  def visit_when_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#719
  def visit_while_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#724
  def visit_x_string_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#729
  def visit_yield_node(node); end
end

# source://prism//lib/prism/node.rb#11715
class Prism::NextNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11722
  sig do
    params(
      arguments: T.nilable(Prism::ArgumentsNode),
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(arguments, keyword_loc, location); end

  # source://prism//lib/prism/node.rb#11729
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11716
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#11734
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11746
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11739
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11751
  sig { params(params: T.untyped).returns(Prism::NextNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#11734
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11763
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11773
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11768
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#11719
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#11799
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#11809
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11819
class Prism::NilNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11820
  sig { params(location: Prism::Location).void }
  def initialize(location); end

  # source://prism//lib/prism/node.rb#11825
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11830
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11840
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11835
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11845
  sig { params(params: T.untyped).returns(Prism::NilNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#11830
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11855
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11860
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11879
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#11889
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11900
class Prism::NoKeywordsParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11907
  sig { params(operator_loc: Prism::Location, keyword_loc: Prism::Location, location: Prism::Location).void }
  def initialize(operator_loc, keyword_loc, location); end

  # source://prism//lib/prism/node.rb#11914
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11919
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11929
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11924
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11934
  sig { params(params: T.untyped).returns(Prism::NoKeywordsParameterNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#11919
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11946
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11961
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11956
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#11904
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#11951
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#11901
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#11982
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#11992
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11
class Prism::Node
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14
  sig { returns(Prism::Location) }
  def location; end

  # source://prism//lib/prism/node.rb#16
  def newline?; end

  # source://prism//lib/prism/node.rb#35
  def pretty_print(q); end

  # source://prism//lib/prism/node.rb#20
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#29
  sig { returns(String) }
  def slice; end
end

# source://prism//lib/prism/node_inspector.rb#6
class Prism::NodeInspector
  # source://prism//lib/prism/node_inspector.rb#9
  def initialize(prefix = T.unsafe(nil)); end

  # source://prism//lib/prism/node_inspector.rb#15
  # Appends a line to the output with the current prefix.
  sig { params(line: String).void }
  def <<(line); end

  # source://prism//lib/prism/node_inspector.rb#59
  # Returns a new inspector that can be used to inspect a child node.
  sig { params(append: String).returns(Prism::NodeInspector) }
  def child_inspector(append); end

  # source://prism//lib/prism/node_inspector.rb#54
  # Generates a string that represents a child node.
  sig { params(node: Prism::Node, append: String).returns(String) }
  def child_node(node, append); end

  # source://prism//lib/prism/node_inspector.rb#21
  # This generates a string that is used as the header of the inspect output
  # for any given node.
  sig { params(node: Prism::Node).returns(String) }
  def header(node); end

  # source://prism//lib/prism/node_inspector.rb#31
  # Generates a string that represents a list of nodes. It handles properly
  # using the box drawing characters to make the output look nice.
  sig { params(prefix: String, nodes: T::Array[Prism::Node]).returns(String) }
  def list(prefix, nodes); end

  # source://prism//lib/prism/node_inspector.rb#45
  # Generates a string that represents a location field on a node.
  sig { params(value: Prism::Location).returns(String) }
  def location(value); end

  # source://prism//lib/prism/node_inspector.rb#7
  sig { returns(String) }
  def output; end

  # source://prism//lib/prism/node_inspector.rb#7
  sig { returns(String) }
  def prefix; end

  # source://prism//lib/prism/node_inspector.rb#64
  # Returns the output as a string.
  sig { returns(String) }
  def to_str; end
end

# source://prism//lib/prism/node.rb#12002
class Prism::NumberedReferenceReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12006
  sig { params(number: Integer, location: Prism::Location).void }
  def initialize(number, location); end

  # source://prism//lib/prism/node.rb#12012
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12017
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12027
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12022
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12032
  sig { params(params: T.untyped).returns(Prism::NumberedReferenceReadNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#12017
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12043
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12048
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12003
  sig { returns(Integer) }
  def number; end

  # source://prism//lib/prism/node.rb#12068
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#12078
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12089
class Prism::OptionalKeywordParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12099
  sig { params(name: Symbol, name_loc: Prism::Location, value: Prism::Node, location: Prism::Location).void }
  def initialize(name, name_loc, value, location); end

  # source://prism//lib/prism/node.rb#12107
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12112
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12122
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12117
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12127
  sig { params(params: T.untyped).returns(Prism::OptionalKeywordParameterNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#12112
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12140
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12145
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12090
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#12093
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#12168
  def type; end

  # source://prism//lib/prism/node.rb#12096
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#12178
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12189
class Prism::OptionalParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12202
  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#12211
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12216
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12226
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12221
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12231
  sig { params(params: T.untyped).returns(Prism::OptionalParameterNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#12216
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12245
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12255
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12190
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#12193
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#12250
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#12196
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#12279
  def type; end

  # source://prism//lib/prism/node.rb#12199
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#12289
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12299
class Prism::OrNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12309
  sig { params(left: Prism::Node, right: Prism::Node, operator_loc: Prism::Location, location: Prism::Location).void }
  def initialize(left, right, operator_loc, location); end

  # source://prism//lib/prism/node.rb#12317
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12322
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12332
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12327
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12337
  sig { params(params: T.untyped).returns(Prism::OrNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#12322
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12350
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12360
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12300
  sig { returns(Prism::Node) }
  def left; end

  # source://prism//lib/prism/node.rb#12355
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#12306
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#12303
  sig { returns(Prism::Node) }
  def right; end

  # source://prism//lib/prism/node.rb#12384
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#12394
    def type; end
  end
end

# source://prism//lib/prism/pack.rb#5
module Prism::Pack
  class << self
    def parse(_arg0, _arg1, _arg2); end
  end
end

# source://prism//lib/prism/pack.rb#55
Prism::Pack::AGNOSTIC_ENDIAN = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::BACK = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::BER = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::BIG_ENDIAN = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::COMMENT = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#59
class Prism::Pack::Directive
  # source://prism//lib/prism/pack.rb#88
  def initialize(version, variant, source, type, signed, endian, size, length_type, length); end

  # source://prism//lib/prism/pack.rb#130
  def describe; end

  # source://prism//lib/prism/pack.rb#76
  def endian; end

  # source://prism//lib/prism/pack.rb#85
  def length; end

  # source://prism//lib/prism/pack.rb#82
  def length_type; end

  # source://prism//lib/prism/pack.rb#73
  def signed; end

  # source://prism//lib/prism/pack.rb#79
  def size; end

  # source://prism//lib/prism/pack.rb#67
  def source; end

  # source://prism//lib/prism/pack.rb#70
  def type; end

  # source://prism//lib/prism/pack.rb#64
  def variant; end

  # source://prism//lib/prism/pack.rb#61
  def version; end
end

# source://prism//lib/prism/pack.rb#101
Prism::Pack::Directive::ENDIAN_DESCRIPTIONS = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/pack.rb#110
Prism::Pack::Directive::SIGNED_DESCRIPTIONS = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/pack.rb#117
Prism::Pack::Directive::SIZE_DESCRIPTIONS = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::ENDIAN_NA = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::FLOAT = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#195
class Prism::Pack::Format
  # source://prism//lib/prism/pack.rb#203
  def initialize(directives, encoding); end

  # source://prism//lib/prism/pack.rb#209
  def describe; end

  # source://prism//lib/prism/pack.rb#197
  def directives; end

  # source://prism//lib/prism/pack.rb#200
  def encoding; end
end

# source://prism//lib/prism/pack.rb#55
Prism::Pack::INTEGER = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::LENGTH_FIXED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::LENGTH_MAX = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::LENGTH_NA = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::LENGTH_RELATIVE = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::LITTLE_ENDIAN = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::MOVE = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::NATIVE_ENDIAN = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::NULL = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIGNED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIGNED_NA = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_16 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_32 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_64 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_8 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_INT = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_LONG = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_LONG_LONG = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_NA = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_P = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_SHORT = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SPACE = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_BASE64 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_FIXED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_HEX_HIGH = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_HEX_LOW = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_LSB = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_MIME = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_MSB = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_NULL_PADDED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_NULL_TERMINATED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_POINTER = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_SPACE_PADDED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_UU = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::UNSIGNED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::UTF8 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/node.rb#12405
class Prism::ParametersNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12427
  sig do
    params(
      requireds: T::Array[Prism::Node],
      optionals: T::Array[Prism::Node],
      rest: T.nilable(Prism::RestParameterNode),
      posts: T::Array[Prism::Node],
      keywords: T::Array[Prism::Node],
      keyword_rest: T.nilable(Prism::Node),
      block: T.nilable(Prism::BlockParameterNode),
      location: Prism::Location
    ).void
  end
  def initialize(requireds, optionals, rest, posts, keywords, keyword_rest, block, location); end

  # source://prism//lib/prism/node.rb#12439
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12424
  sig { returns(T.nilable(Prism::BlockParameterNode)) }
  def block; end

  # source://prism//lib/prism/node.rb#12444
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12462
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12449
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12467
  sig { params(params: T.untyped).returns(Prism::ParametersNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#12444
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12484
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12489
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12421
  sig { returns(T.nilable(Prism::Node)) }
  def keyword_rest; end

  # source://prism//lib/prism/node.rb#12418
  sig { returns(T::Array[Prism::Node]) }
  def keywords; end

  # source://prism//lib/prism/node.rb#12409
  sig { returns(T::Array[Prism::Node]) }
  def optionals; end

  # source://prism//lib/prism/node.rb#12415
  sig { returns(T::Array[Prism::Node]) }
  def posts; end

  # source://prism//lib/prism/node.rb#12406
  sig { returns(T::Array[Prism::Node]) }
  def requireds; end

  # source://prism//lib/prism/node.rb#12412
  sig { returns(T.nilable(Prism::RestParameterNode)) }
  def rest; end

  # source://prism//lib/prism/node.rb#12530
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#12540
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12550
class Prism::ParenthesesNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12560
  sig do
    params(
      body: T.nilable(Prism::Node),
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(body, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#12568
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12551
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#12577
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12617
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#12557
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#12589
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12582
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12594
  sig { params(params: T.untyped).returns(Prism::ParenthesesNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#12577
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12607
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12622
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12612
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#12554
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#12572
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#12649
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#12659
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#283
class Prism::ParseError
  # source://prism//lib/prism/parse_result.rb#291
  def initialize(message, location); end

  # source://prism//lib/prism/parse_result.rb#297
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#302
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#288
  sig { returns(Prism::Location) }
  def location; end

  # source://prism//lib/prism/parse_result.rb#285
  sig { returns(String) }
  def message; end
end

# source://prism//lib/prism/parse_result.rb#335
class Prism::ParseResult
  # source://prism//lib/prism/parse_result.rb#357
  def initialize(value, comments, magic_comments, errors, warnings, source); end

  # source://prism//lib/prism/parse_result/comments.rb#173
  def attach_comments!; end

  # source://prism//lib/prism/parse_result.rb#342
  sig { returns(T::Array[Prism::Comment]) }
  def comments; end

  # source://prism//lib/prism/parse_result.rb#367
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#348
  sig { returns(T::Array[Prism::ParseError]) }
  def errors; end

  # source://prism//lib/prism/parse_result.rb#379
  def failure?; end

  # source://prism//lib/prism/parse_result.rb#345
  def magic_comments; end

  # source://prism//lib/prism/parse_result/newlines.rb#60
  def mark_newlines!; end

  # source://prism//lib/prism/parse_result.rb#354
  sig { returns(Prism::Source) }
  def source; end

  # source://prism//lib/prism/parse_result.rb#373
  def success?; end

  # source://prism//lib/prism/parse_result.rb#339
  sig { returns(Prism::ProgramNode) }
  def value; end

  # source://prism//lib/prism/parse_result.rb#351
  sig { returns(T::Array[Prism::ParseWarning]) }
  def warnings; end
end

# source://prism//lib/prism/parse_result/comments.rb#19
class Prism::ParseResult::Comments
  # source://prism//lib/prism/parse_result/comments.rb#78
  def initialize(parse_result); end

  # source://prism//lib/prism/parse_result/comments.rb#84
  def attach!; end

  # source://prism//lib/prism/parse_result/comments.rb#74
  def parse_result; end

  private

  # source://prism//lib/prism/parse_result/comments.rb#103
  def nearest_targets(node, comment); end
end

# source://prism//lib/prism/parse_result/comments.rb#49
class Prism::ParseResult::Comments::LocationTarget
  # source://prism//lib/prism/parse_result/comments.rb#52
  def initialize(location); end

  # source://prism//lib/prism/parse_result/comments.rb#68
  def <<(comment); end

  # source://prism//lib/prism/parse_result/comments.rb#64
  def encloses?(comment); end

  # source://prism//lib/prism/parse_result/comments.rb#60
  def end_offset; end

  # source://prism//lib/prism/parse_result/comments.rb#50
  def location; end

  # source://prism//lib/prism/parse_result/comments.rb#56
  def start_offset; end
end

# source://prism//lib/prism/parse_result/comments.rb#22
class Prism::ParseResult::Comments::NodeTarget
  # source://prism//lib/prism/parse_result/comments.rb#25
  def initialize(node); end

  # source://prism//lib/prism/parse_result/comments.rb#42
  def <<(comment); end

  # source://prism//lib/prism/parse_result/comments.rb#37
  def encloses?(comment); end

  # source://prism//lib/prism/parse_result/comments.rb#33
  def end_offset; end

  # source://prism//lib/prism/parse_result/comments.rb#23
  def node; end

  # source://prism//lib/prism/parse_result/comments.rb#29
  def start_offset; end
end

# source://prism//lib/prism/parse_result/newlines.rb#21
class Prism::ParseResult::Newlines < ::Prism::Visitor
  # source://prism//lib/prism/parse_result/newlines.rb#22
  def initialize(newline_marked); end

  # source://prism//lib/prism/parse_result/newlines.rb#27
  def visit_block_node(node); end

  # source://prism//lib/prism/parse_result/newlines.rb#41
  def visit_if_node(node); end

  # source://prism//lib/prism/parse_result/newlines.rb#27
  def visit_lambda_node(node); end

  # source://prism//lib/prism/parse_result/newlines.rb#49
  def visit_statements_node(node); end

  # source://prism//lib/prism/parse_result/newlines.rb#41
  def visit_unless_node(node); end
end

# source://prism//lib/prism/parse_result.rb#308
class Prism::ParseWarning
  # source://prism//lib/prism/parse_result.rb#316
  def initialize(message, location); end

  # source://prism//lib/prism/parse_result.rb#322
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#327
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#313
  sig { returns(Prism::Location) }
  def location; end

  # source://prism//lib/prism/parse_result.rb#310
  sig { returns(String) }
  def message; end
end

# source://prism//lib/prism/pattern.rb#37
class Prism::Pattern
  # source://prism//lib/prism/pattern.rb#63
  def initialize(query); end

  # source://prism//lib/prism/pattern.rb#70
  def compile; end

  # source://prism//lib/prism/pattern.rb#59
  def query; end

  # source://prism//lib/prism/pattern.rb#79
  def scan(root); end

  private

  # source://prism//lib/prism/pattern.rb#95
  def combine_and(left, right); end

  # source://prism//lib/prism/pattern.rb#101
  def combine_or(left, right); end

  # source://prism//lib/prism/pattern.rb#136
  def compile_alternation_pattern_node(node); end

  # source://prism//lib/prism/pattern.rb#111
  def compile_array_pattern_node(node); end

  # source://prism//lib/prism/pattern.rb#141
  def compile_constant_path_node(node); end

  # source://prism//lib/prism/pattern.rb#153
  def compile_constant_read_node(node); end

  # source://prism//lib/prism/pattern.rb#106
  def compile_error(node); end

  # source://prism//lib/prism/pattern.rb#171
  def compile_hash_pattern_node(node); end

  # source://prism//lib/prism/pattern.rb#196
  def compile_nil_node(node); end

  # source://prism//lib/prism/pattern.rb#225
  def compile_node(node); end

  # source://prism//lib/prism/pattern.rb#201
  def compile_regular_expression_node(node); end

  # source://prism//lib/prism/pattern.rb#209
  def compile_string_node(node); end

  # source://prism//lib/prism/pattern.rb#217
  def compile_symbol_node(node); end
end

# source://prism//lib/prism/pattern.rb#42
class Prism::Pattern::CompilationError < ::StandardError
  # source://prism//lib/prism/pattern.rb#43
  def initialize(repr); end
end

# source://prism//lib/prism/node.rb#12670
class Prism::PinnedExpressionNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12683
  sig do
    params(
      expression: Prism::Node,
      operator_loc: Prism::Location,
      lparen_loc: Prism::Location,
      rparen_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(expression, operator_loc, lparen_loc, rparen_loc, location); end

  # source://prism//lib/prism/node.rb#12692
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12697
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12707
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12702
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12712
  sig { params(params: T.untyped).returns(Prism::PinnedExpressionNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#12697
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12726
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12671
  sig { returns(Prism::Node) }
  def expression; end

  # source://prism//lib/prism/node.rb#12746
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12736
  sig { returns(String) }
  def lparen; end

  # source://prism//lib/prism/node.rb#12677
  sig { returns(Prism::Location) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#12731
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#12674
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#12741
  sig { returns(String) }
  def rparen; end

  # source://prism//lib/prism/node.rb#12680
  sig { returns(Prism::Location) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#12770
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#12780
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12791
class Prism::PinnedVariableNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12798
  sig { params(variable: Prism::Node, operator_loc: Prism::Location, location: Prism::Location).void }
  def initialize(variable, operator_loc, location); end

  # source://prism//lib/prism/node.rb#12805
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12810
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12820
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12815
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12825
  sig { params(params: T.untyped).returns(Prism::PinnedVariableNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#12810
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12837
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12847
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12842
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#12795
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#12869
  def type; end

  # source://prism//lib/prism/node.rb#12792
  sig { returns(Prism::Node) }
  def variable; end

  class << self
    # source://prism//lib/prism/node.rb#12879
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12889
class Prism::PostExecutionNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12902
  sig do
    params(
      statements: T.nilable(Prism::StatementsNode),
      keyword_loc: Prism::Location,
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(statements, keyword_loc, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#12911
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12916
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12962
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#12899
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#12928
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12921
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12933
  sig { params(params: T.untyped).returns(Prism::PostExecutionNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#12916
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12947
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12967
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12952
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#12893
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#12957
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#12896
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#12890
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#12995
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13005
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13015
class Prism::PreExecutionNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13028
  sig do
    params(
      statements: T.nilable(Prism::StatementsNode),
      keyword_loc: Prism::Location,
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(statements, keyword_loc, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#13037
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13042
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13088
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#13025
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#13054
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13047
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13059
  sig { params(params: T.untyped).returns(Prism::PreExecutionNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#13042
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13073
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13093
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13078
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#13019
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#13083
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#13022
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#13016
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#13121
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13131
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13138
class Prism::ProgramNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13145
  sig { params(locals: T::Array[Symbol], statements: Prism::StatementsNode, location: Prism::Location).void }
  def initialize(locals, statements, location); end

  # source://prism//lib/prism/node.rb#13152
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13157
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13167
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13162
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13172
  sig { params(params: T.untyped).returns(Prism::ProgramNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#13157
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13184
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13189
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13139
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#13142
  sig { returns(Prism::StatementsNode) }
  def statements; end

  # source://prism//lib/prism/node.rb#13211
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13221
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16572
# Flags for range and flip-flop nodes.
module Prism::RangeFlags; end

# source://prism//lib/prism/node.rb#16574
Prism::RangeFlags::EXCLUDE_END = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#13234
class Prism::RangeNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13247
  sig do
    params(
      left: T.nilable(Prism::Node),
      right: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      flags: Integer,
      location: Prism::Location
    ).void
  end
  def initialize(left, right, operator_loc, flags, location); end

  # source://prism//lib/prism/node.rb#13256
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13261
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13274
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13266
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13279
  sig { params(params: T.untyped).returns(Prism::RangeNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#13261
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13293
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13303
  sig { returns(T::Boolean) }
  def exclude_end?; end

  # source://prism//lib/prism/node.rb#13308
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13235
  sig { returns(T.nilable(Prism::Node)) }
  def left; end

  # source://prism//lib/prism/node.rb#13298
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#13241
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#13238
  sig { returns(T.nilable(Prism::Node)) }
  def right; end

  # source://prism//lib/prism/node.rb#13342
  def type; end

  private

  # source://prism//lib/prism/node.rb#13244
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#13352
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13362
class Prism::RationalNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13366
  sig { params(numeric: Prism::Node, location: Prism::Location).void }
  def initialize(numeric, location); end

  # source://prism//lib/prism/node.rb#13372
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13377
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13387
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13382
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13392
  sig { params(params: T.untyped).returns(Prism::RationalNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#13377
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13403
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13408
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13363
  sig { returns(Prism::Node) }
  def numeric; end

  # source://prism//lib/prism/node.rb#13429
  def type; end

  # source://prism//lib/prism/node_ext.rb#54
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#13439
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13449
class Prism::RedoNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13450
  sig { params(location: Prism::Location).void }
  def initialize(location); end

  # source://prism//lib/prism/node.rb#13455
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13460
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13470
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13465
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13475
  sig { params(params: T.untyped).returns(Prism::RedoNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#13460
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13485
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13490
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13509
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13519
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16578
# Flags for regular expression and match last line nodes.
module Prism::RegularExpressionFlags; end

# source://prism//lib/prism/node.rb#16595
Prism::RegularExpressionFlags::ASCII_8BIT = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#16592
Prism::RegularExpressionFlags::EUC_JP = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#16583
Prism::RegularExpressionFlags::EXTENDED = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#16580
Prism::RegularExpressionFlags::IGNORE_CASE = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#16586
Prism::RegularExpressionFlags::MULTI_LINE = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#16589
Prism::RegularExpressionFlags::ONCE = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#16601
Prism::RegularExpressionFlags::UTF_8 = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#16598
Prism::RegularExpressionFlags::WINDOWS_31J = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#13529
class Prism::RegularExpressionNode < ::Prism::Node
  include ::Prism::RegularExpressionOptions

  # source://prism//lib/prism/node.rb#13545
  sig do
    params(
      opening_loc: Prism::Location,
      content_loc: Prism::Location,
      closing_loc: Prism::Location,
      unescaped: String,
      flags: Integer,
      location: Prism::Location
    ).void
  end
  def initialize(opening_loc, content_loc, closing_loc, unescaped, flags, location); end

  # source://prism//lib/prism/node.rb#13555
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13635
  sig { returns(T::Boolean) }
  def ascii_8bit?; end

  # source://prism//lib/prism/node.rb#13560
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13605
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#13536
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#13570
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13565
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13600
  sig { returns(String) }
  def content; end

  # source://prism//lib/prism/node.rb#13533
  sig { returns(Prism::Location) }
  def content_loc; end

  # source://prism//lib/prism/node.rb#13575
  sig { params(params: T.untyped).returns(Prism::RegularExpressionNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#13560
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13590
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13630
  sig { returns(T::Boolean) }
  def euc_jp?; end

  # source://prism//lib/prism/node.rb#13615
  sig { returns(T::Boolean) }
  def extended?; end

  # source://prism//lib/prism/node.rb#13610
  sig { returns(T::Boolean) }
  def ignore_case?; end

  # source://prism//lib/prism/node.rb#13650
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13620
  sig { returns(T::Boolean) }
  def multi_line?; end

  # source://prism//lib/prism/node.rb#13625
  sig { returns(T::Boolean) }
  def once?; end

  # source://prism//lib/prism/node.rb#13595
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#13530
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#13675
  def type; end

  # source://prism//lib/prism/node.rb#13539
  sig { returns(String) }
  def unescaped; end

  # source://prism//lib/prism/node.rb#13645
  sig { returns(T::Boolean) }
  def utf_8?; end

  # source://prism//lib/prism/node.rb#13640
  sig { returns(T::Boolean) }
  def windows_31j?; end

  private

  # source://prism//lib/prism/node.rb#13542
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#13685
    def type; end
  end
end

# source://prism//lib/prism/node_ext.rb#6
module Prism::RegularExpressionOptions
  # source://prism//lib/prism/node_ext.rb#9
  def options; end
end

# source://prism//lib/prism/node.rb#13696
class Prism::RequiredKeywordParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13703
  sig { params(name: Symbol, name_loc: Prism::Location, location: Prism::Location).void }
  def initialize(name, name_loc, location); end

  # source://prism//lib/prism/node.rb#13710
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13715
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13725
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13720
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13730
  sig { params(params: T.untyped).returns(Prism::RequiredKeywordParameterNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#13715
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13742
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13747
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13697
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#13700
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#13768
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13778
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13789
class Prism::RequiredParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13793
  sig { params(name: Symbol, location: Prism::Location).void }
  def initialize(name, location); end

  # source://prism//lib/prism/node.rb#13799
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13804
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13814
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13809
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13819
  sig { params(params: T.untyped).returns(Prism::RequiredParameterNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#13804
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13830
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13835
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13790
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#13855
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13865
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13875
class Prism::RescueModifierNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13885
  sig do
    params(
      expression: Prism::Node,
      keyword_loc: Prism::Location,
      rescue_expression: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(expression, keyword_loc, rescue_expression, location); end

  # source://prism//lib/prism/node.rb#13893
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13902
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13912
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13907
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13917
  sig { params(params: T.untyped).returns(Prism::RescueModifierNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#13902
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13930
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13876
  sig { returns(Prism::Node) }
  def expression; end

  # source://prism//lib/prism/node.rb#13940
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13935
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#13879
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#13882
  sig { returns(Prism::Node) }
  def rescue_expression; end

  # source://prism//lib/prism/node.rb#13897
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#13964
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13974
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13990
class Prism::RescueNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14009
  sig do
    params(
      keyword_loc: Prism::Location,
      exceptions: T::Array[Prism::Node],
      operator_loc: T.nilable(Prism::Location),
      reference: T.nilable(Prism::Node),
      statements: T.nilable(Prism::StatementsNode),
      consequent: T.nilable(Prism::RescueNode),
      location: Prism::Location
    ).void
  end
  def initialize(keyword_loc, exceptions, operator_loc, reference, statements, consequent, location); end

  # source://prism//lib/prism/node.rb#14020
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14025
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14040
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14030
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14006
  sig { returns(T.nilable(Prism::RescueNode)) }
  def consequent; end

  # source://prism//lib/prism/node.rb#14045
  sig { params(params: T.untyped).returns(Prism::RescueNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#14025
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14061
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13994
  sig { returns(T::Array[Prism::Node]) }
  def exceptions; end

  # source://prism//lib/prism/node.rb#14076
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14066
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#13991
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#14071
  sig { returns(T.nilable(String)) }
  def operator; end

  # source://prism//lib/prism/node.rb#13997
  sig { returns(T.nilable(Prism::Location)) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#14000
  sig { returns(T.nilable(Prism::Node)) }
  def reference; end

  # source://prism//lib/prism/node.rb#14003
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#14116
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14126
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14137
class Prism::RestParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14147
  sig do
    params(
      name: T.nilable(Symbol),
      name_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(name, name_loc, operator_loc, location); end

  # source://prism//lib/prism/node.rb#14155
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14160
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14170
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14165
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14175
  sig { params(params: T.untyped).returns(Prism::RestParameterNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#14160
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14188
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#14198
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14138
  sig { returns(T.nilable(Symbol)) }
  def name; end

  # source://prism//lib/prism/node.rb#14141
  sig { returns(T.nilable(Prism::Location)) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#14193
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#14144
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#14224
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14234
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14244
class Prism::RetryNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14245
  sig { params(location: Prism::Location).void }
  def initialize(location); end

  # source://prism//lib/prism/node.rb#14250
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14255
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14265
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14260
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14270
  sig { params(params: T.untyped).returns(Prism::RetryNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#14255
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14280
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#14285
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14304
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14314
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14324
class Prism::ReturnNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14331
  sig do
    params(
      keyword_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      location: Prism::Location
    ).void
  end
  def initialize(keyword_loc, arguments, location); end

  # source://prism//lib/prism/node.rb#14338
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14328
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#14343
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14355
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14348
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14360
  sig { params(params: T.untyped).returns(Prism::ReturnNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#14343
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14372
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#14382
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14377
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#14325
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#14408
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14418
    def type; end
  end
end

# source://prism//lib/prism/ripper_compat.rb#13
class Prism::RipperCompat
  # source://prism//lib/prism/ripper_compat.rb#67
  def initialize(source); end

  # source://prism//lib/prism/ripper_compat.rb#64
  def column; end

  # source://prism//lib/prism/ripper_compat.rb#79
  def error?; end

  # source://prism//lib/prism/ripper_compat.rb#61
  def lineno; end

  # source://prism//lib/prism/ripper_compat.rb#84
  def parse; end

  # source://prism//lib/prism/ripper_compat.rb#58
  def source; end

  # source://prism//lib/prism/ripper_compat.rb#94
  def visit(node); end

  # source://prism//lib/prism/ripper_compat.rb#99
  def visit_call_node(node); end

  # source://prism//lib/prism/ripper_compat.rb#114
  def visit_integer_node(node); end

  # source://prism//lib/prism/ripper_compat.rb#142
  def visit_program_node(node); end

  # source://prism//lib/prism/ripper_compat.rb#120
  def visit_statements_node(node); end

  # source://prism//lib/prism/ripper_compat.rb#128
  def visit_token(node); end

  private

  # source://prism//lib/prism/ripper_compat.rb#180
  def _dispatch0; end

  # source://prism//lib/prism/ripper_compat.rb#181
  def _dispatch1(_); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def _dispatch2(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#183
  def _dispatch3(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#184
  def _dispatch4(_, _, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#185
  def _dispatch5(_, _, _, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#186
  def _dispatch7(_, _, _, _, _, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#168
  def bounds(location); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_BEGIN(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_CHAR(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_END(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on___end__(_); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_alias(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_alias_error(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_aref(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_aref_field(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_arg_ambiguous(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_arg_paren(_); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_args_add(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_args_add_block(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_args_add_star(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#180
  def on_args_forward; end

  # source://prism//lib/prism/ripper_compat.rb#180
  def on_args_new; end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_array(_); end

  # source://prism//lib/prism/ripper_compat.rb#184
  def on_aryptn(_, _, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_assign(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_assign_error(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_assoc_new(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_assoc_splat(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_assoclist_from_args(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_backref(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_backtick(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_bare_assoc_hash(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_begin(_); end

  # source://prism//lib/prism/ripper_compat.rb#183
  def on_binary(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_block_var(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_blockarg(_); end

  # source://prism//lib/prism/ripper_compat.rb#184
  def on_bodystmt(_, _, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_brace_block(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_break(_); end

  # source://prism//lib/prism/ripper_compat.rb#183
  def on_call(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_case(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#183
  def on_class(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_class_name_error(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_comma(_); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_command(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#184
  def on_command_call(_, _, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_comment(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_const(_); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_const_path_field(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_const_path_ref(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_const_ref(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_cvar(_); end

  # source://prism//lib/prism/ripper_compat.rb#183
  def on_def(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_defined(_); end

  # source://prism//lib/prism/ripper_compat.rb#185
  def on_defs(_, _, _, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_do_block(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_dot2(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_dot3(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_dyna_symbol(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_else(_); end

  # source://prism//lib/prism/ripper_compat.rb#183
  def on_elsif(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_embdoc(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_embdoc_beg(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_embdoc_end(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_embexpr_beg(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_embexpr_end(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_embvar(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_ensure(_); end

  # source://prism//lib/prism/ripper_compat.rb#180
  def on_excessed_comma; end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_fcall(_); end

  # source://prism//lib/prism/ripper_compat.rb#183
  def on_field(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_float(_); end

  # source://prism//lib/prism/ripper_compat.rb#184
  def on_fndptn(_, _, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#183
  def on_for(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_gvar(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_hash(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_heredoc_beg(_); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_heredoc_dedent(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_heredoc_end(_); end

  # source://prism//lib/prism/ripper_compat.rb#183
  def on_hshptn(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_ident(_); end

  # source://prism//lib/prism/ripper_compat.rb#183
  def on_if(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_if_mod(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#183
  def on_ifop(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_ignored_nl(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_ignored_sp(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_imaginary(_); end

  # source://prism//lib/prism/ripper_compat.rb#183
  def on_in(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_int(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_ivar(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_kw(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_kwrest_param(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_label(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_label_end(_); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_lambda(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_lbrace(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_lbracket(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_lparen(_); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_magic_comment(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_massign(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_method_add_arg(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_method_add_block(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_mlhs_add(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_mlhs_add_post(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_mlhs_add_star(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#180
  def on_mlhs_new; end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_mlhs_paren(_); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_module(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_mrhs_add(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_mrhs_add_star(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#180
  def on_mrhs_new; end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_mrhs_new_from_args(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_next(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_nl(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_nokw_param(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_op(_); end

  # source://prism//lib/prism/ripper_compat.rb#183
  def on_opassign(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_operator_ambiguous(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_param_error(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#186
  def on_params(_, _, _, _, _, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_paren(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_parse_error(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_period(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_program(_); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_qsymbols_add(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_qsymbols_beg(_); end

  # source://prism//lib/prism/ripper_compat.rb#180
  def on_qsymbols_new; end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_qwords_add(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_qwords_beg(_); end

  # source://prism//lib/prism/ripper_compat.rb#180
  def on_qwords_new; end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_rational(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_rbrace(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_rbracket(_); end

  # source://prism//lib/prism/ripper_compat.rb#180
  def on_redo; end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_regexp_add(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_regexp_beg(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_regexp_end(_); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_regexp_literal(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#180
  def on_regexp_new; end

  # source://prism//lib/prism/ripper_compat.rb#184
  def on_rescue(_, _, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_rescue_mod(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_rest_param(_); end

  # source://prism//lib/prism/ripper_compat.rb#180
  def on_retry; end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_return(_); end

  # source://prism//lib/prism/ripper_compat.rb#180
  def on_return0; end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_rparen(_); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_sclass(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_semicolon(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_sp(_); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_stmts_add(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#180
  def on_stmts_new; end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_string_add(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_string_concat(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#180
  def on_string_content; end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_string_dvar(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_string_embexpr(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_string_literal(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_super(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_symbeg(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_symbol(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_symbol_literal(_); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_symbols_add(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_symbols_beg(_); end

  # source://prism//lib/prism/ripper_compat.rb#180
  def on_symbols_new; end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_tlambda(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_tlambeg(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_top_const_field(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_top_const_ref(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_tstring_beg(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_tstring_content(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_tstring_end(_); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_unary(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_undef(_); end

  # source://prism//lib/prism/ripper_compat.rb#183
  def on_unless(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_unless_mod(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_until(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_until_mod(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_var_alias(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_var_field(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_var_ref(_); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_vcall(_); end

  # source://prism//lib/prism/ripper_compat.rb#180
  def on_void_stmt; end

  # source://prism//lib/prism/ripper_compat.rb#183
  def on_when(_, _, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_while(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_while_mod(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_word_add(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#180
  def on_word_new; end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_words_add(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_words_beg(_); end

  # source://prism//lib/prism/ripper_compat.rb#180
  def on_words_new; end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_words_sep(_); end

  # source://prism//lib/prism/ripper_compat.rb#182
  def on_xstring_add(_, _); end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_xstring_literal(_); end

  # source://prism//lib/prism/ripper_compat.rb#180
  def on_xstring_new; end

  # source://prism//lib/prism/ripper_compat.rb#181
  def on_yield(_); end

  # source://prism//lib/prism/ripper_compat.rb#180
  def on_yield0; end

  # source://prism//lib/prism/ripper_compat.rb#180
  def on_zsuper; end

  # source://prism//lib/prism/ripper_compat.rb#176
  def result; end

  class << self
    # source://prism//lib/prism/ripper_compat.rb#157
    def sexp(source); end

    # source://prism//lib/prism/ripper_compat.rb#152
    def sexp_raw(source); end
  end
end

# source://prism//lib/prism/ripper_compat.rb#16
class Prism::RipperCompat::SexpBuilder < ::Prism::RipperCompat
  private

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_BEGIN(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_CHAR(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_END(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on___end__(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_alias(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_alias_error(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_aref(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_aref_field(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_arg_ambiguous(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_arg_paren(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_args_add(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_args_add_block(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_args_add_star(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_args_forward(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_args_new(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_array(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_aryptn(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_assign(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_assign_error(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_assoc_new(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_assoc_splat(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_assoclist_from_args(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_backref(value); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_backtick(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_bare_assoc_hash(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_begin(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_binary(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_block_var(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_blockarg(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_bodystmt(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_brace_block(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_break(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_call(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_case(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_class(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_class_name_error(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_comma(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_command(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_command_call(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_comment(value); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_const(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_const_path_field(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_const_path_ref(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_const_ref(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_cvar(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_def(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_defined(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_defs(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_do_block(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_dot2(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_dot3(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_dyna_symbol(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_else(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_elsif(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_embdoc(value); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_embdoc_beg(value); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_embdoc_end(value); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_embexpr_beg(value); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_embexpr_end(value); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_embvar(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_ensure(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_excessed_comma(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_fcall(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_field(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_float(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_fndptn(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_for(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_gvar(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_hash(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_heredoc_beg(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_heredoc_dedent(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_heredoc_end(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_hshptn(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_ident(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_if(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_if_mod(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_ifop(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_ignored_nl(value); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_ignored_sp(value); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_imaginary(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_in(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_int(value); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_ivar(value); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_kw(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_kwrest_param(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_label(value); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_label_end(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_lambda(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_lbrace(value); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_lbracket(value); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_lparen(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_magic_comment(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_massign(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_method_add_arg(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_method_add_block(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_mlhs_add(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_mlhs_add_post(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_mlhs_add_star(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_mlhs_new(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_mlhs_paren(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_module(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_mrhs_add(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_mrhs_add_star(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_mrhs_new(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_mrhs_new_from_args(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_next(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_nl(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_nokw_param(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_op(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_opassign(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_operator_ambiguous(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_param_error(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_params(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_paren(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_parse_error(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_period(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_program(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_qsymbols_add(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_qsymbols_beg(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_qsymbols_new(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_qwords_add(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_qwords_beg(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_qwords_new(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_rational(value); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_rbrace(value); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_rbracket(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_redo(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_regexp_add(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_regexp_beg(value); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_regexp_end(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_regexp_literal(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_regexp_new(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_rescue(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_rescue_mod(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_rest_param(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_retry(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_return(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_return0(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_rparen(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_sclass(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_semicolon(value); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_sp(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_stmts_add(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_stmts_new(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_string_add(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_string_concat(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_string_content(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_string_dvar(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_string_embexpr(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_string_literal(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_super(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_symbeg(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_symbol(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_symbol_literal(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_symbols_add(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_symbols_beg(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_symbols_new(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_tlambda(value); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_tlambeg(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_top_const_field(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_top_const_ref(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_tstring_beg(value); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_tstring_content(value); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_tstring_end(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_unary(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_undef(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_unless(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_unless_mod(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_until(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_until_mod(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_var_alias(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_var_field(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_var_ref(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_vcall(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_void_stmt(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_when(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_while(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_while_mod(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_word_add(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_word_new(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_words_add(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_words_beg(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_words_new(*args); end

  # source://prism//lib/prism/ripper_compat.rb#26
  def on_words_sep(value); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_xstring_add(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_xstring_literal(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_xstring_new(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_yield(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_yield0(*args); end

  # source://prism//lib/prism/ripper_compat.rb#20
  def on_zsuper(*args); end
end

# source://prism//lib/prism/ripper_compat.rb#35
class Prism::RipperCompat::SexpBuilderPP < ::Prism::RipperCompat::SexpBuilder
  private

  # source://prism//lib/prism/ripper_compat.rb#38
  def _dispatch_event_new; end

  # source://prism//lib/prism/ripper_compat.rb#42
  def _dispatch_event_push(list, item); end

  # source://prism//lib/prism/ripper_compat.rb#42
  def on_args_add(list, item); end

  # source://prism//lib/prism/ripper_compat.rb#38
  def on_args_new; end

  # source://prism//lib/prism/ripper_compat.rb#42
  def on_mlhs_add(list, item); end

  # source://prism//lib/prism/ripper_compat.rb#38
  def on_mlhs_new; end

  # source://prism//lib/prism/ripper_compat.rb#42
  def on_mrhs_add(list, item); end

  # source://prism//lib/prism/ripper_compat.rb#38
  def on_mrhs_new; end

  # source://prism//lib/prism/ripper_compat.rb#42
  def on_qsymbols_add(list, item); end

  # source://prism//lib/prism/ripper_compat.rb#38
  def on_qsymbols_new; end

  # source://prism//lib/prism/ripper_compat.rb#42
  def on_qwords_add(list, item); end

  # source://prism//lib/prism/ripper_compat.rb#38
  def on_qwords_new; end

  # source://prism//lib/prism/ripper_compat.rb#42
  def on_regexp_add(list, item); end

  # source://prism//lib/prism/ripper_compat.rb#38
  def on_regexp_new; end

  # source://prism//lib/prism/ripper_compat.rb#42
  def on_stmts_add(list, item); end

  # source://prism//lib/prism/ripper_compat.rb#38
  def on_stmts_new; end

  # source://prism//lib/prism/ripper_compat.rb#42
  def on_string_add(list, item); end

  # source://prism//lib/prism/ripper_compat.rb#42
  def on_symbols_add(list, item); end

  # source://prism//lib/prism/ripper_compat.rb#38
  def on_symbols_new; end

  # source://prism//lib/prism/ripper_compat.rb#42
  def on_word_add(list, item); end

  # source://prism//lib/prism/ripper_compat.rb#38
  def on_word_new; end

  # source://prism//lib/prism/ripper_compat.rb#42
  def on_words_add(list, item); end

  # source://prism//lib/prism/ripper_compat.rb#38
  def on_words_new; end

  # source://prism//lib/prism/ripper_compat.rb#42
  def on_xstring_add(list, item); end

  # source://prism//lib/prism/ripper_compat.rb#38
  def on_xstring_new; end
end

# source://prism//lib/prism/node.rb#14428
class Prism::SelfNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14429
  sig { params(location: Prism::Location).void }
  def initialize(location); end

  # source://prism//lib/prism/node.rb#14434
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14439
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14449
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14444
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14454
  sig { params(params: T.untyped).returns(Prism::SelfNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#14439
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14464
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#14469
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14488
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14498
    def type; end
  end
end

# source://prism//lib/prism/serialize.rb#23
module Prism::Serialize
  class << self
    # source://prism//lib/prism/serialize.rb#37
    def load(input, serialized); end

    # source://prism//lib/prism/serialize.rb#49
    def load_tokens(source, serialized); end
  end
end

# source://prism//lib/prism/serialize.rb#53
class Prism::Serialize::Loader
  # source://prism//lib/prism/serialize.rb#58
  def initialize(source, serialized); end

  # source://prism//lib/prism/serialize.rb#55
  def constant_pool; end

  # source://prism//lib/prism/serialize.rb#55
  def constant_pool_offset; end

  # source://prism//lib/prism/serialize.rb#54
  def encoding; end

  # source://prism//lib/prism/serialize.rb#54
  def input; end

  # source://prism//lib/prism/serialize.rb#54
  def io; end

  # source://prism//lib/prism/serialize.rb#95
  def load_comments; end

  # source://prism//lib/prism/serialize.rb#82
  def load_encoding; end

  # source://prism//lib/prism/serialize.rb#86
  def load_force_encoding; end

  # source://prism//lib/prism/serialize.rb#73
  def load_header; end

  # source://prism//lib/prism/serialize.rb#105
  def load_metadata; end

  # source://prism//lib/prism/serialize.rb#140
  def load_nodes; end

  # source://prism//lib/prism/serialize.rb#153
  def load_result; end

  # source://prism//lib/prism/serialize.rb#91
  def load_start_line; end

  # source://prism//lib/prism/serialize.rb#113
  def load_tokens; end

  # source://prism//lib/prism/serialize.rb#126
  def load_tokens_result; end

  # source://prism//lib/prism/serialize.rb#54
  def serialized; end

  # source://prism//lib/prism/serialize.rb#55
  def source; end

  # source://prism//lib/prism/serialize.rb#56
  def start_line; end

  private

  # source://prism//lib/prism/serialize.rb#211
  def load_constant(index); end

  # source://prism//lib/prism/serialize.rb#187
  def load_embedded_string; end

  # source://prism//lib/prism/serialize.rb#203
  def load_location; end

  # source://prism//lib/prism/serialize.rb#242
  def load_node; end

  # source://prism//lib/prism/serialize.rb#236
  def load_optional_constant; end

  # source://prism//lib/prism/serialize.rb#207
  def load_optional_location; end

  # source://prism//lib/prism/serialize.rb#180
  def load_optional_node; end

  # source://prism//lib/prism/serialize.rb#232
  def load_required_constant; end

  # source://prism//lib/prism/serialize.rb#176
  def load_serialized_length; end

  # source://prism//lib/prism/serialize.rb#191
  def load_string; end

  # source://prism//lib/prism/serialize.rb#162
  def load_varint; end
end

# source://prism//lib/prism/serialize.rb#26
Prism::Serialize::MAJOR_VERSION = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/serialize.rb#30
Prism::Serialize::MINOR_VERSION = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/serialize.rb#34
Prism::Serialize::PATCH_VERSION = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/serialize.rb#1130
Prism::Serialize::TOKEN_TYPES = T.let(T.unsafe(nil), Array)

# source://prism//lib/prism/node.rb#14508
class Prism::SingletonClassNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14527
  sig do
    params(
      locals: T::Array[Symbol],
      class_keyword_loc: Prism::Location,
      operator_loc: Prism::Location,
      expression: Prism::Node,
      body: T.nilable(Prism::Node),
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(locals, class_keyword_loc, operator_loc, expression, body, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#14538
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14521
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#14543
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14582
  sig { returns(String) }
  def class_keyword; end

  # source://prism//lib/prism/node.rb#14512
  sig { returns(Prism::Location) }
  def class_keyword_loc; end

  # source://prism//lib/prism/node.rb#14556
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14548
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14561
  sig { params(params: T.untyped).returns(Prism::SingletonClassNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#14543
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14577
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#14592
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#14524
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#14518
  sig { returns(Prism::Node) }
  def expression; end

  # source://prism//lib/prism/node.rb#14597
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14509
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#14587
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#14515
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#14628
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14638
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#7
class Prism::Source
  # source://prism//lib/prism/parse_result.rb#20
  def initialize(source, start_line = T.unsafe(nil), offsets = T.unsafe(nil)); end

  # source://prism//lib/prism/parse_result.rb#45
  sig { params(value: Integer).returns(Integer) }
  def column(value); end

  # source://prism//lib/prism/parse_result.rb#34
  sig { params(value: Integer).returns(Integer) }
  def line(value); end

  # source://prism//lib/prism/parse_result.rb#40
  sig { params(value: Integer).returns(Integer) }
  def line_offset(value); end

  # source://prism//lib/prism/parse_result.rb#15
  sig { returns(T::Array[Integer]) }
  def offsets; end

  # source://prism//lib/prism/parse_result.rb#28
  sig { params(offset: Integer, length: Integer).returns(String) }
  def slice(offset, length); end

  # source://prism//lib/prism/parse_result.rb#9
  sig { returns(String) }
  def source; end

  # source://prism//lib/prism/parse_result.rb#12
  def start_line; end

  # source://prism//lib/prism/parse_result.rb#12
  def start_line=(_arg0); end

  private

  # source://prism//lib/prism/parse_result.rb#73
  def compute_offsets(code); end

  # source://prism//lib/prism/parse_result.rb#53
  def find_line(value); end
end

# source://prism//lib/prism/node.rb#14648
class Prism::SourceEncodingNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14649
  sig { params(location: Prism::Location).void }
  def initialize(location); end

  # source://prism//lib/prism/node.rb#14654
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14659
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14669
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14664
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14674
  sig { params(params: T.untyped).returns(Prism::SourceEncodingNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#14659
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14684
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#14689
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14708
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14718
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14728
class Prism::SourceFileNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14732
  sig { params(filepath: String, location: Prism::Location).void }
  def initialize(filepath, location); end

  # source://prism//lib/prism/node.rb#14738
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14743
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14753
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14748
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14758
  sig { params(params: T.untyped).returns(Prism::SourceFileNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#14743
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14769
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#14729
  sig { returns(String) }
  def filepath; end

  # source://prism//lib/prism/node.rb#14774
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14794
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14804
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14814
class Prism::SourceLineNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14815
  sig { params(location: Prism::Location).void }
  def initialize(location); end

  # source://prism//lib/prism/node.rb#14820
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14825
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14835
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14830
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14840
  sig { params(params: T.untyped).returns(Prism::SourceLineNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#14825
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14850
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#14855
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14874
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14884
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14894
class Prism::SplatNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14901
  sig { params(operator_loc: Prism::Location, expression: T.nilable(Prism::Node), location: Prism::Location).void }
  def initialize(operator_loc, expression, location); end

  # source://prism//lib/prism/node.rb#14908
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14913
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14925
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14918
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14930
  sig { params(params: T.untyped).returns(Prism::SplatNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#14913
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14942
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#14898
  sig { returns(T.nilable(Prism::Node)) }
  def expression; end

  # source://prism//lib/prism/node.rb#14952
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14947
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#14895
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#14978
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14988
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14998
class Prism::StatementsNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15002
  sig { params(body: T::Array[Prism::Node], location: Prism::Location).void }
  def initialize(body, location); end

  # source://prism//lib/prism/node.rb#15008
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14999
  sig { returns(T::Array[Prism::Node]) }
  def body; end

  # source://prism//lib/prism/node.rb#15013
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15023
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15018
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15028
  sig { params(params: T.untyped).returns(Prism::StatementsNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#15013
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15039
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15044
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15064
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15074
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15084
class Prism::StringConcatNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15091
  sig { params(left: Prism::Node, right: Prism::Node, location: Prism::Location).void }
  def initialize(left, right, location); end

  # source://prism//lib/prism/node.rb#15098
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15103
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15113
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15108
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15118
  sig { params(params: T.untyped).returns(Prism::StringConcatNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#15103
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15130
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15135
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15085
  sig { returns(Prism::Node) }
  def left; end

  # source://prism//lib/prism/node.rb#15088
  sig { returns(Prism::Node) }
  def right; end

  # source://prism//lib/prism/node.rb#15158
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15168
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16605
# Flags for string nodes.
module Prism::StringFlags; end

# source://prism//lib/prism/node.rb#16607
Prism::StringFlags::FROZEN = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#15185
class Prism::StringNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15201
  sig do
    params(
      flags: Integer,
      opening_loc: T.nilable(Prism::Location),
      content_loc: Prism::Location,
      closing_loc: T.nilable(Prism::Location),
      unescaped: String,
      location: Prism::Location
    ).void
  end
  def initialize(flags, opening_loc, content_loc, closing_loc, unescaped, location); end

  # source://prism//lib/prism/node.rb#15211
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15216
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15266
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#15195
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#15226
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15221
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15261
  sig { returns(String) }
  def content; end

  # source://prism//lib/prism/node.rb#15192
  sig { returns(Prism::Location) }
  def content_loc; end

  # source://prism//lib/prism/node.rb#15231
  sig { params(params: T.untyped).returns(Prism::StringNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#15216
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15246
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15251
  sig { returns(T::Boolean) }
  def frozen?; end

  # source://prism//lib/prism/node.rb#15271
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15256
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#15189
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#15296
  def type; end

  # source://prism//lib/prism/node.rb#15198
  sig { returns(String) }
  def unescaped; end

  private

  # source://prism//lib/prism/node.rb#15186
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#15306
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15319
class Prism::SuperNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15335
  sig do
    params(
      keyword_loc: Prism::Location,
      lparen_loc: T.nilable(Prism::Location),
      arguments: T.nilable(Prism::ArgumentsNode),
      rparen_loc: T.nilable(Prism::Location),
      block: T.nilable(Prism::Node),
      location: Prism::Location
    ).void
  end
  def initialize(keyword_loc, lparen_loc, arguments, rparen_loc, block, location); end

  # source://prism//lib/prism/node.rb#15345
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15326
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#15332
  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  # source://prism//lib/prism/node.rb#15350
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15363
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15355
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15368
  sig { params(params: T.untyped).returns(Prism::SuperNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#15350
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15383
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15403
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15388
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#15320
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#15393
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#15323
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#15398
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#15329
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#15437
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15447
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15460
class Prism::SymbolNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15473
  sig do
    params(
      opening_loc: T.nilable(Prism::Location),
      value_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      unescaped: String,
      location: Prism::Location
    ).void
  end
  def initialize(opening_loc, value_loc, closing_loc, unescaped, location); end

  # source://prism//lib/prism/node.rb#15482
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15487
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15531
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#15467
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#15497
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15492
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15502
  sig { params(params: T.untyped).returns(Prism::SymbolNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#15487
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15516
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15536
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15521
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#15461
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#15559
  def type; end

  # source://prism//lib/prism/node.rb#15470
  sig { returns(String) }
  def unescaped; end

  # source://prism//lib/prism/node.rb#15526
  sig { returns(T.nilable(String)) }
  def value; end

  # source://prism//lib/prism/node.rb#15464
  sig { returns(T.nilable(Prism::Location)) }
  def value_loc; end

  class << self
    # source://prism//lib/prism/node.rb#15569
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#385
class Prism::Token
  # source://prism//lib/prism/parse_result.rb#396
  sig { params(type: T.untyped, value: String, location: Prism::Location).void }
  def initialize(type, value, location); end

  # source://prism//lib/prism/parse_result.rb#423
  sig { params(other: T.untyped).returns(T::Boolean) }
  def ==(other); end

  # source://prism//lib/prism/parse_result.rb#403
  sig { params(keys: T.untyped).returns(T.untyped) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#393
  sig { returns(Prism::Location) }
  def location; end

  # source://prism//lib/prism/parse_result.rb#408
  sig { params(q: T.untyped).returns(T.untyped) }
  def pretty_print(q); end

  # source://prism//lib/prism/parse_result.rb#387
  sig { returns(T.untyped) }
  def type; end

  # source://prism//lib/prism/parse_result.rb#390
  sig { returns(String) }
  def value; end
end

# source://prism//lib/prism/node.rb#15579
class Prism::TrueNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15580
  sig { params(location: Prism::Location).void }
  def initialize(location); end

  # source://prism//lib/prism/node.rb#15585
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15590
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15600
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15595
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15605
  sig { params(params: T.untyped).returns(Prism::TrueNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#15590
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15615
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15620
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15639
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15649
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15659
class Prism::UndefNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15666
  sig { params(names: T::Array[Prism::Node], keyword_loc: Prism::Location, location: Prism::Location).void }
  def initialize(names, keyword_loc, location); end

  # source://prism//lib/prism/node.rb#15673
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15678
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15688
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15683
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15693
  sig { params(params: T.untyped).returns(Prism::UndefNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#15678
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15705
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15715
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15710
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#15663
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#15660
  sig { returns(T::Array[Prism::Node]) }
  def names; end

  # source://prism//lib/prism/node.rb#15736
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15746
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15759
class Prism::UnlessNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15775
  sig do
    params(
      keyword_loc: Prism::Location,
      predicate: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      consequent: T.nilable(Prism::ElseNode),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(keyword_loc, predicate, statements, consequent, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#15785
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15794
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15808
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15799
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15769
  sig { returns(T.nilable(Prism::ElseNode)) }
  def consequent; end

  # source://prism//lib/prism/node.rb#15813
  sig { params(params: T.untyped).returns(Prism::UnlessNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#15794
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15828
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15838
  sig { returns(T.nilable(String)) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#15772
  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#15843
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15833
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#15760
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#15763
  sig { returns(Prism::Node) }
  def predicate; end

  # source://prism//lib/prism/node.rb#15789
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#15766
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#15878
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15888
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15901
class Prism::UntilNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15917
  sig do
    params(
      keyword_loc: Prism::Location,
      closing_loc: T.nilable(Prism::Location),
      predicate: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      flags: Integer,
      location: Prism::Location
    ).void
  end
  def initialize(keyword_loc, closing_loc, predicate, statements, flags, location); end

  # source://prism//lib/prism/node.rb#15927
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15984
  sig { returns(T::Boolean) }
  def begin_modifier?; end

  # source://prism//lib/prism/node.rb#15936
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15979
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#15905
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#15949
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15941
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15954
  sig { params(params: T.untyped).returns(Prism::UntilNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#15936
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15969
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15989
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15974
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#15902
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#15908
  sig { returns(Prism::Node) }
  def predicate; end

  # source://prism//lib/prism/node.rb#15931
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#15911
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#16020
  def type; end

  private

  # source://prism//lib/prism/node.rb#15914
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#16030
    def type; end
  end
end

Prism::VERSION = T.let(T.unsafe(nil), String)

# source://prism//lib/prism/visitor.rb#51
class Prism::Visitor < ::Prism::BasicVisitor
  # source://prism//lib/prism/visitor.rb#26
  # Visit a AliasGlobalVariableNode node
  sig { params(node: Prism::AliasGlobalVariableNode).void }
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a AliasMethodNode node
  sig { params(node: Prism::AliasMethodNode).void }
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a AlternationPatternNode node
  sig { params(node: Prism::AlternationPatternNode).void }
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a AndNode node
  sig { params(node: Prism::AndNode).void }
  def visit_and_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ArgumentsNode node
  sig { params(node: Prism::ArgumentsNode).void }
  def visit_arguments_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ArrayNode node
  sig { params(node: Prism::ArrayNode).void }
  def visit_array_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ArrayPatternNode node
  sig { params(node: Prism::ArrayPatternNode).void }
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a AssocNode node
  sig { params(node: Prism::AssocNode).void }
  def visit_assoc_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a AssocSplatNode node
  sig { params(node: Prism::AssocSplatNode).void }
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a BackReferenceReadNode node
  sig { params(node: Prism::BackReferenceReadNode).void }
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a BeginNode node
  sig { params(node: Prism::BeginNode).void }
  def visit_begin_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a BlockArgumentNode node
  sig { params(node: Prism::BlockArgumentNode).void }
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a BlockLocalVariableNode node
  sig { params(node: Prism::BlockLocalVariableNode).void }
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a BlockNode node
  sig { params(node: Prism::BlockNode).void }
  def visit_block_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a BlockParameterNode node
  sig { params(node: Prism::BlockParameterNode).void }
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a BlockParametersNode node
  sig { params(node: Prism::BlockParametersNode).void }
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a BreakNode node
  sig { params(node: Prism::BreakNode).void }
  def visit_break_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a CallAndWriteNode node
  sig { params(node: Prism::CallAndWriteNode).void }
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a CallNode node
  sig { params(node: Prism::CallNode).void }
  def visit_call_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a CallOperatorWriteNode node
  sig { params(node: Prism::CallOperatorWriteNode).void }
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a CallOrWriteNode node
  sig { params(node: Prism::CallOrWriteNode).void }
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a CapturePatternNode node
  sig { params(node: Prism::CapturePatternNode).void }
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a CaseNode node
  sig { params(node: Prism::CaseNode).void }
  def visit_case_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ClassNode node
  sig { params(node: Prism::ClassNode).void }
  def visit_class_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ClassVariableAndWriteNode node
  sig { params(node: Prism::ClassVariableAndWriteNode).void }
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ClassVariableOperatorWriteNode node
  sig { params(node: Prism::ClassVariableOperatorWriteNode).void }
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ClassVariableOrWriteNode node
  sig { params(node: Prism::ClassVariableOrWriteNode).void }
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ClassVariableReadNode node
  sig { params(node: Prism::ClassVariableReadNode).void }
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ClassVariableTargetNode node
  sig { params(node: Prism::ClassVariableTargetNode).void }
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ClassVariableWriteNode node
  sig { params(node: Prism::ClassVariableWriteNode).void }
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantAndWriteNode node
  sig { params(node: Prism::ConstantAndWriteNode).void }
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantOperatorWriteNode node
  sig { params(node: Prism::ConstantOperatorWriteNode).void }
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantOrWriteNode node
  sig { params(node: Prism::ConstantOrWriteNode).void }
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantPathAndWriteNode node
  sig { params(node: Prism::ConstantPathAndWriteNode).void }
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantPathNode node
  sig { params(node: Prism::ConstantPathNode).void }
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantPathOperatorWriteNode node
  sig { params(node: Prism::ConstantPathOperatorWriteNode).void }
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantPathOrWriteNode node
  sig { params(node: Prism::ConstantPathOrWriteNode).void }
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantPathTargetNode node
  sig { params(node: Prism::ConstantPathTargetNode).void }
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantPathWriteNode node
  sig { params(node: Prism::ConstantPathWriteNode).void }
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantReadNode node
  sig { params(node: Prism::ConstantReadNode).void }
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantTargetNode node
  sig { params(node: Prism::ConstantTargetNode).void }
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantWriteNode node
  sig { params(node: Prism::ConstantWriteNode).void }
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a DefNode node
  sig { params(node: Prism::DefNode).void }
  def visit_def_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a DefinedNode node
  sig { params(node: Prism::DefinedNode).void }
  def visit_defined_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ElseNode node
  sig { params(node: Prism::ElseNode).void }
  def visit_else_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a EmbeddedStatementsNode node
  sig { params(node: Prism::EmbeddedStatementsNode).void }
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a EmbeddedVariableNode node
  sig { params(node: Prism::EmbeddedVariableNode).void }
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a EnsureNode node
  sig { params(node: Prism::EnsureNode).void }
  def visit_ensure_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a FalseNode node
  sig { params(node: Prism::FalseNode).void }
  def visit_false_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a FindPatternNode node
  sig { params(node: Prism::FindPatternNode).void }
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a FlipFlopNode node
  sig { params(node: Prism::FlipFlopNode).void }
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a FloatNode node
  sig { params(node: Prism::FloatNode).void }
  def visit_float_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ForNode node
  sig { params(node: Prism::ForNode).void }
  def visit_for_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ForwardingArgumentsNode node
  sig { params(node: Prism::ForwardingArgumentsNode).void }
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ForwardingParameterNode node
  sig { params(node: Prism::ForwardingParameterNode).void }
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ForwardingSuperNode node
  sig { params(node: Prism::ForwardingSuperNode).void }
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a GlobalVariableAndWriteNode node
  sig { params(node: Prism::GlobalVariableAndWriteNode).void }
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a GlobalVariableOperatorWriteNode node
  sig { params(node: Prism::GlobalVariableOperatorWriteNode).void }
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a GlobalVariableOrWriteNode node
  sig { params(node: Prism::GlobalVariableOrWriteNode).void }
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a GlobalVariableReadNode node
  sig { params(node: Prism::GlobalVariableReadNode).void }
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a GlobalVariableTargetNode node
  sig { params(node: Prism::GlobalVariableTargetNode).void }
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a GlobalVariableWriteNode node
  sig { params(node: Prism::GlobalVariableWriteNode).void }
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a HashNode node
  sig { params(node: Prism::HashNode).void }
  def visit_hash_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a HashPatternNode node
  sig { params(node: Prism::HashPatternNode).void }
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a IfNode node
  sig { params(node: Prism::IfNode).void }
  def visit_if_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ImaginaryNode node
  sig { params(node: Prism::ImaginaryNode).void }
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ImplicitNode node
  sig { params(node: Prism::ImplicitNode).void }
  def visit_implicit_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InNode node
  sig { params(node: Prism::InNode).void }
  def visit_in_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a IndexAndWriteNode node
  sig { params(node: Prism::IndexAndWriteNode).void }
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a IndexOperatorWriteNode node
  sig { params(node: Prism::IndexOperatorWriteNode).void }
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a IndexOrWriteNode node
  sig { params(node: Prism::IndexOrWriteNode).void }
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InstanceVariableAndWriteNode node
  sig { params(node: Prism::InstanceVariableAndWriteNode).void }
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InstanceVariableOperatorWriteNode node
  sig { params(node: Prism::InstanceVariableOperatorWriteNode).void }
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InstanceVariableOrWriteNode node
  sig { params(node: Prism::InstanceVariableOrWriteNode).void }
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InstanceVariableReadNode node
  sig { params(node: Prism::InstanceVariableReadNode).void }
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InstanceVariableTargetNode node
  sig { params(node: Prism::InstanceVariableTargetNode).void }
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InstanceVariableWriteNode node
  sig { params(node: Prism::InstanceVariableWriteNode).void }
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a IntegerNode node
  sig { params(node: Prism::IntegerNode).void }
  def visit_integer_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InterpolatedMatchLastLineNode node
  sig { params(node: Prism::InterpolatedMatchLastLineNode).void }
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InterpolatedRegularExpressionNode node
  sig { params(node: Prism::InterpolatedRegularExpressionNode).void }
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InterpolatedStringNode node
  sig { params(node: Prism::InterpolatedStringNode).void }
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InterpolatedSymbolNode node
  sig { params(node: Prism::InterpolatedSymbolNode).void }
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InterpolatedXStringNode node
  sig { params(node: Prism::InterpolatedXStringNode).void }
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a KeywordHashNode node
  sig { params(node: Prism::KeywordHashNode).void }
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a KeywordRestParameterNode node
  sig { params(node: Prism::KeywordRestParameterNode).void }
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a LambdaNode node
  sig { params(node: Prism::LambdaNode).void }
  def visit_lambda_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a LocalVariableAndWriteNode node
  sig { params(node: Prism::LocalVariableAndWriteNode).void }
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a LocalVariableOperatorWriteNode node
  sig { params(node: Prism::LocalVariableOperatorWriteNode).void }
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a LocalVariableOrWriteNode node
  sig { params(node: Prism::LocalVariableOrWriteNode).void }
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a LocalVariableReadNode node
  sig { params(node: Prism::LocalVariableReadNode).void }
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a LocalVariableTargetNode node
  sig { params(node: Prism::LocalVariableTargetNode).void }
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a LocalVariableWriteNode node
  sig { params(node: Prism::LocalVariableWriteNode).void }
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a MatchLastLineNode node
  sig { params(node: Prism::MatchLastLineNode).void }
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a MatchPredicateNode node
  sig { params(node: Prism::MatchPredicateNode).void }
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a MatchRequiredNode node
  sig { params(node: Prism::MatchRequiredNode).void }
  def visit_match_required_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a MatchWriteNode node
  sig { params(node: Prism::MatchWriteNode).void }
  def visit_match_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a MissingNode node
  sig { params(node: Prism::MissingNode).void }
  def visit_missing_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ModuleNode node
  sig { params(node: Prism::ModuleNode).void }
  def visit_module_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a MultiTargetNode node
  sig { params(node: Prism::MultiTargetNode).void }
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a MultiWriteNode node
  sig { params(node: Prism::MultiWriteNode).void }
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a NextNode node
  sig { params(node: Prism::NextNode).void }
  def visit_next_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a NilNode node
  sig { params(node: Prism::NilNode).void }
  def visit_nil_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a NoKeywordsParameterNode node
  sig { params(node: Prism::NoKeywordsParameterNode).void }
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a NumberedReferenceReadNode node
  sig { params(node: Prism::NumberedReferenceReadNode).void }
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a OptionalKeywordParameterNode node
  sig { params(node: Prism::OptionalKeywordParameterNode).void }
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a OptionalParameterNode node
  sig { params(node: Prism::OptionalParameterNode).void }
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a OrNode node
  sig { params(node: Prism::OrNode).void }
  def visit_or_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ParametersNode node
  sig { params(node: Prism::ParametersNode).void }
  def visit_parameters_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ParenthesesNode node
  sig { params(node: Prism::ParenthesesNode).void }
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a PinnedExpressionNode node
  sig { params(node: Prism::PinnedExpressionNode).void }
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a PinnedVariableNode node
  sig { params(node: Prism::PinnedVariableNode).void }
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a PostExecutionNode node
  sig { params(node: Prism::PostExecutionNode).void }
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a PreExecutionNode node
  sig { params(node: Prism::PreExecutionNode).void }
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ProgramNode node
  sig { params(node: Prism::ProgramNode).void }
  def visit_program_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RangeNode node
  sig { params(node: Prism::RangeNode).void }
  def visit_range_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RationalNode node
  sig { params(node: Prism::RationalNode).void }
  def visit_rational_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RedoNode node
  sig { params(node: Prism::RedoNode).void }
  def visit_redo_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RegularExpressionNode node
  sig { params(node: Prism::RegularExpressionNode).void }
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RequiredKeywordParameterNode node
  sig { params(node: Prism::RequiredKeywordParameterNode).void }
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RequiredParameterNode node
  sig { params(node: Prism::RequiredParameterNode).void }
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RescueModifierNode node
  sig { params(node: Prism::RescueModifierNode).void }
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RescueNode node
  sig { params(node: Prism::RescueNode).void }
  def visit_rescue_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RestParameterNode node
  sig { params(node: Prism::RestParameterNode).void }
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RetryNode node
  sig { params(node: Prism::RetryNode).void }
  def visit_retry_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ReturnNode node
  sig { params(node: Prism::ReturnNode).void }
  def visit_return_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a SelfNode node
  sig { params(node: Prism::SelfNode).void }
  def visit_self_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a SingletonClassNode node
  sig { params(node: Prism::SingletonClassNode).void }
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a SourceEncodingNode node
  sig { params(node: Prism::SourceEncodingNode).void }
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a SourceFileNode node
  sig { params(node: Prism::SourceFileNode).void }
  def visit_source_file_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a SourceLineNode node
  sig { params(node: Prism::SourceLineNode).void }
  def visit_source_line_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a SplatNode node
  sig { params(node: Prism::SplatNode).void }
  def visit_splat_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a StatementsNode node
  sig { params(node: Prism::StatementsNode).void }
  def visit_statements_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a StringConcatNode node
  sig { params(node: Prism::StringConcatNode).void }
  def visit_string_concat_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a StringNode node
  sig { params(node: Prism::StringNode).void }
  def visit_string_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a SuperNode node
  sig { params(node: Prism::SuperNode).void }
  def visit_super_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a SymbolNode node
  sig { params(node: Prism::SymbolNode).void }
  def visit_symbol_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a TrueNode node
  sig { params(node: Prism::TrueNode).void }
  def visit_true_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a UndefNode node
  sig { params(node: Prism::UndefNode).void }
  def visit_undef_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a UnlessNode node
  sig { params(node: Prism::UnlessNode).void }
  def visit_unless_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a UntilNode node
  sig { params(node: Prism::UntilNode).void }
  def visit_until_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a WhenNode node
  sig { params(node: Prism::WhenNode).void }
  def visit_when_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a WhileNode node
  sig { params(node: Prism::WhileNode).void }
  def visit_while_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a XStringNode node
  sig { params(node: Prism::XStringNode).void }
  def visit_x_string_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a YieldNode node
  sig { params(node: Prism::YieldNode).void }
  def visit_yield_node(node); end
end

# source://prism//lib/prism/node.rb#16042
class Prism::WhenNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16052
  sig do
    params(
      keyword_loc: Prism::Location,
      conditions: T::Array[Prism::Node],
      statements: T.nilable(Prism::StatementsNode),
      location: Prism::Location
    ).void
  end
  def initialize(keyword_loc, conditions, statements, location); end

  # source://prism//lib/prism/node.rb#16060
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16065
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16078
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16070
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16046
  sig { returns(T::Array[Prism::Node]) }
  def conditions; end

  # source://prism//lib/prism/node.rb#16083
  sig { params(params: T.untyped).returns(Prism::WhenNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#16065
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16096
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#16106
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16101
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#16043
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#16049
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#16133
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#16143
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16156
class Prism::WhileNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16172
  sig do
    params(
      keyword_loc: Prism::Location,
      closing_loc: T.nilable(Prism::Location),
      predicate: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      flags: Integer,
      location: Prism::Location
    ).void
  end
  def initialize(keyword_loc, closing_loc, predicate, statements, flags, location); end

  # source://prism//lib/prism/node.rb#16182
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16239
  sig { returns(T::Boolean) }
  def begin_modifier?; end

  # source://prism//lib/prism/node.rb#16191
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16234
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#16160
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#16204
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16196
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16209
  sig { params(params: T.untyped).returns(Prism::WhileNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#16191
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16224
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#16244
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16229
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#16157
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#16163
  sig { returns(Prism::Node) }
  def predicate; end

  # source://prism//lib/prism/node.rb#16186
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#16166
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#16275
  def type; end

  private

  # source://prism//lib/prism/node.rb#16169
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#16285
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16295
class Prism::XStringNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16308
  sig do
    params(
      opening_loc: Prism::Location,
      content_loc: Prism::Location,
      closing_loc: Prism::Location,
      unescaped: String,
      location: Prism::Location
    ).void
  end
  def initialize(opening_loc, content_loc, closing_loc, unescaped, location); end

  # source://prism//lib/prism/node.rb#16317
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16322
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16366
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#16302
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#16332
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16327
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16361
  sig { returns(String) }
  def content; end

  # source://prism//lib/prism/node.rb#16299
  sig { returns(Prism::Location) }
  def content_loc; end

  # source://prism//lib/prism/node.rb#16337
  sig { params(params: T.untyped).returns(Prism::XStringNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#16322
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16351
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#16371
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16356
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#16296
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#16394
  def type; end

  # source://prism//lib/prism/node.rb#16305
  sig { returns(String) }
  def unescaped; end

  class << self
    # source://prism//lib/prism/node.rb#16404
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16414
class Prism::YieldNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16427
  sig do
    params(
      keyword_loc: Prism::Location,
      lparen_loc: T.nilable(Prism::Location),
      arguments: T.nilable(Prism::ArgumentsNode),
      rparen_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(keyword_loc, lparen_loc, arguments, rparen_loc, location); end

  # source://prism//lib/prism/node.rb#16436
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16421
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#16441
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16453
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16446
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16458
  sig { params(params: T.untyped).returns(Prism::YieldNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#16441
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16472
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#16492
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16477
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#16415
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#16482
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#16418
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#16487
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#16424
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#16520
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#16530
    def type; end
  end
end
