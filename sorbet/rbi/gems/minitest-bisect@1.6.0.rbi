# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `minitest-bisect` gem.
# Please instead update this file by running `bin/tapioca gem minitest-bisect`.

# source://minitest-bisect//lib/minitest/find_minimal_combination.rb#106
class Array
  include ::Enumerable

  # source://minitest-bisect//lib/minitest/find_minimal_combination.rb#110
  def find_minimal_combination(&test); end

  # source://minitest-bisect//lib/minitest/find_minimal_combination.rb#114
  def find_minimal_combination_and_count; end
end

# source://minitest-bisect//lib/minitest/find_minimal_combination.rb#5
class ComboFinder
  # source://minitest-bisect//lib/minitest/find_minimal_combination.rb#86
  def cache_result(result, data, cache); end

  # source://minitest-bisect//lib/minitest/find_minimal_combination.rb#82
  def d(s = T.unsafe(nil)); end

  # source://minitest-bisect//lib/minitest/find_minimal_combination.rb#27
  def find_minimal_combination(ary); end
end

# source://minitest-bisect//lib/minitest/find_minimal_combination.rb#3
module Minitest
  class << self
    # source://minitest/5.18.0/lib/minitest.rb#173
    def __run(reporter, options); end

    # source://minitest/5.18.0/lib/minitest.rb#94
    def after_run(&block); end

    # source://minitest/5.18.0/lib/minitest.rb#66
    def autorun; end

    # source://minitest/5.18.0/lib/minitest.rb#19
    def backtrace_filter; end

    # source://minitest/5.18.0/lib/minitest.rb#19
    def backtrace_filter=(_arg0); end

    # source://minitest/5.18.0/lib/minitest.rb#18
    def cattr_accessor(name); end

    # source://minitest/5.18.0/lib/minitest.rb#1059
    def clock_time; end

    # source://minitest/5.18.0/lib/minitest.rb#19
    def extensions; end

    # source://minitest/5.18.0/lib/minitest.rb#19
    def extensions=(_arg0); end

    # source://minitest/5.18.0/lib/minitest.rb#264
    def filter_backtrace(bt); end

    # source://minitest/5.18.0/lib/minitest.rb#19
    def info_signal; end

    # source://minitest/5.18.0/lib/minitest.rb#19
    def info_signal=(_arg0); end

    # source://minitest/5.18.0/lib/minitest.rb#98
    def init_plugins(options); end

    # source://minitest/5.18.0/lib/minitest.rb#105
    def load_plugins; end

    # source://minitest/5.18.0/lib/minitest.rb#19
    def parallel_executor; end

    # source://minitest/5.18.0/lib/minitest.rb#19
    def parallel_executor=(_arg0); end

    # source://minitest/5.18.0/lib/minitest.rb#186
    def process_args(args = T.unsafe(nil)); end

    # source://minitest/5.18.0/lib/minitest.rb#19
    def reporter; end

    # source://minitest/5.18.0/lib/minitest.rb#19
    def reporter=(_arg0); end

    # source://minitest/5.18.0/lib/minitest.rb#140
    def run(args = T.unsafe(nil)); end

    # source://minitest/5.18.0/lib/minitest.rb#1050
    def run_one_method(klass, method_name); end

    # source://minitest/5.18.0/lib/minitest.rb#19
    def seed; end

    # source://minitest/5.18.0/lib/minitest.rb#19
    def seed=(_arg0); end
  end
end

# source://minitest-bisect//lib/minitest/bisect.rb#7
class Minitest::Bisect
  # source://minitest-bisect//lib/minitest/bisect.rb#64
  def initialize; end

  # source://minitest-bisect//lib/minitest/bisect.rb#98
  def bisect_methods(cmd); end

  # source://minitest-bisect//lib/minitest/bisect.rb#154
  def build_files_cmd(culprits, rb, mt); end

  # source://minitest-bisect//lib/minitest/bisect.rb#186
  def build_methods_cmd(cmd, culprits = T.unsafe(nil), bad = T.unsafe(nil)); end

  # source://minitest-bisect//lib/minitest/bisect.rb#162
  def build_re(bad); end

  # source://minitest-bisect//lib/minitest/bisect.rb#54
  def culprits; end

  # source://minitest-bisect//lib/minitest/bisect.rb#54
  def culprits=(_arg0); end

  # source://minitest-bisect//lib/minitest/bisect.rb#54
  def failures; end

  # source://minitest-bisect//lib/minitest/bisect.rb#54
  def failures=(_arg0); end

  # source://minitest-bisect//lib/minitest/bisect.rb#146
  def map_failures; end

  # source://minitest-bisect//lib/minitest/bisect.rb#211
  def minitest_result(file, klass, method, fails, assertions, time); end

  # source://minitest-bisect//lib/minitest/bisect.rb#207
  def minitest_start; end

  # source://minitest-bisect//lib/minitest/bisect.rb#182
  def re_escape(str); end

  # source://minitest-bisect//lib/minitest/bisect.rb#69
  def reset; end

  # source://minitest-bisect//lib/minitest/bisect.rb#76
  def run(args); end

  # source://minitest-bisect//lib/minitest/bisect.rb#54
  def seen_bad; end

  # source://minitest-bisect//lib/minitest/bisect.rb#54
  def seen_bad=(_arg0); end

  # source://minitest-bisect//lib/minitest/bisect.rb#54
  def tainted; end

  # source://minitest-bisect//lib/minitest/bisect.rb#54
  def tainted=(_arg0); end

  # source://minitest-bisect//lib/minitest/bisect.rb#54
  def tainted?; end

  # source://minitest-bisect//lib/minitest/bisect.rb#139
  def time_it(prompt, cmd); end

  class << self
    # source://minitest-bisect//lib/minitest/bisect.rb#57
    def run(files); end
  end
end

# source://minitest-bisect//lib/minitest/bisect.rb#10
class Minitest::Bisect::PathExpander < ::PathExpander
  # source://minitest-bisect//lib/minitest/bisect.rb#15
  def initialize(args = T.unsafe(nil)); end

  # source://minitest-bisect//lib/minitest/bisect.rb#25
  def process_flags(flags); end

  # source://minitest-bisect//lib/minitest/bisect.rb#13
  def rb_flags; end

  # source://minitest-bisect//lib/minitest/bisect.rb#13
  def rb_flags=(_arg0); end
end

# source://minitest-bisect//lib/minitest/bisect.rb#11
Minitest::Bisect::PathExpander::TEST_GLOB = T.let(T.unsafe(nil), String)

# source://minitest-bisect//lib/minitest/bisect.rb#49
Minitest::Bisect::RUBY = T.let(T.unsafe(nil), String)

# source://minitest-bisect//lib/minitest/bisect.rb#42
Minitest::Bisect::SHH = T.let(T.unsafe(nil), String)

# source://minitest-bisect//lib/minitest/bisect.rb#8
Minitest::Bisect::VERSION = T.let(T.unsafe(nil), String)
