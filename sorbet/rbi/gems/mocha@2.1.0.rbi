# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `mocha` gem.
# Please instead update this file by running `bin/tapioca gem mocha`.

# source://mocha//lib/mocha/inspect.rb#45
class Array
  include ::Enumerable
  include ::Mocha::Inspect::ArrayMethods
end

# source://mocha//lib/mocha/inspect.rb#57
class Date
  include ::Comparable
  include ::Mocha::Inspect::DateMethods
end

# source://mocha//lib/mocha/inspect.rb#49
class Hash
  include ::Enumerable
  include ::Mocha::Inspect::HashMethods

  # source://mocha//lib/mocha/parameter_matchers/instance_methods.rb#24
  def to_matcher(expectation = T.unsafe(nil)); end
end

# source://mocha//lib/mocha/version.rb#1
module Mocha
  class << self
    # source://mocha//lib/mocha/configuration.rb#24
    def configuration; end

    # source://mocha//lib/mocha/configuration.rb#19
    def configure; end
  end
end

# source://mocha//lib/mocha/receivers.rb#19
class Mocha::AnyInstanceReceiver
  # source://mocha//lib/mocha/receivers.rb#20
  def initialize(klass); end

  # source://mocha//lib/mocha/receivers.rb#24
  def mocks; end
end

# source://mocha//lib/mocha/argument_iterator.rb#2
class Mocha::ArgumentIterator
  # source://mocha//lib/mocha/argument_iterator.rb#3
  def initialize(argument); end

  # source://mocha//lib/mocha/argument_iterator.rb#7
  def each; end
end

# source://mocha//lib/mocha/backtrace_filter.rb#2
class Mocha::BacktraceFilter
  # source://mocha//lib/mocha/backtrace_filter.rb#5
  def initialize(lib_directory = T.unsafe(nil)); end

  # source://mocha//lib/mocha/backtrace_filter.rb#9
  def filtered(backtrace); end
end

# source://mocha//lib/mocha/backtrace_filter.rb#3
Mocha::BacktraceFilter::LIB_DIRECTORY = T.let(T.unsafe(nil), String)

# source://mocha//lib/mocha/block_matcher.rb#2
module Mocha::BlockMatchers; end

# source://mocha//lib/mocha/block_matcher.rb#11
class Mocha::BlockMatchers::BlockGiven
  # source://mocha//lib/mocha/block_matcher.rb#12
  def match?(actual_block); end

  # source://mocha//lib/mocha/block_matcher.rb#16
  def mocha_inspect; end
end

# source://mocha//lib/mocha/block_matcher.rb#21
class Mocha::BlockMatchers::NoBlockGiven
  # source://mocha//lib/mocha/block_matcher.rb#22
  def match?(actual_block); end

  # source://mocha//lib/mocha/block_matcher.rb#26
  def mocha_inspect; end
end

# source://mocha//lib/mocha/block_matcher.rb#3
class Mocha::BlockMatchers::OptionalBlock
  # source://mocha//lib/mocha/block_matcher.rb#4
  def match?(_actual_block); end

  # source://mocha//lib/mocha/block_matcher.rb#8
  def mocha_inspect; end
end

# source://mocha//lib/mocha/cardinality.rb#2
class Mocha::Cardinality
  # source://mocha//lib/mocha/cardinality.rb#5
  def initialize(required = T.unsafe(nil), maximum = T.unsafe(nil)); end

  # source://mocha//lib/mocha/cardinality.rb#29
  def <<(invocation); end

  # source://mocha//lib/mocha/cardinality.rb#79
  def actual_invocations; end

  # source://mocha//lib/mocha/cardinality.rb#49
  def allowed_any_number_of_times?; end

  # source://mocha//lib/mocha/cardinality.rb#58
  def anticipated_times; end

  # source://mocha//lib/mocha/cardinality.rb#14
  def at_least(count); end

  # source://mocha//lib/mocha/cardinality.rb#18
  def at_most(count); end

  # source://mocha//lib/mocha/cardinality.rb#10
  def exactly(count); end

  # source://mocha//lib/mocha/cardinality.rb#33
  def invocations_allowed?; end

  # source://mocha//lib/mocha/cardinality.rb#75
  def invoked_times; end

  # source://mocha//lib/mocha/cardinality.rb#41
  def needs_verifying?; end

  # source://mocha//lib/mocha/cardinality.rb#37
  def satisfied?; end

  # source://mocha//lib/mocha/cardinality.rb#22
  def times(range_or_count); end

  # source://mocha//lib/mocha/cardinality.rb#53
  def used?; end

  # source://mocha//lib/mocha/cardinality.rb#45
  def verified?; end

  protected

  # source://mocha//lib/mocha/cardinality.rb#87
  def count(number); end

  # source://mocha//lib/mocha/cardinality.rb#102
  def infinite?(number); end

  # source://mocha//lib/mocha/cardinality.rb#85
  def maximum; end

  # source://mocha//lib/mocha/cardinality.rb#85
  def required; end

  # source://mocha//lib/mocha/cardinality.rb#96
  def update(required, maximum); end
end

# source://mocha//lib/mocha/cardinality.rb#3
Mocha::Cardinality::INFINITY = T.let(T.unsafe(nil), Float)

# source://mocha//lib/mocha/change_state_side_effect.rb#2
class Mocha::ChangeStateSideEffect
  # source://mocha//lib/mocha/change_state_side_effect.rb#3
  def initialize(state); end

  # source://mocha//lib/mocha/change_state_side_effect.rb#11
  def mocha_inspect; end

  # source://mocha//lib/mocha/change_state_side_effect.rb#7
  def perform; end
end

# source://mocha//lib/mocha/configuration.rb#39
class Mocha::Configuration
  # source://mocha//lib/mocha/configuration.rb#55
  def initialize(options = T.unsafe(nil)); end

  # source://mocha//lib/mocha/configuration.rb#244
  def display_matching_invocations_on_failure=(value); end

  # source://mocha//lib/mocha/configuration.rb#249
  def display_matching_invocations_on_failure?; end

  # source://mocha//lib/mocha/configuration.rb#65
  def merge(other); end

  # source://mocha//lib/mocha/configuration.rb#290
  def strict_keyword_argument_matching=(value); end

  # source://mocha//lib/mocha/configuration.rb#296
  def strict_keyword_argument_matching?; end

  # source://mocha//lib/mocha/configuration.rb#215
  def stubbing_method_on_nil; end

  # source://mocha//lib/mocha/configuration.rb#210
  def stubbing_method_on_nil=(value); end

  # source://mocha//lib/mocha/configuration.rb#127
  def stubbing_method_on_non_mock_object; end

  # source://mocha//lib/mocha/configuration.rb#122
  def stubbing_method_on_non_mock_object=(value); end

  # source://mocha//lib/mocha/configuration.rb#94
  def stubbing_method_unnecessarily; end

  # source://mocha//lib/mocha/configuration.rb#89
  def stubbing_method_unnecessarily=(value); end

  # source://mocha//lib/mocha/configuration.rb#160
  def stubbing_non_existent_method; end

  # source://mocha//lib/mocha/configuration.rb#155
  def stubbing_non_existent_method=(value); end

  # source://mocha//lib/mocha/configuration.rb#194
  def stubbing_non_public_method; end

  # source://mocha//lib/mocha/configuration.rb#189
  def stubbing_non_public_method=(value); end

  protected

  # source://mocha//lib/mocha/configuration.rb#51
  def options; end

  private

  # source://mocha//lib/mocha/configuration.rb#60
  def initialize_copy(other); end

  class << self
    # source://mocha//lib/mocha/configuration.rb#327
    def configuration; end

    # source://mocha//lib/mocha/configuration.rb#318
    def override(temporary_options); end

    # source://mocha//lib/mocha/configuration.rb#302
    def reset_configuration; end

    private

    # source://mocha//lib/mocha/configuration.rb#334
    def change_config(action, new_value, &block); end

    # source://mocha//lib/mocha/configuration.rb#343
    def temporarily_change_config(action, new_value); end
  end
end

# source://mocha//lib/mocha/configuration.rb#41
Mocha::Configuration::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://mocha//lib/mocha/names.rb#32
class Mocha::DefaultName
  # source://mocha//lib/mocha/names.rb#33
  def initialize(mock); end

  # source://mocha//lib/mocha/names.rb#37
  def mocha_inspect; end
end

# source://mocha//lib/mocha/receivers.rb#36
class Mocha::DefaultReceiver
  # source://mocha//lib/mocha/receivers.rb#37
  def initialize(mock); end

  # source://mocha//lib/mocha/receivers.rb#41
  def mocks; end
end

# source://mocha//lib/mocha/deprecation.rb#4
class Mocha::Deprecation
  class << self
    # source://mocha//lib/mocha/deprecation.rb#6
    def messages; end

    # source://mocha//lib/mocha/deprecation.rb#6
    def messages=(_arg0); end

    # source://mocha//lib/mocha/deprecation.rb#6
    def mode; end

    # source://mocha//lib/mocha/deprecation.rb#6
    def mode=(_arg0); end

    # source://mocha//lib/mocha/deprecation.rb#8
    def warning(*messages); end
  end
end

# source://mocha//lib/mocha/exception_raiser.rb#2
class Mocha::ExceptionRaiser
  # source://mocha//lib/mocha/exception_raiser.rb#3
  def initialize(exception, message); end

  # source://mocha//lib/mocha/exception_raiser.rb#8
  def evaluate(invocation); end
end

# source://mocha//lib/mocha/expectation.rb#19
class Mocha::Expectation
  # source://mocha//lib/mocha/expectation.rb#597
  def initialize(mock, expected_method_name, backtrace = T.unsafe(nil)); end

  # source://mocha//lib/mocha/expectation.rb#616
  def add_in_sequence_ordering_constraint(sequence); end

  # source://mocha//lib/mocha/expectation.rb#611
  def add_ordering_constraint(ordering_constraint); end

  # source://mocha//lib/mocha/expectation.rb#621
  def add_side_effect(side_effect); end

  # source://mocha//lib/mocha/expectation.rb#134
  def at_least(minimum_number_of_times); end

  # source://mocha//lib/mocha/expectation.rb#152
  def at_least_once; end

  # source://mocha//lib/mocha/expectation.rb#170
  def at_most(maximum_number_of_times); end

  # source://mocha//lib/mocha/expectation.rb#188
  def at_most_once; end

  # source://mocha//lib/mocha/expectation.rb#594
  def backtrace; end

  # source://mocha//lib/mocha/expectation.rb#698
  def definition_location; end

  # source://mocha//lib/mocha/expectation.rb#631
  def in_correct_order?; end

  # source://mocha//lib/mocha/expectation.rb#588
  def in_sequence(sequence, *sequences); end

  # source://mocha//lib/mocha/expectation.rb#674
  def inspect; end

  # source://mocha//lib/mocha/expectation.rb#646
  def invocations_allowed?; end

  # source://mocha//lib/mocha/expectation.rb#656
  def invoke(invocation); end

  # source://mocha//lib/mocha/expectation.rb#641
  def match?(invocation); end

  # source://mocha//lib/mocha/expectation.rb#636
  def matches_method?(method_name); end

  # source://mocha//lib/mocha/expectation.rb#691
  def method_signature; end

  # source://mocha//lib/mocha/expectation.rb#681
  def mocha_inspect; end

  # source://mocha//lib/mocha/expectation.rb#375
  def multiple_yields(*parameter_groups); end

  # source://mocha//lib/mocha/expectation.rb#114
  def never; end

  # source://mocha//lib/mocha/expectation.rb#97
  def once; end

  # source://mocha//lib/mocha/expectation.rb#626
  def perform_side_effects; end

  # source://mocha//lib/mocha/expectation.rb#462
  def raises(exception = T.unsafe(nil), message = T.unsafe(nil)); end

  # source://mocha//lib/mocha/expectation.rb#422
  def returns(*values); end

  # source://mocha//lib/mocha/expectation.rb#651
  def satisfied?; end

  # source://mocha//lib/mocha/expectation.rb#536
  def then(state = T.unsafe(nil)); end

  # source://mocha//lib/mocha/expectation.rb#501
  def throws(tag, object = T.unsafe(nil)); end

  # source://mocha//lib/mocha/expectation.rb#46
  def times(range); end

  # source://mocha//lib/mocha/expectation.rb#72
  def twice; end

  # source://mocha//lib/mocha/expectation.rb#669
  def used?; end

  # source://mocha//lib/mocha/expectation.rb#663
  def verified?(assertion_counter = T.unsafe(nil)); end

  # source://mocha//lib/mocha/expectation.rb#560
  def when(state_predicate); end

  # source://mocha//lib/mocha/expectation.rb#269
  def with(*expected_parameters_or_matchers, &matching_block); end

  # source://mocha//lib/mocha/expectation.rb#289
  def with_block_given; end

  # source://mocha//lib/mocha/expectation.rb#308
  def with_no_block_given; end

  # source://mocha//lib/mocha/expectation.rb#347
  def yields(*parameters); end
end

# source://mocha//lib/mocha/expectation_error.rb#7
class Mocha::ExpectationError < ::Exception; end

# source://mocha//lib/mocha/expectation_error_factory.rb#12
class Mocha::ExpectationErrorFactory
  class << self
    # source://mocha//lib/mocha/expectation_error_factory.rb#26
    def build(message = T.unsafe(nil), backtrace = T.unsafe(nil)); end

    # source://mocha//lib/mocha/expectation_error_factory.rb#23
    def exception_class; end

    # source://mocha//lib/mocha/expectation_error_factory.rb#23
    def exception_class=(_arg0); end
  end
end

# source://mocha//lib/mocha/expectation_list.rb#2
class Mocha::ExpectationList
  # source://mocha//lib/mocha/expectation_list.rb#3
  def initialize(expectations = T.unsafe(nil)); end

  # source://mocha//lib/mocha/expectation_list.rb#48
  def +(other); end

  # source://mocha//lib/mocha/expectation_list.rb#7
  def add(expectation); end

  # source://mocha//lib/mocha/expectation_list.rb#44
  def any?; end

  # source://mocha//lib/mocha/expectation_list.rb#40
  def length; end

  # source://mocha//lib/mocha/expectation_list.rb#20
  def match(invocation); end

  # source://mocha//lib/mocha/expectation_list.rb#24
  def match_allowing_invocation(invocation); end

  # source://mocha//lib/mocha/expectation_list.rb#16
  def matches_method?(method_name); end

  # source://mocha//lib/mocha/expectation_list.rb#12
  def remove_all_matching_method(method_name); end

  # source://mocha//lib/mocha/expectation_list.rb#32
  def to_a; end

  # source://mocha//lib/mocha/expectation_list.rb#36
  def to_set; end

  # source://mocha//lib/mocha/expectation_list.rb#28
  def verified?(assertion_counter = T.unsafe(nil)); end

  private

  # source://mocha//lib/mocha/expectation_list.rb#54
  def matching_expectations(invocation); end
end

# source://mocha//lib/mocha/names.rb#12
class Mocha::ImpersonatingAnyInstanceName
  # source://mocha//lib/mocha/names.rb#13
  def initialize(klass); end

  # source://mocha//lib/mocha/names.rb#17
  def mocha_inspect; end
end

# source://mocha//lib/mocha/names.rb#2
class Mocha::ImpersonatingName
  # source://mocha//lib/mocha/names.rb#3
  def initialize(object); end

  # source://mocha//lib/mocha/names.rb#7
  def mocha_inspect; end
end

# source://mocha//lib/mocha/in_state_ordering_constraint.rb#2
class Mocha::InStateOrderingConstraint
  # source://mocha//lib/mocha/in_state_ordering_constraint.rb#3
  def initialize(state_predicate); end

  # source://mocha//lib/mocha/in_state_ordering_constraint.rb#7
  def allows_invocation_now?; end

  # source://mocha//lib/mocha/in_state_ordering_constraint.rb#11
  def mocha_inspect; end
end

# source://mocha//lib/mocha/inspect.rb#4
module Mocha::Inspect; end

# source://mocha//lib/mocha/inspect.rb#13
module Mocha::Inspect::ArrayMethods
  # source://mocha//lib/mocha/inspect.rb#14
  def mocha_inspect(wrapped = T.unsafe(nil)); end
end

# source://mocha//lib/mocha/inspect.rb#33
module Mocha::Inspect::DateMethods
  # source://mocha//lib/mocha/inspect.rb#34
  def mocha_inspect; end
end

# source://mocha//lib/mocha/inspect.rb#20
module Mocha::Inspect::HashMethods
  # source://mocha//lib/mocha/inspect.rb#21
  def mocha_inspect; end
end

# source://mocha//lib/mocha/inspect.rb#5
module Mocha::Inspect::ObjectMethods
  # source://mocha//lib/mocha/inspect.rb#6
  def mocha_inspect; end
end

# source://mocha//lib/mocha/inspect.rb#27
module Mocha::Inspect::TimeMethods
  # source://mocha//lib/mocha/inspect.rb#28
  def mocha_inspect; end
end

# source://mocha//lib/mocha/invocation.rb#8
class Mocha::Invocation
  # source://mocha//lib/mocha/invocation.rb#11
  def initialize(mock, method_name, arguments = T.unsafe(nil), block = T.unsafe(nil)); end

  # source://mocha//lib/mocha/invocation.rb#41
  def arguments; end

  # source://mocha//lib/mocha/invocation.rb#9
  def block; end

  # source://mocha//lib/mocha/invocation.rb#20
  def call(yield_parameters = T.unsafe(nil), return_values = T.unsafe(nil)); end

  # source://mocha//lib/mocha/invocation.rb#45
  def call_description; end

  # source://mocha//lib/mocha/invocation.rb#61
  def full_description; end

  # source://mocha//lib/mocha/invocation.rb#9
  def method_name; end

  # source://mocha//lib/mocha/invocation.rb#33
  def raised(exception); end

  # source://mocha//lib/mocha/invocation.rb#55
  def result_description; end

  # source://mocha//lib/mocha/invocation.rb#29
  def returned(value); end

  # source://mocha//lib/mocha/invocation.rb#51
  def short_call_description; end

  # source://mocha//lib/mocha/invocation.rb#37
  def threw(tag, value); end

  private

  # source://mocha//lib/mocha/invocation.rb#67
  def argument_description; end
end

# source://mocha//lib/mocha/method_matcher.rb#2
class Mocha::MethodMatcher
  # source://mocha//lib/mocha/method_matcher.rb#5
  def initialize(expected_method_name); end

  # source://mocha//lib/mocha/method_matcher.rb#3
  def expected_method_name; end

  # source://mocha//lib/mocha/method_matcher.rb#9
  def match?(actual_method_name); end

  # source://mocha//lib/mocha/method_matcher.rb#13
  def mocha_inspect; end
end

# source://mocha//lib/mocha/mock.rb#75
class Mocha::Mock
  # source://mocha//lib/mocha/mock.rb#273
  def initialize(mockery, name = T.unsafe(nil), receiver = T.unsafe(nil)); end

  # source://mocha//lib/mocha/mock.rb#297
  def __expectations__; end

  # source://mocha//lib/mocha/mock.rb#110
  def __expects__(method_name_or_hash, backtrace = T.unsafe(nil)); end

  # source://mocha//lib/mocha/mock.rb#346
  def __expire__; end

  def __singleton_class__; end

  # source://mocha//lib/mocha/mock.rb#148
  def __stubs__(method_name_or_hash, backtrace = T.unsafe(nil)); end

  # source://mocha//lib/mocha/mock.rb#341
  def __verified__?(assertion_counter = T.unsafe(nil)); end

  # source://mocha//lib/mocha/mock.rb#307
  def all_expectations; end

  # source://mocha//lib/mocha/mock.rb#366
  def any_expectations?; end

  # source://mocha//lib/mocha/mock.rb#361
  def ensure_method_not_already_defined(method_name); end

  # source://mocha//lib/mocha/mock.rb#285
  def everything_stubbed; end

  # source://mocha//lib/mocha/mock.rb#110
  def expects(method_name_or_hash, backtrace = T.unsafe(nil)); end

  # source://mocha//lib/mocha/mock.rb#320
  def handle_method_call(symbol, arguments, block); end

  # source://mocha//lib/mocha/mock.rb#356
  def inspect; end

  # source://mocha//lib/mocha/mock.rb#313
  def method_missing(symbol, *arguments, &block); end

  # source://mocha//lib/mocha/mock.rb#351
  def mocha_inspect; end

  # source://mocha//lib/mocha/mock.rb#235
  def quacks_like(responder); end

  # source://mocha//lib/mocha/mock.rb#268
  def quacks_like_instance_of(responder_class); end

  # source://mocha//lib/mocha/mock.rb#235
  def responds_like(responder); end

  # source://mocha//lib/mocha/mock.rb#268
  def responds_like_instance_of(responder_class); end

  # source://mocha//lib/mocha/mock.rb#302
  def stub_everything; end

  # source://mocha//lib/mocha/mock.rb#148
  def stubs(method_name_or_hash, backtrace = T.unsafe(nil)); end

  # source://mocha//lib/mocha/mock.rb#180
  def unstub(*method_names); end

  private

  # source://mocha//lib/mocha/mock.rb#389
  def check_expiry; end

  # source://mocha//lib/mocha/mock.rb#383
  def check_responder_responds_to(symbol); end

  # source://mocha//lib/mocha/mock.rb#372
  def raise_unexpected_invocation_error(invocation, matching_expectation); end

  # source://mocha//lib/mocha/mock.rb#332
  def respond_to_missing?(symbol, _include_all); end
end

# source://mocha//lib/mocha/names.rb#22
class Mocha::Name
  # source://mocha//lib/mocha/names.rb#23
  def initialize(name); end

  # source://mocha//lib/mocha/names.rb#27
  def mocha_inspect; end
end

# source://mocha//lib/mocha/receivers.rb#2
class Mocha::ObjectReceiver
  # source://mocha//lib/mocha/receivers.rb#3
  def initialize(object); end

  # source://mocha//lib/mocha/receivers.rb#7
  def mocks; end
end

# source://mocha//lib/mocha/parameter_matchers.rb#3
module Mocha::ParameterMatchers
  # source://mocha//lib/mocha/parameter_matchers/not.rb#24
  def Not(matcher); end

  # source://mocha//lib/mocha/parameter_matchers/all_of.rb#23
  def all_of(*matchers); end

  # source://mocha//lib/mocha/parameter_matchers/any_of.rb#29
  def any_of(*matchers); end

  # source://mocha//lib/mocha/parameter_matchers/any_parameters.rb#21
  def any_parameters; end

  # source://mocha//lib/mocha/parameter_matchers/anything.rb#18
  def anything; end

  # source://mocha//lib/mocha/parameter_matchers/equals.rb#24
  def equals(value); end

  # source://mocha//lib/mocha/parameter_matchers/equivalent_uri.rb#25
  def equivalent_uri(uri); end

  # source://mocha//lib/mocha/parameter_matchers/has_entries.rb#26
  def has_entries(entries); end

  # source://mocha//lib/mocha/parameter_matchers/has_entry.rb#43
  def has_entry(*options); end

  # source://mocha//lib/mocha/parameter_matchers/has_key.rb#24
  def has_key(key); end

  # source://mocha//lib/mocha/parameter_matchers/has_keys.rb#24
  def has_keys(*keys); end

  # source://mocha//lib/mocha/parameter_matchers/has_value.rb#24
  def has_value(value); end

  # source://mocha//lib/mocha/parameter_matchers/includes.rb#63
  def includes(*items); end

  # source://mocha//lib/mocha/parameter_matchers/instance_of.rb#24
  def instance_of(klass); end

  # source://mocha//lib/mocha/parameter_matchers/is_a.rb#25
  def is_a(klass); end

  # source://mocha//lib/mocha/parameter_matchers/kind_of.rb#24
  def kind_of(klass); end

  # source://mocha//lib/mocha/parameter_matchers/optionally.rb#33
  def optionally(*matchers); end

  # source://mocha//lib/mocha/parameter_matchers/regexp_matches.rb#24
  def regexp_matches(regexp); end

  # source://mocha//lib/mocha/parameter_matchers/responds_with.rb#25
  def responds_with(message, result); end

  # source://mocha//lib/mocha/parameter_matchers/yaml_equivalent.rb#24
  def yaml_equivalent(object); end

  private

  # source://mocha//lib/mocha/parameter_matchers/has_entry.rb#82
  def parse_option(option); end
end

# source://mocha//lib/mocha/parameter_matchers/all_of.rb#29
class Mocha::ParameterMatchers::AllOf < ::Mocha::ParameterMatchers::Base
  # source://mocha//lib/mocha/parameter_matchers/all_of.rb#30
  def initialize(*matchers); end

  # source://mocha//lib/mocha/parameter_matchers/all_of.rb#35
  def matches?(available_parameters); end

  # source://mocha//lib/mocha/parameter_matchers/all_of.rb#41
  def mocha_inspect; end
end

# source://mocha//lib/mocha/parameter_matchers/any_of.rb#35
class Mocha::ParameterMatchers::AnyOf < ::Mocha::ParameterMatchers::Base
  # source://mocha//lib/mocha/parameter_matchers/any_of.rb#36
  def initialize(*matchers); end

  # source://mocha//lib/mocha/parameter_matchers/any_of.rb#41
  def matches?(available_parameters); end

  # source://mocha//lib/mocha/parameter_matchers/any_of.rb#47
  def mocha_inspect; end
end

# source://mocha//lib/mocha/parameter_matchers/any_parameters.rb#27
class Mocha::ParameterMatchers::AnyParameters < ::Mocha::ParameterMatchers::Base
  # source://mocha//lib/mocha/parameter_matchers/any_parameters.rb#28
  def matches?(available_parameters); end

  # source://mocha//lib/mocha/parameter_matchers/any_parameters.rb#36
  def mocha_inspect; end
end

# source://mocha//lib/mocha/parameter_matchers/anything.rb#24
class Mocha::ParameterMatchers::Anything < ::Mocha::ParameterMatchers::Base
  # source://mocha//lib/mocha/parameter_matchers/anything.rb#25
  def matches?(available_parameters); end

  # source://mocha//lib/mocha/parameter_matchers/anything.rb#31
  def mocha_inspect; end
end

# source://mocha//lib/mocha/parameter_matchers/base.rb#4
class Mocha::ParameterMatchers::Base
  # source://mocha//lib/mocha/parameter_matchers/base.rb#30
  def &(other); end

  # source://mocha//lib/mocha/parameter_matchers/base.rb#6
  def to_matcher(_expectation = T.unsafe(nil)); end

  # source://mocha//lib/mocha/parameter_matchers/base.rb#60
  def |(other); end
end

# source://mocha//lib/mocha/parameter_matchers/equals.rb#30
class Mocha::ParameterMatchers::Equals < ::Mocha::ParameterMatchers::Base
  # source://mocha//lib/mocha/parameter_matchers/equals.rb#31
  def initialize(value); end

  # source://mocha//lib/mocha/parameter_matchers/equals.rb#36
  def matches?(available_parameters); end

  # source://mocha//lib/mocha/parameter_matchers/equals.rb#42
  def mocha_inspect; end
end

# source://mocha//lib/mocha/parameter_matchers/equivalent_uri.rb#31
class Mocha::ParameterMatchers::EquivalentUri < ::Mocha::ParameterMatchers::Base
  # source://mocha//lib/mocha/parameter_matchers/equivalent_uri.rb#32
  def initialize(uri); end

  # source://mocha//lib/mocha/parameter_matchers/equivalent_uri.rb#37
  def matches?(available_parameters); end

  # source://mocha//lib/mocha/parameter_matchers/equivalent_uri.rb#44
  def mocha_inspect; end

  private

  # source://mocha//lib/mocha/parameter_matchers/equivalent_uri.rb#51
  def explode(uri); end
end

# source://mocha//lib/mocha/parameter_matchers/has_entries.rb#32
class Mocha::ParameterMatchers::HasEntries < ::Mocha::ParameterMatchers::Base
  # source://mocha//lib/mocha/parameter_matchers/has_entries.rb#33
  def initialize(entries); end

  # source://mocha//lib/mocha/parameter_matchers/has_entries.rb#38
  def matches?(available_parameters); end

  # source://mocha//lib/mocha/parameter_matchers/has_entries.rb#45
  def mocha_inspect; end
end

# source://mocha//lib/mocha/parameter_matchers/has_entry.rb#59
class Mocha::ParameterMatchers::HasEntry < ::Mocha::ParameterMatchers::Base
  # source://mocha//lib/mocha/parameter_matchers/has_entry.rb#60
  def initialize(key, value); end

  # source://mocha//lib/mocha/parameter_matchers/has_entry.rb#66
  def matches?(available_parameters); end

  # source://mocha//lib/mocha/parameter_matchers/has_entry.rb#74
  def mocha_inspect; end
end

# source://mocha//lib/mocha/parameter_matchers/has_key.rb#30
class Mocha::ParameterMatchers::HasKey < ::Mocha::ParameterMatchers::Base
  # source://mocha//lib/mocha/parameter_matchers/has_key.rb#31
  def initialize(key); end

  # source://mocha//lib/mocha/parameter_matchers/has_key.rb#36
  def matches?(available_parameters); end

  # source://mocha//lib/mocha/parameter_matchers/has_key.rb#43
  def mocha_inspect; end
end

# source://mocha//lib/mocha/parameter_matchers/has_keys.rb#30
class Mocha::ParameterMatchers::HasKeys < ::Mocha::ParameterMatchers::Base
  # source://mocha//lib/mocha/parameter_matchers/has_keys.rb#31
  def initialize(*keys); end

  # source://mocha//lib/mocha/parameter_matchers/has_keys.rb#38
  def matches?(available_parameters); end

  # source://mocha//lib/mocha/parameter_matchers/has_keys.rb#48
  def mocha_inspect; end
end

# source://mocha//lib/mocha/parameter_matchers/has_value.rb#30
class Mocha::ParameterMatchers::HasValue < ::Mocha::ParameterMatchers::Base
  # source://mocha//lib/mocha/parameter_matchers/has_value.rb#31
  def initialize(value); end

  # source://mocha//lib/mocha/parameter_matchers/has_value.rb#36
  def matches?(available_parameters); end

  # source://mocha//lib/mocha/parameter_matchers/has_value.rb#43
  def mocha_inspect; end
end

# source://mocha//lib/mocha/parameter_matchers/includes.rb#69
class Mocha::ParameterMatchers::Includes < ::Mocha::ParameterMatchers::Base
  # source://mocha//lib/mocha/parameter_matchers/includes.rb#70
  def initialize(*items); end

  # source://mocha//lib/mocha/parameter_matchers/includes.rb#76
  def matches?(available_parameters); end

  # source://mocha//lib/mocha/parameter_matchers/includes.rb#96
  def mocha_inspect; end
end

# source://mocha//lib/mocha/parameter_matchers/instance_methods.rb#7
module Mocha::ParameterMatchers::InstanceMethods
  # source://mocha//lib/mocha/parameter_matchers/instance_methods.rb#9
  def to_matcher(_expectation = T.unsafe(nil)); end
end

# source://mocha//lib/mocha/parameter_matchers/instance_of.rb#30
class Mocha::ParameterMatchers::InstanceOf < ::Mocha::ParameterMatchers::Base
  # source://mocha//lib/mocha/parameter_matchers/instance_of.rb#31
  def initialize(klass); end

  # source://mocha//lib/mocha/parameter_matchers/instance_of.rb#36
  def matches?(available_parameters); end

  # source://mocha//lib/mocha/parameter_matchers/instance_of.rb#42
  def mocha_inspect; end
end

# source://mocha//lib/mocha/parameter_matchers/is_a.rb#31
class Mocha::ParameterMatchers::IsA < ::Mocha::ParameterMatchers::Base
  # source://mocha//lib/mocha/parameter_matchers/is_a.rb#32
  def initialize(klass); end

  # source://mocha//lib/mocha/parameter_matchers/is_a.rb#37
  def matches?(available_parameters); end

  # source://mocha//lib/mocha/parameter_matchers/is_a.rb#43
  def mocha_inspect; end
end

# source://mocha//lib/mocha/parameter_matchers/kind_of.rb#30
class Mocha::ParameterMatchers::KindOf < ::Mocha::ParameterMatchers::Base
  # source://mocha//lib/mocha/parameter_matchers/kind_of.rb#31
  def initialize(klass); end

  # source://mocha//lib/mocha/parameter_matchers/kind_of.rb#36
  def matches?(available_parameters); end

  # source://mocha//lib/mocha/parameter_matchers/kind_of.rb#44
  def mocha_inspect; end
end

# source://mocha//lib/mocha/parameter_matchers/not.rb#30
class Mocha::ParameterMatchers::Not < ::Mocha::ParameterMatchers::Base
  # source://mocha//lib/mocha/parameter_matchers/not.rb#31
  def initialize(matcher); end

  # source://mocha//lib/mocha/parameter_matchers/not.rb#36
  def matches?(available_parameters); end

  # source://mocha//lib/mocha/parameter_matchers/not.rb#42
  def mocha_inspect; end
end

# source://mocha//lib/mocha/parameter_matchers/optionally.rb#39
class Mocha::ParameterMatchers::Optionally < ::Mocha::ParameterMatchers::Base
  # source://mocha//lib/mocha/parameter_matchers/optionally.rb#40
  def initialize(*parameters); end

  # source://mocha//lib/mocha/parameter_matchers/optionally.rb#45
  def matches?(available_parameters); end

  # source://mocha//lib/mocha/parameter_matchers/optionally.rb#56
  def mocha_inspect; end
end

# source://mocha//lib/mocha/parameter_matchers/positional_or_keyword_hash.rb#8
class Mocha::ParameterMatchers::PositionalOrKeywordHash < ::Mocha::ParameterMatchers::Base
  # source://mocha//lib/mocha/parameter_matchers/positional_or_keyword_hash.rb#9
  def initialize(value, expectation); end

  # source://mocha//lib/mocha/parameter_matchers/positional_or_keyword_hash.rb#14
  def matches?(available_parameters); end

  # source://mocha//lib/mocha/parameter_matchers/positional_or_keyword_hash.rb#27
  def mocha_inspect; end

  private

  # source://mocha//lib/mocha/parameter_matchers/positional_or_keyword_hash.rb#41
  def deprecation_warning(actual, expected); end

  # source://mocha//lib/mocha/parameter_matchers/positional_or_keyword_hash.rb#57
  def expectation_definition; end

  # source://mocha//lib/mocha/parameter_matchers/positional_or_keyword_hash.rb#33
  def extract_parameter(available_parameters); end

  # source://mocha//lib/mocha/parameter_matchers/positional_or_keyword_hash.rb#49
  def hash_type(hash); end

  # source://mocha//lib/mocha/parameter_matchers/positional_or_keyword_hash.rb#53
  def ruby2_keywords_hash?(hash); end

  # source://mocha//lib/mocha/parameter_matchers/positional_or_keyword_hash.rb#37
  def same_type_of_hash?(actual, expected); end
end

# source://mocha//lib/mocha/parameter_matchers/regexp_matches.rb#30
class Mocha::ParameterMatchers::RegexpMatches < ::Mocha::ParameterMatchers::Base
  # source://mocha//lib/mocha/parameter_matchers/regexp_matches.rb#31
  def initialize(regexp); end

  # source://mocha//lib/mocha/parameter_matchers/regexp_matches.rb#36
  def matches?(available_parameters); end

  # source://mocha//lib/mocha/parameter_matchers/regexp_matches.rb#43
  def mocha_inspect; end
end

# source://mocha//lib/mocha/parameter_matchers/responds_with.rb#31
class Mocha::ParameterMatchers::RespondsWith < ::Mocha::ParameterMatchers::Base
  # source://mocha//lib/mocha/parameter_matchers/responds_with.rb#32
  def initialize(message, result); end

  # source://mocha//lib/mocha/parameter_matchers/responds_with.rb#38
  def matches?(available_parameters); end

  # source://mocha//lib/mocha/parameter_matchers/responds_with.rb#44
  def mocha_inspect; end
end

# source://mocha//lib/mocha/parameter_matchers/yaml_equivalent.rb#30
class Mocha::ParameterMatchers::YamlEquivalent < ::Mocha::ParameterMatchers::Base
  # source://mocha//lib/mocha/parameter_matchers/yaml_equivalent.rb#31
  def initialize(object); end

  # source://mocha//lib/mocha/parameter_matchers/yaml_equivalent.rb#36
  def matches?(available_parameters); end

  # source://mocha//lib/mocha/parameter_matchers/yaml_equivalent.rb#44
  def mocha_inspect; end
end

# source://mocha//lib/mocha/parameters_matcher.rb#5
class Mocha::ParametersMatcher
  # source://mocha//lib/mocha/parameters_matcher.rb#6
  def initialize(expected_parameters = T.unsafe(nil), expectation = T.unsafe(nil), &matching_block); end

  # source://mocha//lib/mocha/parameters_matcher.rb#12
  def match?(actual_parameters = T.unsafe(nil)); end

  # source://mocha//lib/mocha/parameters_matcher.rb#30
  def matchers; end

  # source://mocha//lib/mocha/parameters_matcher.rb#24
  def mocha_inspect; end

  # source://mocha//lib/mocha/parameters_matcher.rb#20
  def parameters_match?(actual_parameters); end
end

# source://mocha//lib/mocha/ruby_version.rb#2
Mocha::RUBY_V27_PLUS = T.let(T.unsafe(nil), TrueClass)

# source://mocha//lib/mocha/raised_exception.rb#2
class Mocha::RaisedException
  # source://mocha//lib/mocha/raised_exception.rb#3
  def initialize(exception); end

  # source://mocha//lib/mocha/raised_exception.rb#7
  def mocha_inspect; end
end

# source://mocha//lib/mocha/return_values.rb#4
class Mocha::ReturnValues
  # source://mocha//lib/mocha/return_values.rb#11
  def initialize(*values); end

  # source://mocha//lib/mocha/return_values.rb#23
  def +(other); end

  # source://mocha//lib/mocha/return_values.rb#15
  def next(invocation); end

  # source://mocha//lib/mocha/return_values.rb#9
  def values; end

  # source://mocha//lib/mocha/return_values.rb#9
  def values=(_arg0); end

  class << self
    # source://mocha//lib/mocha/return_values.rb#5
    def build(*values); end
  end
end

# source://mocha//lib/mocha/single_return_value.rb#4
class Mocha::SingleReturnValue
  # source://mocha//lib/mocha/single_return_value.rb#5
  def initialize(value); end

  # source://mocha//lib/mocha/single_return_value.rb#9
  def evaluate(invocation); end
end

# source://mocha//lib/mocha/thrower.rb#2
class Mocha::Thrower
  # source://mocha//lib/mocha/thrower.rb#3
  def initialize(tag, object = T.unsafe(nil)); end

  # source://mocha//lib/mocha/thrower.rb#8
  def evaluate(invocation); end
end

# source://mocha//lib/mocha/thrown_object.rb#2
class Mocha::ThrownObject
  # source://mocha//lib/mocha/thrown_object.rb#3
  def initialize(tag, value = T.unsafe(nil)); end

  # source://mocha//lib/mocha/thrown_object.rb#8
  def mocha_inspect; end
end

# source://mocha//lib/mocha/version.rb#2
Mocha::VERSION = T.let(T.unsafe(nil), String)

# source://mocha//lib/mocha/yield_parameters.rb#2
class Mocha::YieldParameters
  # source://mocha//lib/mocha/yield_parameters.rb#3
  def initialize; end

  # source://mocha//lib/mocha/yield_parameters.rb#15
  def add(*parameter_groups); end

  # source://mocha//lib/mocha/yield_parameters.rb#7
  def next_invocation; end
end

# source://mocha//lib/mocha/inspect.rb#41
class Object < ::BasicObject
  include ::Kernel
  include ::ActiveSupport::ForkTracker::CoreExt
  include ::ActiveSupport::ForkTracker::CoreExtPrivate
  include ::PP::ObjectMixin
  include ::Mocha::Inspect::ObjectMethods
  include ::Mocha::ParameterMatchers::InstanceMethods
end

# source://mocha//lib/mocha/inspect.rb#53
class Time
  include ::Comparable
  include ::Mocha::Inspect::TimeMethods
end
